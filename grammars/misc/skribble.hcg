@IGNORE g:sp g:nl tk:comment

@IMPORT default-productions as def

<> skribble > module
    f:r { { type:"module", statements:$1 } }

<> module > (statements)(*)
    f:r { { type:"module", statements:$1 } }

##########################################################################
########## statements

<> statements > import 
    | class 
    | primitive_declaration \; f:r { $1 }
    | struct
    | function
    | namespace
    | template
    f:r { env.grabTemplateNode("template-statement") }

<> import > \import tk:string

<> namespace >  \ns identifier \{ statements(*) \}                                                                    

f:r {  { type:"namespace", name:$2, statements:$4 }  }

<> class >  modifier_list? \cls identifier ( \is g:id )? \{  ( struct | primitive_declaration | function )(*)  \}

f:r {  
    { 
        type:"class", 
        name:$3, 
        inherits:$$4,
        modifiers: $1 || [],
        members: $6 || [],
    }  
}

<> struct > modifier_list? \str identifier  \{ parameters? \}                                                          

f:r {  
    { 
        type:"structure", 
        name:$3, 
        modifiers: $1 || [],
        properties: $5 || [],
    }  
}

<> function >  modifier_list? \fn identifier \: type \( parameters? \) \{  expression_statements?  \}
f:r {  
    { 
        type:"function", 
        return_type: $5,
        name:$3, 
        modifiers: $1 || [],
        parameters: $7 || [],
        expressions: $10 || [],
    }  
}


<> function_expression > modifier_list? \fn \: type \( parameters? \) \{  expression_statements?  \}
f:r {  
    { 
        type:"lambda", 
        return_type: $4,
        modifiers: $1 || [],
        parameters: $6 || [],
        expressions: $9 || [],
    }  
}

<> parameters > primitive_declaration(+\, ) 

##########################################################################
########## Expressions

<> expression_statements > expression_statements ( \; (+) (expression | primitive_declaration)? f:r { $$2 }  )?
f:r {  $$2 ?  ($1.push($2),$1)  : $1  }
# This > ( expression | primitive_declaration ) < will not work. Why?
    | expression 
f:r { [ $1 ] }
    | primitive_declaration 
f:r { [ $1 ] }                                          

<> expression > assignment_expression
    | if_expression
    | match_expression
    | binary_expression
    | break_expression
    | return_expression
    | continue_expression
    | loop_expression
    | \{ expression_statements? \}
    f:r { { type:"block", expressions:$2 || [] } }  
    | template
    f:r { env.grabTemplateNode("template-expression") }

<> assignment_expression > left_hand_expression \= expression
f:r {  
    { 
        type:"assignment",
        target:($1), 
        expression:$3
    }  
}

<> if_expression > \if expression \: expression ( \else expression  )?
f:r { { type:"if", assertion: $$2, expression: $$4, else: $$5  } }

<> binary_expression > unary_expression operator
f:r { { type:"operator-expression", list: [$1, $2] }  }
| unary_expression operator expression
f:r {  
    $1.list
    ? ($1.list.push($2, $3), $1)
    : { type:"operator-expression", list:[$1, $2, ...($3.type == "operator-expression" ? $3.list : [$3]) ] }
}
| unary_expression

<> unary_expression > operator unary_value
    f:r { { type:"operator-expression", list: [$1, $2] }  }
    | unary_value

<> unary_value > left_hand_expression
    | call_expression
    | function_expression
    | value
    | \( ( expression | primitive_declaration ) \)
    f:r { { type:"parenthesis", expression:$2 } }  

<> left_hand_expression > member_expression
    
<> loop_expression > 
    \loop ( \( expression? \) f:r { $$2 } ) expression
    f:r { { type:"loop", assertion: $$2, expression: $$3  } }

    | \loop \( parameters? ; expression? ; expression(*\, ) \) expression
    f:r { { type:"for-loop", initializers:$3, assertion: $$5, post_iteration: $$7, expression: $$9  } }

    | \loop \( primitive_declaration \in expression \) expression
    f:r { { type:"in-loop", initializer:$3, target: $$5, expression: $7  } }

<> match_expression > \match expression \: match_clause(*\, ) 
f:r { { type:"match", match_expression: $$1, matches: $$4  } }

<> match_clause > expression \: expression
f:r { { type:"match-clause", match: $$1, expression: $$3  } }

<> call_expression > member_expression \(  expression(*\, )  \)
f:r { { type:"call", reference: $$1, parameters: $$3  } }

<> member_expression > member_expression \. identifier
f:r { { type:"member-reference", reference: $$1, property: $$3  } }

    | member_expression \[ expression \]
f:r { { type:"member-expression", reference: $$1, expression: $$3  } }

    | template
f:r { env.grabTemplateNode("template-value") }

    | identifier
f:r { ($1.type = "reference", $1) }

<> break_expression > \break (\: expression )?
f:r { { type:"break", expression: $$2  } }

<> return_expression > \return (\: expression )?
f:r { { type:"return", expression: $$2  } }

<> continue_expression > \continue
f:r { { type:"continue"  } }

##########################################################################
########## Identifiers & References

<> primitive_declaration > modifier_list? identifier \: type ( \= expression )?
f:r {  
    { 
        type:"declaration",
        name:( $2), 
        primitive_type:$4, 
        modifiers: $1 || [],
        initialization : $5
    }  
}

<> identifier > tk:identifier_token
f:r { { type:"identifier", value: $$1  } }

<> identifier_token > ( g:id | \_ | \$ ) ( g:id | \_ | \$ )(*)  ( ?=g:sp | ?=g:nl )?

<> modifier_list >\[ modifier(+) \] 
f:r { $2 }

##########################################################################
########## PRIMITIVE TYPES

<> type > identifier 
    f:r { ($1.type = "type-reference", $1) }
    | ( \u | \i | \uint | \int  ) ( \8 | \16 | \32 | \64 | \128  )
    f:r{ { type: "type-" + $1[0] + $2 } }
    | (   \f | \flt  ) ( \32 | \64 | \128  )
    f:r{ { type: "type-" + $1[0] + $2 } }
    | \string
    f:r { { type:"type-string"  } }
    | \str 
    f:r { { type:"type-string"  } }

##########################################################################
########## PRIMITIVE 

<> value > num
f:r { { type:"number", value: $$1  } }

| tk:string 
f:r { { type:"string", value: $$1  } }

| \true 
f:r { { type:"boolean", value:true  } }

| \false 
f:r { { type:"boolean", value:false  } }

| \null
f:r { { type:"null"  } }

| template
f:r { env.grabTemplateNode("template-value") }

<> string > \" ( g:sp | g:nl | g:id | g:  | g:num | \\" )(*\' ) \"
f:r { { type:"string", value: $$2  } }
| \' ( g:sp | g:nl | g:id | g: | g:num | \\" )(*\' ) \'
f:r { { type:"string", value: $$2  } }

<> num > tk:num_tok

<> num_tok > def::number
    | def::hex
    | def::binary
    | def::octal

<> operator > g: g:(*\' ) ( ?=g:sp | ?=g:nl )?
    f:r { { type:"operator", val: $1 + $2, precedence:0  } }

    |  \== g:(*\' ) ( ?=g:sp | ?=g:nl )?
    f:r { { type:"operator", val: $1 + $2, precedence:0  } }

<> modifier > \pub | \priv | \export | \mut | \imut | g:id

##########################################################################
########## COMMENTS

<> comment > \/* ( g:id | g: | g:num )(*) \*/
    | \// ( g:id | g: | g:num )(*) ( ?=g:nl )

##########################################################################
########## TEMPLATES

<> template > \<<-- g:num? \-->> 
