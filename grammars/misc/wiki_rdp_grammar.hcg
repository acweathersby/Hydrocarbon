# https://en.wikipedia.org/wiki/Recursive_descent_parser
@IGNORE g:sp g:nl


<> program >  block

<> block > ( t:const g:id  \= g:num ( \, g:id \= g:num  )(*) )?
           ( t:var g:id ( \, g:id  )(*) )? 
           ( t:procedure g:id \; block \; )(*) statement

<> statement >
            g:id \:= expression
        |   t:call g:id
        |   t:begin statement ( \; statement )(*) t:end
        |   t:if condition t:then statement
        |   t:while condition t:do statement
        |   condition


<> condition > 
            t:odd expression
        |   expression ( \= | \# | \< | \<= | \>= ) expression
    
<> expression > 
            ( \+ | \- ) term ( ( \- | \+ ) term )(*)
        #| program

<> term >   
            factor ( ( \* | \+ ) factor )(*)

<> factor >
            g:id
        |   g:num
        |   \( expression \)
            



