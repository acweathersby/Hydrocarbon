@SYMBOL || ^= $= *= ({ })

@IGNORE θnl θws

@IMPORT ./css2.hcg AS css2

@IMPORT ./binding.hcg AS b

↦a {console.log(len);this.sel = len > 1 ? sym[1]: sym[0]; this.op = len > 1 ? sym[0] : null;}

##############################################################################################
##############################################################################################
#### CSS
##############################################################################################
##############################################################################################	
	<> goal → RULE		

	<> RULE → COMPLEX_SELECTOR(+,) RULE_BODY ↦c{this.selectors=sym[0]; this.body = sym[1]} 

##############################################################################################
#### Modified from https://drafts.csswg.org/selectors-4/#grammar
##############################################################################################

	<> COMPLEX_SELECTOR →  COMPOUND_SELECTOR (( COMBINATOR? COMPOUND_SELECTOR ↦c=>a )) (*)

	<> COMPOUND_SELECTOR →  TYPE_SELECTOR? SUBCLASS_SELECTOR(*) (( PSEUDO_ELEMENT_SELECTOR PSEUDO_CLASS_SELECTOR(*) ))(*) ! 
		↦c{
			this.sym = sym
		}

	<> COMBINATOR →  > 
		│ + 
		│ ~ 
		│ \||



	<> TYPE_SELECTOR →  WQ_NAME 	↦c{this.type="ts"; this.sym = sym[0]}
		│ NS_PREFIX? *					↦c{this.type="ts_any"; this.prefix = (sym[0].length > 1) ? sym[0] : "" }
		│ b::binding

	+> b::binding → \({ ((θany│θws))(+")  \}) ↦c {this.val = sym[1]}
		
	<> NS_PREFIX →  ((θid │ * ))? \| 

	<> WQ_NAME →  NS_PREFIX? θid

	<> SUBCLASS_SELECTOR →  ID_SELECTOR 
		│ CLASS_SELECTOR 
		│ ATTRIBUTE_SELECTOR 
		│ PSEUDO_CLASS_SELECTOR
		│ css2::START

	<> ID_SELECTOR →  \# θid  			↦c{ this.type="id"; this.id = sym[1]}

	<> CLASS_SELECTOR →  . θid 			↦c{ this.type="class"; this.id = sym[1]}

	<> ATTRIBUTE_SELECTOR →  [ WQ_NAME ] 
		│ [ WQ_NAME ATTR_MATCHER (( θid │ θstr )) ATTR_MODIFIER? ]

	<> ATTR_MATCHER → ~=
		│ ^= 
		│ $= 
		│ *=
		│ =

	<> ATTR_MODIFIER →  τi 
		│ τs

	<> PSEUDO_CLASS_SELECTOR →  : θid 
		│ : θid ( θany )

	<> PSEUDO_ELEMENT_SELECTOR →  : PSEUDO_CLASS_SELECTOR
	
	<> RULE_BODY → { PROP(*;)  } 					↦return { sym[1] }
						

	<> PROP → θid \: PROP_BODY ;? 						↦return { {name:sym[0], body:sym[2]} }		

	# Let the css parser handle the actual prop. 
	<> PROP_BODY → " θid "  								↦return { [sym[1] ] }
