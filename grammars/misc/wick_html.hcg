## HYDROCARBON BASE JS ##

@NAME CandleLibrary Hyper Text Markup Langauge Parser

@EXT html

@SYMBOL </ (( )) )( " ' 

@IGNORE g:sp g:nl 

<> S > GOAL_TAG

<> GOAL_TAG > TAG 								 	

<> TAG > < TAGNAME ATTRIBUTES > TAG_BODY </ TAGNAME >	 ↦cstr { 
																this.tagname = sym[1];
																this.attr = sym[2];
																this.children = sym[4] || [];
																this.parent = null;
																this.children.forEach(e=>e.parent=this);
															}

	│ < TAGNAME ATTRIBUTES />							↦cstr { 
																this.tagname = sym[1];
																this.attr = sym[2];
																this.children = [];
																this.parent = null;
															}

<> TAG_BODY >  TAG_BODY TEXT_NODE  					↦return { sym[0].push(sym[1]), sym[0] }
	│ TAG_BODY TAG  								↦return { sym[0].push(sym[1]), sym[0] }
	│ TAG 											↦return { [sym[0]] }
	│ TEXT_NODE 									↦return { [sym[0]] }
	│ ɛ 

<> ATTRIBUTES > ATTRIBUTES ATTRIBUTE  				↦return { sym[0].push(sym[1]), sym[0] }
	│ ATTRIBUTE 									↦return { [sym[0]] }
	│ ɛ

<> ATTRIBUTE > ATTRIBUTE_HEAD = ATTRIBUTE_BODY 	 	↦cstr { this.id = sym[0]; this.val = sym[2] }
 	│ ATTRIBUTE_HEAD 								↦cstr { this.id = sym[0]; this.val = true }

<> ATTRIBUTE_HEAD > ' g:id '							↦return { sym[1] }
	│ " g:id "										↦return { sym[1] }
	│ g:id

<> ATTRIBUTE_BODY > " ATTRIBUTE_DATA " 				↦return { sym[1] }
	│ ' ATTRIBUTE_DATA ' 							↦return { sym[1] }
	│ g:id 											
	│ BINDING 									
	│ " BINDING " 									↦return { sym[1] }


<> ATTRIBUTE_DATA > ATTRUBUTE_DATA_VALUE 			↦return { sym[0] + "" }	
	│ ATTRIBUTE_DATA ATTRUBUTE_DATA_VALUE 			↦return { sym[0] + sym[1]}

<> ATTRUBUTE_DATA_VALUE > g:id 
	│ g:sp │ g:any

<> TAGNAME > g:id

<> TEXT_NODE > BODY_STRING 							↦cstr { 
																this.val = sym[0];
																this.parent = null;
															}

<> BODY_STRING > BODY_STRING BODY_SYMBOLS 			↦return { sym[0] + sym[1] }			
	│ BODY_SYMBOLS 									↦return { sym[0] + "" }

<> BODY_SYMBOLS > g:id │ g:any │ g:sp │ g:nl

<> BINDING > CALL_BINDING  							
	│ BASIC_BINDING

<> BASIC_BINDING > \(( ↦{ env.start = lex.off+2 } BINDING_DATA \))   ↦cstr{ this.lex = lex.copy(); this.lex.sl = lex.off-2; this.lex.off = env.start; }

<> CALL_BINDING > \(( ↦{ env.start = lex.off+2 } BINDING_DATA \)( BINDING_DATA \))    ↦cstr {  }

<> BINDING_DATA > BINDING_DATA BINDING_DATA    ↦return { null }   
	│ g:id │ g:sp │ g:nl │ g:sym │ g:op │ g:any  		  

