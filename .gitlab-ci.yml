image: node:latest

stages:
  - build
  - test
  - deploy

# cache:
#   paths:
#     - node_modules/
#     - packages/core/hc_ts_common/build/
#     - packages/core/hc_asytrip/build/
#     - packages/core/hc_bytecode/build/
#     - packages/core/hc_grammar/build/
#     - packages/core/hc_root/build/
#     - packages/core/hc_tools/build/
#     - packages/rt_typescript/build/
#     - packages/**/publish.bounty
#     - packages/**/package.json

# BUILD ----------------------------------------------------------------------

install dependencies:
  stage: build
  script:
    - npm config set registry $PACKAGE_REGISTRY
    - npm install --no-audit

  artifacts:
    expire_in: 2 hours
    paths:
      - node_modules/

build_typescript_packages:
  stage: build

  script:
    - npm install typescript
    - npx tsc -p ./packages/core/hc_ts_common/tsconfig.json || true
    - npx tsc -p ./packages/core/hc_asytrip/tsconfig.json || true
    - npx tsc -p ./packages/core/hc_bytecode/tsconfig.json || true
    - npx tsc -p ./packages/core/hc_grammar/tsconfig.json || true
    - npx tsc -p ./packages/core/hc_root/tsconfig.json || true
    - npx tsc -p ./packages/core/hc_tools/tsconfig.json || true
    - npx tsc -p ./packages/rt_typescript/tsconfig.json || true

  artifacts:
    expire_in: 2 hours
    paths:
      - packages/core/hc_ts_common/build/
      - packages/core/hc_asytrip/build/
      - packages/core/hc_bytecode/build/
      - packages/core/hc_grammar/build/
      - packages/core/hc_root/build/
      - packages/core/hc_tools/build/
      - packages/rt_typescript/build/
  dependencies:
    - install:dependencies

# TEST & VERSION -----------------------------------------------------------

version_ts_modules:
  stage: test
  script:
    - npm run version_ts_packages
  artifacts:
    paths:
      - packages/**/*.bounty
      - packages/**/package.json

  dependencies:
    - install:dependencies
    - build_typescript_packages

# DEPLOY ------------------------------------------------------------------

publish_ts_packages:
  stage: deploy
  script:
    - npm config set registry $PACKAGE_REGISTRY
    - npm run collect_publish_bounties
  dependencies:
    - version_ts_modules
    - build_typescript_packages

deploy_to_gitlab_branch:
  stage: deploy

  before_script:
    - apt-get update -y && apt-get install -yqqf openssh-client git unzip sshpass rsync --fix-missing
    - "which ssh-agent || ( apt-get update -y && apt-get install openssh-client git -y )"
    - eval $(ssh-agent -s)
    - echo "$DEPLOY_KEY" | tr -d '\r' | ssh-add - > /dev/null
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan $GITHUB_REPO >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
    - git config --global user.email "hydrocarbon-authors@null.io"
    - git config --global user.name "Gitlab Runner"

  script:
    - cp $PACKAGE_REGISTRY ~/.ssh/
    - git branch checkout -b temp-staged
    - npm run collect_commit_bounties
    - git remote add releases $GITHUB_REPO
    - git push remote:staged-releases temp-staged

  dependencies:
    - version_ts_modules
    - install:dependencies
    - build_typescript_packages
##
# reference https://docs.gitlab.com/ee/ci/yaml/
