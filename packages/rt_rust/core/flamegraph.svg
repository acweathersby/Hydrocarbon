<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="630" onload="init(evt)" viewBox="0 0 1200 630" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="630" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="613.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="613.00"> </text><svg id="frames" x="10" width="1180" total_samples="11280"><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.04%)</title><rect x="0.0000%" y="549" width="0.0355%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="4"/><text x="0.2500%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (3 samples, 0.03%)</title><rect x="0.0355%" y="549" width="0.0266%" height="15" fill="rgb(217,0,24)" fg:x="4" fg:w="3"/><text x="0.2855%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (4 samples, 0.04%)</title><rect x="0.0621%" y="549" width="0.0355%" height="15" fill="rgb(221,193,54)" fg:x="7" fg:w="4"/><text x="0.3121%" y="559.50"></text></g><g><title>&lt;I as core::iter::traits::collect::IntoIterator&gt;::into_iter (4 samples, 0.04%)</title><rect x="0.1152%" y="533" width="0.0355%" height="15" fill="rgb(248,212,6)" fg:x="13" fg:w="4"/><text x="0.3652%" y="543.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (5 samples, 0.04%)</title><rect x="0.1507%" y="533" width="0.0443%" height="15" fill="rgb(208,68,35)" fg:x="17" fg:w="5"/><text x="0.4007%" y="543.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::convert::From&lt;core::ptr::unique::Unique&lt;T&gt;&gt;&gt;::from (2 samples, 0.02%)</title><rect x="0.2039%" y="533" width="0.0177%" height="15" fill="rgb(232,128,0)" fg:x="23" fg:w="2"/><text x="0.4539%" y="543.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (6 samples, 0.05%)</title><rect x="0.2216%" y="533" width="0.0532%" height="15" fill="rgb(207,160,47)" fg:x="25" fg:w="6"/><text x="0.4716%" y="543.50"></text></g><g><title>alloc::alloc::dealloc (7 samples, 0.06%)</title><rect x="0.2837%" y="533" width="0.0621%" height="15" fill="rgb(228,23,34)" fg:x="32" fg:w="7"/><text x="0.5337%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (5 samples, 0.04%)</title><rect x="0.3546%" y="533" width="0.0443%" height="15" fill="rgb(218,30,26)" fg:x="40" fg:w="5"/><text x="0.6046%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (5 samples, 0.04%)</title><rect x="0.3989%" y="533" width="0.0443%" height="15" fill="rgb(220,122,19)" fg:x="45" fg:w="5"/><text x="0.6489%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (12 samples, 0.11%)</title><rect x="0.4433%" y="533" width="0.1064%" height="15" fill="rgb(250,228,42)" fg:x="50" fg:w="12"/><text x="0.6933%" y="543.50"></text></g><g><title>candlelib_hydrocarbon::recognizer::iterator::StateIterator&lt;T&gt;::get_input_value (5 samples, 0.04%)</title><rect x="0.5496%" y="533" width="0.0443%" height="15" fill="rgb(240,193,28)" fg:x="62" fg:w="5"/><text x="0.7996%" y="543.50"></text></g><g><title>candlelib_hydrocarbon::recognizer::iterator::StateIterator&lt;T&gt;::nextAction (2 samples, 0.02%)</title><rect x="0.5940%" y="533" width="0.0177%" height="15" fill="rgb(216,20,37)" fg:x="67" fg:w="2"/><text x="0.8440%" y="543.50"></text></g><g><title>candlelib_hydrocarbon::recognizer::stack::KernelStack::pop_state (2 samples, 0.02%)</title><rect x="0.6117%" y="533" width="0.0177%" height="15" fill="rgb(206,188,39)" fg:x="69" fg:w="2"/><text x="0.8617%" y="543.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (8 samples, 0.07%)</title><rect x="0.6383%" y="533" width="0.0709%" height="15" fill="rgb(217,207,13)" fg:x="72" fg:w="8"/><text x="0.8883%" y="543.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::cast (7 samples, 0.06%)</title><rect x="0.7270%" y="533" width="0.0621%" height="15" fill="rgb(231,73,38)" fg:x="82" fg:w="7"/><text x="0.9770%" y="543.50"></text></g><g><title>core::ptr::metadata::from_raw_parts (18 samples, 0.16%)</title><rect x="0.7890%" y="533" width="0.1596%" height="15" fill="rgb(225,20,46)" fg:x="89" fg:w="18"/><text x="1.0390%" y="543.50"></text></g><g><title>core::ptr::metadata::from_raw_parts_mut (8 samples, 0.07%)</title><rect x="0.9486%" y="533" width="0.0709%" height="15" fill="rgb(210,31,41)" fg:x="107" fg:w="8"/><text x="1.1986%" y="543.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::guaranteed_eq (2 samples, 0.02%)</title><rect x="1.0284%" y="533" width="0.0177%" height="15" fill="rgb(221,200,47)" fg:x="116" fg:w="2"/><text x="1.2784%" y="543.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::is_null (4 samples, 0.04%)</title><rect x="1.0461%" y="533" width="0.0355%" height="15" fill="rgb(226,26,5)" fg:x="118" fg:w="4"/><text x="1.2961%" y="543.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::cast (2 samples, 0.02%)</title><rect x="1.0816%" y="533" width="0.0177%" height="15" fill="rgb(249,33,26)" fg:x="122" fg:w="2"/><text x="1.3316%" y="543.50"></text></g><g><title>core::ptr::slice_from_raw_parts (6 samples, 0.05%)</title><rect x="1.1170%" y="533" width="0.0532%" height="15" fill="rgb(235,183,28)" fg:x="126" fg:w="6"/><text x="1.3670%" y="543.50"></text></g><g><title>core::ptr::slice_from_raw_parts_mut (10 samples, 0.09%)</title><rect x="1.1702%" y="533" width="0.0887%" height="15" fill="rgb(221,5,38)" fg:x="132" fg:w="10"/><text x="1.4202%" y="543.50"></text></g><g><title>core::ptr::unique::Unique&lt;T&gt;::as_ptr (4 samples, 0.04%)</title><rect x="1.2589%" y="533" width="0.0355%" height="15" fill="rgb(247,18,42)" fg:x="142" fg:w="4"/><text x="1.5089%" y="543.50"></text></g><g><title>[[heap]] (139 samples, 1.23%)</title><rect x="0.1152%" y="549" width="1.2323%" height="15" fill="rgb(241,131,45)" fg:x="13" fg:w="139"/><text x="0.3652%" y="559.50"></text></g><g><title>core::ptr::unique::Unique&lt;T&gt;::cast (6 samples, 0.05%)</title><rect x="1.2943%" y="533" width="0.0532%" height="15" fill="rgb(249,31,29)" fg:x="146" fg:w="6"/><text x="1.5443%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (11 samples, 0.10%)</title><rect x="1.3652%" y="533" width="0.0975%" height="15" fill="rgb(225,111,53)" fg:x="154" fg:w="11"/><text x="1.6152%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (6 samples, 0.05%)</title><rect x="1.4628%" y="533" width="0.0532%" height="15" fill="rgb(238,160,17)" fg:x="165" fg:w="6"/><text x="1.7128%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.04%)</title><rect x="1.5160%" y="533" width="0.0355%" height="15" fill="rgb(214,148,48)" fg:x="171" fg:w="4"/><text x="1.7660%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (14 samples, 0.12%)</title><rect x="1.5514%" y="533" width="0.1241%" height="15" fill="rgb(232,36,49)" fg:x="175" fg:w="14"/><text x="1.8014%" y="543.50"></text></g><g><title>&lt;candlelib_hydrocarbon::recognizer::reader::UTF8StringReader as candlelib_hydrocarbon::recognizer::reader::ByteReader&gt;::END (5 samples, 0.04%)</title><rect x="1.6755%" y="533" width="0.0443%" height="15" fill="rgb(209,103,24)" fg:x="189" fg:w="5"/><text x="1.9255%" y="543.50"></text></g><g><title>&lt;candlelib_hydrocarbon::recognizer::reader::UTF8StringReader as candlelib_hydrocarbon::recognizer::reader::ByteReader&gt;::next (18 samples, 0.16%)</title><rect x="1.7376%" y="533" width="0.1596%" height="15" fill="rgb(229,88,8)" fg:x="196" fg:w="18"/><text x="1.9876%" y="543.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (3 samples, 0.03%)</title><rect x="1.9060%" y="533" width="0.0266%" height="15" fill="rgb(213,181,19)" fg:x="215" fg:w="3"/><text x="2.1560%" y="543.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (3 samples, 0.03%)</title><rect x="1.9326%" y="533" width="0.0266%" height="15" fill="rgb(254,191,54)" fg:x="218" fg:w="3"/><text x="2.1826%" y="543.50"></text></g><g><title>_int_free (2 samples, 0.02%)</title><rect x="1.9770%" y="533" width="0.0177%" height="15" fill="rgb(241,83,37)" fg:x="223" fg:w="2"/><text x="2.2270%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::capacity_from_bytes (2 samples, 0.02%)</title><rect x="1.9947%" y="533" width="0.0177%" height="15" fill="rgb(233,36,39)" fg:x="225" fg:w="2"/><text x="2.2447%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (8 samples, 0.07%)</title><rect x="2.0124%" y="533" width="0.0709%" height="15" fill="rgb(226,3,54)" fg:x="227" fg:w="8"/><text x="2.2624%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (4 samples, 0.04%)</title><rect x="2.0833%" y="533" width="0.0355%" height="15" fill="rgb(245,192,40)" fg:x="235" fg:w="4"/><text x="2.3333%" y="543.50"></text></g><g><title>candlelib_hydrocarbon::recognizer::iterator::StateIterator&lt;T&gt;::get_input_value (16 samples, 0.14%)</title><rect x="2.1277%" y="533" width="0.1418%" height="15" fill="rgb(238,167,29)" fg:x="240" fg:w="16"/><text x="2.3777%" y="543.50"></text></g><g><title>candlelib_hydrocarbon::recognizer::iterator::StateIterator&lt;T&gt;::index_jump (6 samples, 0.05%)</title><rect x="2.2695%" y="533" width="0.0532%" height="15" fill="rgb(232,182,51)" fg:x="256" fg:w="6"/><text x="2.5195%" y="543.50"></text></g><g><title>candlelib_hydrocarbon::recognizer::iterator::StateIterator&lt;T&gt;::new (18 samples, 0.16%)</title><rect x="2.3227%" y="533" width="0.1596%" height="15" fill="rgb(231,60,39)" fg:x="262" fg:w="18"/><text x="2.5727%" y="543.50"></text></g><g><title>candlelib_hydrocarbon::recognizer::iterator::StateIterator&lt;T&gt;::nextAction (2 samples, 0.02%)</title><rect x="2.4823%" y="533" width="0.0177%" height="15" fill="rgb(208,69,12)" fg:x="280" fg:w="2"/><text x="2.7323%" y="543.50"></text></g><g><title>candlelib_hydrocarbon::recognizer::iterator::StateIterator&lt;T&gt;::pass (27 samples, 0.24%)</title><rect x="2.5000%" y="533" width="0.2394%" height="15" fill="rgb(235,93,37)" fg:x="282" fg:w="27"/><text x="2.7500%" y="543.50"></text></g><g><title>candlelib_hydrocarbon::recognizer::iterator::StateIterator&lt;T&gt;::pushAction (5 samples, 0.04%)</title><rect x="2.7394%" y="533" width="0.0443%" height="15" fill="rgb(213,116,39)" fg:x="309" fg:w="5"/><text x="2.9894%" y="543.50"></text></g><g><title>candlelib_hydrocarbon::recognizer::iterator::StateIterator&lt;T&gt;::scanner (12 samples, 0.11%)</title><rect x="2.7837%" y="533" width="0.1064%" height="15" fill="rgb(222,207,29)" fg:x="314" fg:w="12"/><text x="3.0337%" y="543.50"></text></g><g><title>candlelib_hydrocarbon::recognizer::iterator::StateIterator&lt;T&gt;::set_production (14 samples, 0.12%)</title><rect x="2.8901%" y="533" width="0.1241%" height="15" fill="rgb(206,96,30)" fg:x="326" fg:w="14"/><text x="3.1401%" y="543.50"></text></g><g><title>candlelib_hydrocarbon::recognizer::reader::ByteReader::class (25 samples, 0.22%)</title><rect x="3.0142%" y="533" width="0.2216%" height="15" fill="rgb(218,138,4)" fg:x="340" fg:w="25"/><text x="3.2642%" y="543.50"></text></g><g><title>candlelib_hydrocarbon::recognizer::reader::ByteReader::codepoint_byte_length (12 samples, 0.11%)</title><rect x="3.2358%" y="533" width="0.1064%" height="15" fill="rgb(250,191,14)" fg:x="365" fg:w="12"/><text x="3.4858%" y="543.50"></text></g><g><title>candlelib_hydrocarbon::recognizer::reader::ByteReader::codepoint_length (15 samples, 0.13%)</title><rect x="3.3422%" y="533" width="0.1330%" height="15" fill="rgb(239,60,40)" fg:x="377" fg:w="15"/><text x="3.5922%" y="543.50"></text></g><g><title>candlelib_hydrocarbon::recognizer::stack::KernelStack::pop_state (22 samples, 0.20%)</title><rect x="3.4752%" y="533" width="0.1950%" height="15" fill="rgb(206,27,48)" fg:x="392" fg:w="22"/><text x="3.7252%" y="543.50"></text></g><g><title>candlelib_hydrocarbon::recognizer::stack::KernelStack::read_state (41 samples, 0.36%)</title><rect x="3.6702%" y="533" width="0.3635%" height="15" fill="rgb(225,35,8)" fg:x="414" fg:w="41"/><text x="3.9202%" y="543.50"></text></g><g><title>candlelib_hydrocarbon::recognizer::utf8::getTypeAt (4 samples, 0.04%)</title><rect x="4.0426%" y="533" width="0.0355%" height="15" fill="rgb(250,213,24)" fg:x="456" fg:w="4"/><text x="4.2926%" y="543.50"></text></g><g><title>candlelib_hydrocarbon::recognizer::utf8::get_token_length_from_code_point (3 samples, 0.03%)</title><rect x="4.0780%" y="533" width="0.0266%" height="15" fill="rgb(247,123,22)" fg:x="460" fg:w="3"/><text x="4.3280%" y="543.50"></text></g><g><title>core::alloc::layout::Layout::align (6 samples, 0.05%)</title><rect x="4.1046%" y="533" width="0.0532%" height="15" fill="rgb(231,138,38)" fg:x="463" fg:w="6"/><text x="4.3546%" y="543.50"></text></g><g><title>core::alloc::layout::Layout::from_size_align_unchecked (2 samples, 0.02%)</title><rect x="4.1578%" y="533" width="0.0177%" height="15" fill="rgb(231,145,46)" fg:x="469" fg:w="2"/><text x="4.4078%" y="543.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (20 samples, 0.18%)</title><rect x="4.2021%" y="533" width="0.1773%" height="15" fill="rgb(251,118,11)" fg:x="474" fg:w="20"/><text x="4.4521%" y="543.50"></text></g><g><title>core::mem::replace (4 samples, 0.04%)</title><rect x="4.3794%" y="533" width="0.0355%" height="15" fill="rgb(217,147,25)" fg:x="494" fg:w="4"/><text x="4.6294%" y="543.50"></text></g><g><title>core::num::nonzero::NonZeroUsize::get (4 samples, 0.04%)</title><rect x="4.4149%" y="533" width="0.0355%" height="15" fill="rgb(247,81,37)" fg:x="498" fg:w="4"/><text x="4.6649%" y="543.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::guaranteed_eq (4 samples, 0.04%)</title><rect x="4.4770%" y="533" width="0.0355%" height="15" fill="rgb(209,12,38)" fg:x="505" fg:w="4"/><text x="4.7270%" y="543.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::is_null (4 samples, 0.04%)</title><rect x="4.5124%" y="533" width="0.0355%" height="15" fill="rgb(227,1,9)" fg:x="509" fg:w="4"/><text x="4.7624%" y="543.50"></text></g><g><title>core::ptr::read (3 samples, 0.03%)</title><rect x="4.5567%" y="533" width="0.0266%" height="15" fill="rgb(248,47,43)" fg:x="514" fg:w="3"/><text x="4.8067%" y="543.50"></text></g><g><title>[[stack]] (369 samples, 3.27%)</title><rect x="1.3475%" y="549" width="3.2713%" height="15" fill="rgb(221,10,30)" fg:x="152" fg:w="369"/><text x="1.5975%" y="559.50">[[s..</text></g><g><title>core::ptr::write (3 samples, 0.03%)</title><rect x="4.5922%" y="533" width="0.0266%" height="15" fill="rgb(210,229,1)" fg:x="518" fg:w="3"/><text x="4.8422%" y="543.50"></text></g><g><title>[libc-2.31.so] (2 samples, 0.02%)</title><rect x="4.6188%" y="549" width="0.0177%" height="15" fill="rgb(222,148,37)" fg:x="521" fg:w="2"/><text x="4.8688%" y="559.50"></text></g><g><title>__memmove_avx_unaligned_erms (2 samples, 0.02%)</title><rect x="4.6188%" y="533" width="0.0177%" height="15" fill="rgb(234,67,33)" fg:x="521" fg:w="2"/><text x="4.8688%" y="543.50"></text></g><g><title>&lt;I as core::iter::traits::collect::IntoIterator&gt;::into_iter (18 samples, 0.16%)</title><rect x="4.6365%" y="533" width="0.1596%" height="15" fill="rgb(247,98,35)" fg:x="523" fg:w="18"/><text x="4.8865%" y="543.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 0.02%)</title><rect x="4.7961%" y="533" width="0.0177%" height="15" fill="rgb(247,138,52)" fg:x="541" fg:w="2"/><text x="5.0461%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (5 samples, 0.04%)</title><rect x="4.8227%" y="533" width="0.0443%" height="15" fill="rgb(213,79,30)" fg:x="544" fg:w="5"/><text x="5.0727%" y="543.50"></text></g><g><title>&lt;candlelib_hydrocarbon::recognizer::reader::UTF8StringReader as candlelib_hydrocarbon::recognizer::reader::ByteReader&gt;::END (19 samples, 0.17%)</title><rect x="4.8670%" y="533" width="0.1684%" height="15" fill="rgb(246,177,23)" fg:x="549" fg:w="19"/><text x="5.1170%" y="543.50"></text></g><g><title>&lt;candlelib_hydrocarbon::recognizer::reader::UTF8StringReader as candlelib_hydrocarbon::recognizer::reader::ByteReader&gt;::clone (2 samples, 0.02%)</title><rect x="5.0355%" y="533" width="0.0177%" height="15" fill="rgb(230,62,27)" fg:x="568" fg:w="2"/><text x="5.2855%" y="543.50"></text></g><g><title>&lt;candlelib_hydrocarbon::recognizer::reader::UTF8StringReader as candlelib_hydrocarbon::recognizer::reader::ByteReader&gt;::next (16 samples, 0.14%)</title><rect x="5.0621%" y="533" width="0.1418%" height="15" fill="rgb(216,154,8)" fg:x="571" fg:w="16"/><text x="5.3121%" y="543.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (106 samples, 0.94%)</title><rect x="5.2039%" y="533" width="0.9397%" height="15" fill="rgb(244,35,45)" fg:x="587" fg:w="106"/><text x="5.4539%" y="543.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (4 samples, 0.04%)</title><rect x="6.1436%" y="533" width="0.0355%" height="15" fill="rgb(251,115,12)" fg:x="693" fg:w="4"/><text x="6.3936%" y="543.50"></text></g><g><title>&lt;i32 as core::iter::range::Step&gt;::forward_unchecked (2 samples, 0.02%)</title><rect x="6.1791%" y="533" width="0.0177%" height="15" fill="rgb(240,54,50)" fg:x="697" fg:w="2"/><text x="6.4291%" y="543.50"></text></g><g><title>&lt;u32 as core::iter::range::Step&gt;::forward_unchecked (6 samples, 0.05%)</title><rect x="6.1968%" y="533" width="0.0532%" height="15" fill="rgb(233,84,52)" fg:x="699" fg:w="6"/><text x="6.4468%" y="543.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (5 samples, 0.04%)</title><rect x="6.2500%" y="533" width="0.0443%" height="15" fill="rgb(207,117,47)" fg:x="705" fg:w="5"/><text x="6.5000%" y="543.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (3 samples, 0.03%)</title><rect x="6.3121%" y="533" width="0.0266%" height="15" fill="rgb(249,43,39)" fg:x="712" fg:w="3"/><text x="6.5621%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (9 samples, 0.08%)</title><rect x="6.3475%" y="533" width="0.0798%" height="15" fill="rgb(209,38,44)" fg:x="716" fg:w="9"/><text x="6.5975%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (6 samples, 0.05%)</title><rect x="6.4273%" y="533" width="0.0532%" height="15" fill="rgb(236,212,23)" fg:x="725" fg:w="6"/><text x="6.6773%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.02%)</title><rect x="6.4805%" y="533" width="0.0177%" height="15" fill="rgb(242,79,21)" fg:x="731" fg:w="2"/><text x="6.7305%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (8 samples, 0.07%)</title><rect x="6.5071%" y="533" width="0.0709%" height="15" fill="rgb(211,96,35)" fg:x="734" fg:w="8"/><text x="6.7571%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (4 samples, 0.04%)</title><rect x="6.5780%" y="533" width="0.0355%" height="15" fill="rgb(253,215,40)" fg:x="742" fg:w="4"/><text x="6.8280%" y="543.50"></text></g><g><title>candlelib_hydrocarbon::completer::completer::complete (36 samples, 0.32%)</title><rect x="6.6135%" y="533" width="0.3191%" height="15" fill="rgb(211,81,21)" fg:x="746" fg:w="36"/><text x="6.8635%" y="543.50"></text></g><g><title>candlelib_hydrocarbon::completer::token::Token::new (8 samples, 0.07%)</title><rect x="6.9326%" y="533" width="0.0709%" height="15" fill="rgb(208,190,38)" fg:x="782" fg:w="8"/><text x="7.1826%" y="543.50"></text></g><g><title>candlelib_hydrocarbon::completer::token::Token::token_from_range (4 samples, 0.04%)</title><rect x="7.0035%" y="533" width="0.0355%" height="15" fill="rgb(235,213,38)" fg:x="790" fg:w="4"/><text x="7.2535%" y="543.50"></text></g><g><title>candlelib_hydrocarbon::recognizer::iterator::StateIterator&lt;T&gt;::consume (53 samples, 0.47%)</title><rect x="7.0479%" y="533" width="0.4699%" height="15" fill="rgb(237,122,38)" fg:x="795" fg:w="53"/><text x="7.2979%" y="543.50"></text></g><g><title>candlelib_hydrocarbon::recognizer::iterator::StateIterator&lt;T&gt;::emitReduce (9 samples, 0.08%)</title><rect x="7.5177%" y="533" width="0.0798%" height="15" fill="rgb(244,218,35)" fg:x="848" fg:w="9"/><text x="7.7677%" y="543.50"></text></g><g><title>candlelib_hydrocarbon::recognizer::iterator::StateIterator&lt;T&gt;::get_input_value (32 samples, 0.28%)</title><rect x="7.5975%" y="533" width="0.2837%" height="15" fill="rgb(240,68,47)" fg:x="857" fg:w="32"/><text x="7.8475%" y="543.50"></text></g><g><title>candlelib_hydrocarbon::recognizer::iterator::StateIterator&lt;T&gt;::goto (22 samples, 0.20%)</title><rect x="7.8812%" y="533" width="0.1950%" height="15" fill="rgb(210,16,53)" fg:x="889" fg:w="22"/><text x="8.1312%" y="543.50"></text></g><g><title>candlelib_hydrocarbon::recognizer::iterator::StateIterator&lt;T&gt;::hash_jump (29 samples, 0.26%)</title><rect x="8.0762%" y="533" width="0.2571%" height="15" fill="rgb(235,124,12)" fg:x="911" fg:w="29"/><text x="8.3262%" y="543.50"></text></g><g><title>candlelib_hydrocarbon::recognizer::iterator::StateIterator&lt;T&gt;::instruction_executor (25 samples, 0.22%)</title><rect x="8.3333%" y="533" width="0.2216%" height="15" fill="rgb(224,169,11)" fg:x="940" fg:w="25"/><text x="8.5833%" y="543.50"></text></g><g><title>candlelib_hydrocarbon::recognizer::iterator::StateIterator&lt;T&gt;::new (7 samples, 0.06%)</title><rect x="8.5550%" y="533" width="0.0621%" height="15" fill="rgb(250,166,2)" fg:x="965" fg:w="7"/><text x="8.8050%" y="543.50"></text></g><g><title>candlelib_hydrocarbon::recognizer::iterator::StateIterator&lt;T&gt;::nextAction (66 samples, 0.59%)</title><rect x="8.6170%" y="533" width="0.5851%" height="15" fill="rgb(242,216,29)" fg:x="972" fg:w="66"/><text x="8.8670%" y="543.50"></text></g><g><title>candlelib_hydrocarbon::recognizer::iterator::StateIterator&lt;T&gt;::pushAction (12 samples, 0.11%)</title><rect x="9.2021%" y="533" width="0.1064%" height="15" fill="rgb(230,116,27)" fg:x="1038" fg:w="12"/><text x="9.4521%" y="543.50"></text></g><g><title>candlelib_hydrocarbon::recognizer::iterator::StateIterator&lt;T&gt;::reduce (5 samples, 0.04%)</title><rect x="9.3085%" y="533" width="0.0443%" height="15" fill="rgb(228,99,48)" fg:x="1050" fg:w="5"/><text x="9.5585%" y="543.50"></text></g><g><title>candlelib_hydrocarbon::recognizer::iterator::StateIterator&lt;T&gt;::set_production (34 samples, 0.30%)</title><rect x="9.3528%" y="533" width="0.3014%" height="15" fill="rgb(253,11,6)" fg:x="1055" fg:w="34"/><text x="9.6028%" y="543.50"></text></g><g><title>candlelib_hydrocarbon::recognizer::iterator::StateIterator&lt;T&gt;::set_token (18 samples, 0.16%)</title><rect x="9.6543%" y="533" width="0.1596%" height="15" fill="rgb(247,143,39)" fg:x="1089" fg:w="18"/><text x="9.9043%" y="543.50"></text></g><g><title>candlelib_hydrocarbon::recognizer::reader::ByteReader::class (12 samples, 0.11%)</title><rect x="9.8138%" y="533" width="0.1064%" height="15" fill="rgb(236,97,10)" fg:x="1107" fg:w="12"/><text x="10.0638%" y="543.50"></text></g><g><title>candlelib_hydrocarbon::recognizer::stack::KernelStack::new (15 samples, 0.13%)</title><rect x="9.9291%" y="533" width="0.1330%" height="15" fill="rgb(233,208,19)" fg:x="1120" fg:w="15"/><text x="10.1791%" y="543.50"></text></g><g><title>candlelib_hydrocarbon::recognizer::stack::KernelStack::pop_state (14 samples, 0.12%)</title><rect x="10.0621%" y="533" width="0.1241%" height="15" fill="rgb(216,164,2)" fg:x="1135" fg:w="14"/><text x="10.3121%" y="543.50"></text></g><g><title>candlelib_hydrocarbon::recognizer::stack::KernelStack::push_state (22 samples, 0.20%)</title><rect x="10.1862%" y="533" width="0.1950%" height="15" fill="rgb(220,129,5)" fg:x="1149" fg:w="22"/><text x="10.4362%" y="543.50"></text></g><g><title>candlelib_hydrocarbon::recognizer::stack::KernelStack::read_state (5 samples, 0.04%)</title><rect x="10.3812%" y="533" width="0.0443%" height="15" fill="rgb(242,17,10)" fg:x="1171" fg:w="5"/><text x="10.6312%" y="543.50"></text></g><g><title>candlelib_hydrocarbon::recognizer::stack::KernelStack::reset (10 samples, 0.09%)</title><rect x="10.4255%" y="533" width="0.0887%" height="15" fill="rgb(242,107,0)" fg:x="1176" fg:w="10"/><text x="10.6755%" y="543.50"></text></g><g><title>candlelib_hydrocarbon::recognizer::utf8::getTypeAt (3 samples, 0.03%)</title><rect x="10.5142%" y="533" width="0.0266%" height="15" fill="rgb(251,28,31)" fg:x="1186" fg:w="3"/><text x="10.7642%" y="543.50"></text></g><g><title>candlelib_hydrocarbon::recognizer::utf8::get_token_length_from_code_point (14 samples, 0.12%)</title><rect x="10.5408%" y="533" width="0.1241%" height="15" fill="rgb(233,223,10)" fg:x="1189" fg:w="14"/><text x="10.7908%" y="543.50"></text></g><g><title>candlelib_hydrocarbon::recognizer::utf8::get_utf8_byte_length_from_code_point (7 samples, 0.06%)</title><rect x="10.6649%" y="533" width="0.0621%" height="15" fill="rgb(215,21,27)" fg:x="1203" fg:w="7"/><text x="10.9149%" y="543.50"></text></g><g><title>candlelib_hydrocarbon::recognizer::utf8::get_utf8_code_point_from (3 samples, 0.03%)</title><rect x="10.7270%" y="533" width="0.0266%" height="15" fill="rgb(232,23,21)" fg:x="1210" fg:w="3"/><text x="10.9770%" y="543.50"></text></g><g><title>core::alloc::layout::Layout::array (2 samples, 0.02%)</title><rect x="10.7535%" y="533" width="0.0177%" height="15" fill="rgb(244,5,23)" fg:x="1213" fg:w="2"/><text x="11.0035%" y="543.50"></text></g><g><title>core::alloc::layout::Layout::from_size_align_unchecked (2 samples, 0.02%)</title><rect x="10.7713%" y="533" width="0.0177%" height="15" fill="rgb(226,81,46)" fg:x="1215" fg:w="2"/><text x="11.0213%" y="543.50"></text></g><g><title>core::alloc::layout::Layout::pad_to_align (2 samples, 0.02%)</title><rect x="10.7890%" y="533" width="0.0177%" height="15" fill="rgb(247,70,30)" fg:x="1217" fg:w="2"/><text x="11.0390%" y="543.50"></text></g><g><title>core::alloc::layout::Layout::repeat (5 samples, 0.04%)</title><rect x="10.8067%" y="533" width="0.0443%" height="15" fill="rgb(212,68,19)" fg:x="1219" fg:w="5"/><text x="11.0567%" y="543.50"></text></g><g><title>core::alloc::layout::Layout::size (5 samples, 0.04%)</title><rect x="10.8511%" y="533" width="0.0443%" height="15" fill="rgb(240,187,13)" fg:x="1224" fg:w="5"/><text x="11.1011%" y="543.50"></text></g><g><title>core::clone::impls::&lt;impl core::clone::Clone for u32&gt;::clone (6 samples, 0.05%)</title><rect x="10.8954%" y="533" width="0.0532%" height="15" fill="rgb(223,113,26)" fg:x="1229" fg:w="6"/><text x="11.1454%" y="543.50"></text></g><g><title>core::cmp::Ord::max (2 samples, 0.02%)</title><rect x="10.9486%" y="533" width="0.0177%" height="15" fill="rgb(206,192,2)" fg:x="1235" fg:w="2"/><text x="11.1986%" y="543.50"></text></g><g><title>core::cmp::Ord::min (2 samples, 0.02%)</title><rect x="10.9663%" y="533" width="0.0177%" height="15" fill="rgb(241,108,4)" fg:x="1237" fg:w="2"/><text x="11.2163%" y="543.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for i32&gt;::lt (35 samples, 0.31%)</title><rect x="10.9929%" y="533" width="0.3103%" height="15" fill="rgb(247,173,49)" fg:x="1240" fg:w="35"/><text x="11.2429%" y="543.50"></text></g><g><title>core::cmp::max (4 samples, 0.04%)</title><rect x="11.3032%" y="533" width="0.0355%" height="15" fill="rgb(224,114,35)" fg:x="1275" fg:w="4"/><text x="11.5532%" y="543.50"></text></g><g><title>core::cmp::max_by (2 samples, 0.02%)</title><rect x="11.3387%" y="533" width="0.0177%" height="15" fill="rgb(245,159,27)" fg:x="1279" fg:w="2"/><text x="11.5887%" y="543.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (15 samples, 0.13%)</title><rect x="11.3564%" y="533" width="0.1330%" height="15" fill="rgb(245,172,44)" fg:x="1281" fg:w="15"/><text x="11.6064%" y="543.50"></text></g><g><title>core::mem::replace (46 samples, 0.41%)</title><rect x="11.4894%" y="533" width="0.4078%" height="15" fill="rgb(236,23,11)" fg:x="1296" fg:w="46"/><text x="11.7394%" y="543.50"></text></g><g><title>core::num::nonzero::NonZeroUsize::get (4 samples, 0.04%)</title><rect x="11.9060%" y="533" width="0.0355%" height="15" fill="rgb(205,117,38)" fg:x="1343" fg:w="4"/><text x="12.1560%" y="543.50"></text></g><g><title>core::ptr::metadata::from_raw_parts (6 samples, 0.05%)</title><rect x="11.9592%" y="533" width="0.0532%" height="15" fill="rgb(237,72,25)" fg:x="1349" fg:w="6"/><text x="12.2092%" y="543.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::is_null (4 samples, 0.04%)</title><rect x="12.0124%" y="533" width="0.0355%" height="15" fill="rgb(244,70,9)" fg:x="1355" fg:w="4"/><text x="12.2624%" y="543.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ptr (2 samples, 0.02%)</title><rect x="12.0479%" y="533" width="0.0177%" height="15" fill="rgb(217,125,39)" fg:x="1359" fg:w="2"/><text x="12.2979%" y="543.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::cast (2 samples, 0.02%)</title><rect x="12.0656%" y="533" width="0.0177%" height="15" fill="rgb(235,36,10)" fg:x="1361" fg:w="2"/><text x="12.3156%" y="543.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;[T]&gt;::len (2 samples, 0.02%)</title><rect x="12.0833%" y="533" width="0.0177%" height="15" fill="rgb(251,123,47)" fg:x="1363" fg:w="2"/><text x="12.3333%" y="543.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut [T]&gt;::len (2 samples, 0.02%)</title><rect x="12.0833%" y="517" width="0.0177%" height="15" fill="rgb(221,13,13)" fg:x="1363" fg:w="2"/><text x="12.3333%" y="527.50"></text></g><g><title>core::ptr::read (16 samples, 0.14%)</title><rect x="12.1099%" y="533" width="0.1418%" height="15" fill="rgb(238,131,9)" fg:x="1366" fg:w="16"/><text x="12.3599%" y="543.50"></text></g><g><title>core::ptr::unique::Unique&lt;T&gt;::as_ptr (6 samples, 0.05%)</title><rect x="12.2606%" y="533" width="0.0532%" height="15" fill="rgb(211,50,8)" fg:x="1383" fg:w="6"/><text x="12.5106%" y="543.50"></text></g><g><title>core::ptr::write (8 samples, 0.07%)</title><rect x="12.3227%" y="533" width="0.0709%" height="15" fill="rgb(245,182,24)" fg:x="1390" fg:w="8"/><text x="12.5727%" y="543.50"></text></g><g><title>[unknown] (876 samples, 7.77%)</title><rect x="4.6365%" y="549" width="7.7660%" height="15" fill="rgb(242,14,37)" fg:x="523" fg:w="876"/><text x="4.8865%" y="559.50">[unknown]</text></g><g><title>__GI___libc_malloc (2 samples, 0.02%)</title><rect x="12.4025%" y="549" width="0.0177%" height="15" fill="rgb(246,228,12)" fg:x="1399" fg:w="2"/><text x="12.6525%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (2 samples, 0.02%)</title><rect x="15.3014%" y="133" width="0.0177%" height="15" fill="rgb(213,55,15)" fg:x="1726" fg:w="2"/><text x="15.5514%" y="143.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (6 samples, 0.05%)</title><rect x="15.2837%" y="149" width="0.0532%" height="15" fill="rgb(209,9,3)" fg:x="1724" fg:w="6"/><text x="15.5337%" y="159.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::is_null (2 samples, 0.02%)</title><rect x="15.3191%" y="133" width="0.0177%" height="15" fill="rgb(230,59,30)" fg:x="1728" fg:w="2"/><text x="15.5691%" y="143.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (4 samples, 0.04%)</title><rect x="15.5762%" y="69" width="0.0355%" height="15" fill="rgb(209,121,21)" fg:x="1757" fg:w="4"/><text x="15.8262%" y="79.50"></text></g><g><title>__GI___libc_malloc (5 samples, 0.04%)</title><rect x="15.6206%" y="53" width="0.0443%" height="15" fill="rgb(220,109,13)" fg:x="1762" fg:w="5"/><text x="15.8706%" y="63.50"></text></g><g><title>tcache_get (3 samples, 0.03%)</title><rect x="15.6383%" y="37" width="0.0266%" height="15" fill="rgb(232,18,1)" fg:x="1764" fg:w="3"/><text x="15.8883%" y="47.50"></text></g><g><title>alloc::alloc::alloc (7 samples, 0.06%)</title><rect x="15.6117%" y="69" width="0.0621%" height="15" fill="rgb(215,41,42)" fg:x="1761" fg:w="7"/><text x="15.8617%" y="79.50"></text></g><g><title>core::option::Option&lt;T&gt;::ok_or (4 samples, 0.04%)</title><rect x="15.6738%" y="69" width="0.0355%" height="15" fill="rgb(224,123,36)" fg:x="1768" fg:w="4"/><text x="15.9238%" y="79.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::is_null (5 samples, 0.04%)</title><rect x="15.7535%" y="53" width="0.0443%" height="15" fill="rgb(240,125,3)" fg:x="1777" fg:w="5"/><text x="16.0035%" y="63.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::guaranteed_eq (2 samples, 0.02%)</title><rect x="15.7801%" y="37" width="0.0177%" height="15" fill="rgb(205,98,50)" fg:x="1780" fg:w="2"/><text x="16.0301%" y="47.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new (11 samples, 0.10%)</title><rect x="15.7092%" y="69" width="0.0975%" height="15" fill="rgb(205,185,37)" fg:x="1772" fg:w="11"/><text x="15.9592%" y="79.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (40 samples, 0.35%)</title><rect x="15.5230%" y="101" width="0.3546%" height="15" fill="rgb(238,207,15)" fg:x="1751" fg:w="40"/><text x="15.7730%" y="111.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (38 samples, 0.34%)</title><rect x="15.5408%" y="85" width="0.3369%" height="15" fill="rgb(213,199,42)" fg:x="1753" fg:w="38"/><text x="15.7908%" y="95.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;[T]&gt;::slice_from_raw_parts (8 samples, 0.07%)</title><rect x="15.8067%" y="69" width="0.0709%" height="15" fill="rgb(235,201,11)" fg:x="1783" fg:w="8"/><text x="16.0567%" y="79.50"></text></g><g><title>core::ptr::slice_from_raw_parts_mut (4 samples, 0.04%)</title><rect x="15.8422%" y="53" width="0.0355%" height="15" fill="rgb(207,46,11)" fg:x="1787" fg:w="4"/><text x="16.0922%" y="63.50"></text></g><g><title>core::ptr::metadata::from_raw_parts_mut (3 samples, 0.03%)</title><rect x="15.8511%" y="37" width="0.0266%" height="15" fill="rgb(241,35,35)" fg:x="1788" fg:w="3"/><text x="16.1011%" y="47.50"></text></g><g><title>alloc::raw_vec::alloc_guard (3 samples, 0.03%)</title><rect x="15.8865%" y="101" width="0.0266%" height="15" fill="rgb(243,32,47)" fg:x="1792" fg:w="3"/><text x="16.1365%" y="111.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (6 samples, 0.05%)</title><rect x="16.0018%" y="85" width="0.0532%" height="15" fill="rgb(247,202,23)" fg:x="1805" fg:w="6"/><text x="16.2518%" y="95.50"></text></g><g><title>core::alloc::layout::Layout::new (5 samples, 0.04%)</title><rect x="16.0550%" y="85" width="0.0443%" height="15" fill="rgb(219,102,11)" fg:x="1811" fg:w="5"/><text x="16.3050%" y="95.50"></text></g><g><title>core::alloc::layout::Layout::from_size_align_unchecked (3 samples, 0.03%)</title><rect x="16.0727%" y="69" width="0.0266%" height="15" fill="rgb(243,110,44)" fg:x="1813" fg:w="3"/><text x="16.3227%" y="79.50"></text></g><g><title>core::alloc::layout::Layout::align (3 samples, 0.03%)</title><rect x="16.2057%" y="69" width="0.0266%" height="15" fill="rgb(222,74,54)" fg:x="1828" fg:w="3"/><text x="16.4557%" y="79.50"></text></g><g><title>core::alloc::layout::Layout::from_size_align (7 samples, 0.06%)</title><rect x="16.2323%" y="69" width="0.0621%" height="15" fill="rgb(216,99,12)" fg:x="1831" fg:w="7"/><text x="16.4823%" y="79.50"></text></g><g><title>core::num::&lt;impl usize&gt;::is_power_of_two (5 samples, 0.04%)</title><rect x="16.2500%" y="53" width="0.0443%" height="15" fill="rgb(226,22,26)" fg:x="1833" fg:w="5"/><text x="16.5000%" y="63.50"></text></g><g><title>core::num::&lt;impl usize&gt;::count_ones (4 samples, 0.04%)</title><rect x="16.2589%" y="37" width="0.0355%" height="15" fill="rgb(217,163,10)" fg:x="1834" fg:w="4"/><text x="16.5089%" y="47.50"></text></g><g><title>core::alloc::layout::Layout::padding_needed_for (8 samples, 0.07%)</title><rect x="16.2943%" y="69" width="0.0709%" height="15" fill="rgb(213,25,53)" fg:x="1838" fg:w="8"/><text x="16.5443%" y="79.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_add (2 samples, 0.02%)</title><rect x="16.3475%" y="53" width="0.0177%" height="15" fill="rgb(252,105,26)" fg:x="1844" fg:w="2"/><text x="16.5975%" y="63.50"></text></g><g><title>core::alloc::layout::Layout::pad_to_align (31 samples, 0.27%)</title><rect x="16.0993%" y="85" width="0.2748%" height="15" fill="rgb(220,39,43)" fg:x="1816" fg:w="31"/><text x="16.3493%" y="95.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (3 samples, 0.03%)</title><rect x="16.4716%" y="69" width="0.0266%" height="15" fill="rgb(229,68,48)" fg:x="1858" fg:w="3"/><text x="16.7216%" y="79.50"></text></g><g><title>core::alloc::layout::Layout::from_size_align_unchecked (3 samples, 0.03%)</title><rect x="16.5071%" y="69" width="0.0266%" height="15" fill="rgb(252,8,32)" fg:x="1862" fg:w="3"/><text x="16.7571%" y="79.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_add (2 samples, 0.02%)</title><rect x="16.5603%" y="53" width="0.0177%" height="15" fill="rgb(223,20,43)" fg:x="1868" fg:w="2"/><text x="16.8103%" y="63.50"></text></g><g><title>core::alloc::layout::Layout::padding_needed_for (7 samples, 0.06%)</title><rect x="16.5337%" y="69" width="0.0621%" height="15" fill="rgb(229,81,49)" fg:x="1865" fg:w="7"/><text x="16.7837%" y="79.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (2 samples, 0.02%)</title><rect x="16.5780%" y="53" width="0.0177%" height="15" fill="rgb(236,28,36)" fg:x="1870" fg:w="2"/><text x="16.8280%" y="63.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_mul (6 samples, 0.05%)</title><rect x="16.5957%" y="69" width="0.0532%" height="15" fill="rgb(249,185,26)" fg:x="1872" fg:w="6"/><text x="16.8457%" y="79.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_mul (3 samples, 0.03%)</title><rect x="16.6223%" y="53" width="0.0266%" height="15" fill="rgb(249,174,33)" fg:x="1875" fg:w="3"/><text x="16.8723%" y="63.50"></text></g><g><title>core::alloc::layout::Layout::array (87 samples, 0.77%)</title><rect x="15.9131%" y="101" width="0.7713%" height="15" fill="rgb(233,201,37)" fg:x="1795" fg:w="87"/><text x="16.1631%" y="111.50"></text></g><g><title>core::alloc::layout::Layout::repeat (35 samples, 0.31%)</title><rect x="16.3741%" y="85" width="0.3103%" height="15" fill="rgb(221,78,26)" fg:x="1847" fg:w="35"/><text x="16.6241%" y="95.50"></text></g><g><title>core::option::Option&lt;T&gt;::ok_or (4 samples, 0.04%)</title><rect x="16.6489%" y="69" width="0.0355%" height="15" fill="rgb(250,127,30)" fg:x="1878" fg:w="4"/><text x="16.8989%" y="79.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::cast (4 samples, 0.04%)</title><rect x="16.6933%" y="101" width="0.0355%" height="15" fill="rgb(230,49,44)" fg:x="1883" fg:w="4"/><text x="16.9433%" y="111.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;[T]&gt;::len (4 samples, 0.04%)</title><rect x="16.7287%" y="101" width="0.0355%" height="15" fill="rgb(229,67,23)" fg:x="1887" fg:w="4"/><text x="16.9787%" y="111.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (162 samples, 1.44%)</title><rect x="15.3369%" y="149" width="1.4362%" height="15" fill="rgb(249,83,47)" fg:x="1730" fg:w="162"/><text x="15.5869%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (159 samples, 1.41%)</title><rect x="15.3635%" y="133" width="1.4096%" height="15" fill="rgb(215,43,3)" fg:x="1733" fg:w="159"/><text x="15.6135%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (159 samples, 1.41%)</title><rect x="15.3635%" y="117" width="1.4096%" height="15" fill="rgb(238,154,13)" fg:x="1733" fg:w="159"/><text x="15.6135%" y="127.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (181 samples, 1.60%)</title><rect x="15.1862%" y="229" width="1.6046%" height="15" fill="rgb(219,56,2)" fg:x="1713" fg:w="181"/><text x="15.4362%" y="239.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (180 samples, 1.60%)</title><rect x="15.1950%" y="213" width="1.5957%" height="15" fill="rgb(233,0,4)" fg:x="1714" fg:w="180"/><text x="15.4450%" y="223.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (179 samples, 1.59%)</title><rect x="15.2039%" y="197" width="1.5869%" height="15" fill="rgb(235,30,7)" fg:x="1715" fg:w="179"/><text x="15.4539%" y="207.50"></text></g><g><title>alloc::slice::hack::to_vec (179 samples, 1.59%)</title><rect x="15.2039%" y="181" width="1.5869%" height="15" fill="rgb(250,79,13)" fg:x="1715" fg:w="179"/><text x="15.4539%" y="191.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (177 samples, 1.57%)</title><rect x="15.2216%" y="165" width="1.5691%" height="15" fill="rgb(211,146,34)" fg:x="1717" fg:w="177"/><text x="15.4716%" y="175.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::len (2 samples, 0.02%)</title><rect x="16.7730%" y="149" width="0.0177%" height="15" fill="rgb(228,22,38)" fg:x="1892" fg:w="2"/><text x="17.0230%" y="159.50"></text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;&amp;str&gt;&gt;::from (185 samples, 1.64%)</title><rect x="15.1596%" y="261" width="1.6401%" height="15" fill="rgb(235,168,5)" fg:x="1710" fg:w="185"/><text x="15.4096%" y="271.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (184 samples, 1.63%)</title><rect x="15.1684%" y="245" width="1.6312%" height="15" fill="rgb(221,155,16)" fg:x="1711" fg:w="184"/><text x="15.4184%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (18 samples, 0.16%)</title><rect x="17.7926%" y="213" width="0.1596%" height="15" fill="rgb(215,215,53)" fg:x="2007" fg:w="18"/><text x="18.0426%" y="223.50"></text></g><g><title>core::ptr::unique::Unique&lt;T&gt;::as_ptr (4 samples, 0.04%)</title><rect x="17.9167%" y="197" width="0.0355%" height="15" fill="rgb(223,4,10)" fg:x="2021" fg:w="4"/><text x="18.1667%" y="207.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::guaranteed_eq (30 samples, 0.27%)</title><rect x="18.1826%" y="197" width="0.2660%" height="15" fill="rgb(234,103,6)" fg:x="2051" fg:w="30"/><text x="18.4326%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (98 samples, 0.87%)</title><rect x="17.5887%" y="229" width="0.8688%" height="15" fill="rgb(227,97,0)" fg:x="1984" fg:w="98"/><text x="17.8387%" y="239.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::is_null (56 samples, 0.50%)</title><rect x="17.9610%" y="213" width="0.4965%" height="15" fill="rgb(234,150,53)" fg:x="2026" fg:w="56"/><text x="18.2110%" y="223.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::cast (14 samples, 0.12%)</title><rect x="19.1844%" y="197" width="0.1241%" height="15" fill="rgb(228,201,54)" fg:x="2164" fg:w="14"/><text x="19.4344%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (251 samples, 2.23%)</title><rect x="17.2429%" y="245" width="2.2252%" height="15" fill="rgb(222,22,37)" fg:x="1945" fg:w="251"/><text x="17.4929%" y="255.50">&lt;..</text></g><g><title>core::slice::raw::from_raw_parts (114 samples, 1.01%)</title><rect x="18.4574%" y="229" width="1.0106%" height="15" fill="rgb(237,53,32)" fg:x="2082" fg:w="114"/><text x="18.7074%" y="239.50"></text></g><g><title>core::ptr::slice_from_raw_parts (76 samples, 0.67%)</title><rect x="18.7943%" y="213" width="0.6738%" height="15" fill="rgb(233,25,53)" fg:x="2120" fg:w="76"/><text x="19.0443%" y="223.50"></text></g><g><title>core::ptr::metadata::from_raw_parts (18 samples, 0.16%)</title><rect x="19.3085%" y="197" width="0.1596%" height="15" fill="rgb(210,40,34)" fg:x="2178" fg:w="18"/><text x="19.5585%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (354 samples, 3.14%)</title><rect x="16.7996%" y="261" width="3.1383%" height="15" fill="rgb(241,220,44)" fg:x="1895" fg:w="354"/><text x="17.0496%" y="271.50">&lt;al..</text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (53 samples, 0.47%)</title><rect x="19.4681%" y="245" width="0.4699%" height="15" fill="rgb(235,28,35)" fg:x="2196" fg:w="53"/><text x="19.7181%" y="255.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (26 samples, 0.23%)</title><rect x="19.7074%" y="229" width="0.2305%" height="15" fill="rgb(210,56,17)" fg:x="2223" fg:w="26"/><text x="19.9574%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (9 samples, 0.08%)</title><rect x="20.4167%" y="213" width="0.0798%" height="15" fill="rgb(224,130,29)" fg:x="2303" fg:w="9"/><text x="20.6667%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (46 samples, 0.41%)</title><rect x="20.3723%" y="229" width="0.4078%" height="15" fill="rgb(235,212,8)" fg:x="2298" fg:w="46"/><text x="20.6223%" y="239.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::is_null (32 samples, 0.28%)</title><rect x="20.4965%" y="213" width="0.2837%" height="15" fill="rgb(223,33,50)" fg:x="2312" fg:w="32"/><text x="20.7465%" y="223.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::guaranteed_eq (15 samples, 0.13%)</title><rect x="20.6472%" y="197" width="0.1330%" height="15" fill="rgb(219,149,13)" fg:x="2329" fg:w="15"/><text x="20.8972%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (98 samples, 0.87%)</title><rect x="20.3014%" y="245" width="0.8688%" height="15" fill="rgb(250,156,29)" fg:x="2290" fg:w="98"/><text x="20.5514%" y="255.50"></text></g><g><title>core::slice::raw::from_raw_parts_mut (44 samples, 0.39%)</title><rect x="20.7801%" y="229" width="0.3901%" height="15" fill="rgb(216,193,19)" fg:x="2344" fg:w="44"/><text x="21.0301%" y="239.50"></text></g><g><title>core::ptr::slice_from_raw_parts_mut (25 samples, 0.22%)</title><rect x="20.9486%" y="213" width="0.2216%" height="15" fill="rgb(216,135,14)" fg:x="2363" fg:w="25"/><text x="21.1986%" y="223.50"></text></g><g><title>core::ptr::metadata::from_raw_parts_mut (9 samples, 0.08%)</title><rect x="21.0904%" y="197" width="0.0798%" height="15" fill="rgb(241,47,5)" fg:x="2379" fg:w="9"/><text x="21.3404%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (175 samples, 1.55%)</title><rect x="19.9379%" y="261" width="1.5514%" height="15" fill="rgb(233,42,35)" fg:x="2249" fg:w="175"/><text x="20.1879%" y="271.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (36 samples, 0.32%)</title><rect x="21.1702%" y="245" width="0.3191%" height="15" fill="rgb(231,13,6)" fg:x="2388" fg:w="36"/><text x="21.4202%" y="255.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (16 samples, 0.14%)</title><rect x="21.3475%" y="229" width="0.1418%" height="15" fill="rgb(207,181,40)" fg:x="2408" fg:w="16"/><text x="21.5975%" y="239.50"></text></g><g><title>__memmove_avx_unaligned_erms (2 samples, 0.02%)</title><rect x="21.4894%" y="261" width="0.0177%" height="15" fill="rgb(254,173,49)" fg:x="2424" fg:w="2"/><text x="21.7394%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (9 samples, 0.08%)</title><rect x="21.5071%" y="261" width="0.0798%" height="15" fill="rgb(221,1,38)" fg:x="2426" fg:w="9"/><text x="21.7571%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::capacity (9 samples, 0.08%)</title><rect x="22.2163%" y="245" width="0.0798%" height="15" fill="rgb(206,124,46)" fg:x="2506" fg:w="9"/><text x="22.4663%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (10 samples, 0.09%)</title><rect x="22.4025%" y="229" width="0.0887%" height="15" fill="rgb(249,21,11)" fg:x="2527" fg:w="10"/><text x="22.6525%" y="239.50"></text></g><g><title>core::ptr::unique::Unique&lt;T&gt;::as_ptr (4 samples, 0.04%)</title><rect x="22.4557%" y="213" width="0.0355%" height="15" fill="rgb(222,201,40)" fg:x="2533" fg:w="4"/><text x="22.7057%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (56 samples, 0.50%)</title><rect x="22.2961%" y="245" width="0.4965%" height="15" fill="rgb(235,61,29)" fg:x="2515" fg:w="56"/><text x="22.5461%" y="255.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::is_null (34 samples, 0.30%)</title><rect x="22.4911%" y="229" width="0.3014%" height="15" fill="rgb(219,207,3)" fg:x="2537" fg:w="34"/><text x="22.7411%" y="239.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::guaranteed_eq (20 samples, 0.18%)</title><rect x="22.6152%" y="213" width="0.1773%" height="15" fill="rgb(222,56,46)" fg:x="2551" fg:w="20"/><text x="22.8652%" y="223.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (9 samples, 0.08%)</title><rect x="22.7926%" y="245" width="0.0798%" height="15" fill="rgb(239,76,54)" fg:x="2571" fg:w="9"/><text x="23.0426%" y="255.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (9 samples, 0.08%)</title><rect x="22.7926%" y="229" width="0.0798%" height="15" fill="rgb(231,124,27)" fg:x="2571" fg:w="9"/><text x="23.0426%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (157 samples, 1.39%)</title><rect x="21.5869%" y="261" width="1.3918%" height="15" fill="rgb(249,195,6)" fg:x="2435" fg:w="157"/><text x="21.8369%" y="271.50"></text></g><g><title>core::ptr::write (12 samples, 0.11%)</title><rect x="22.8723%" y="245" width="0.1064%" height="15" fill="rgb(237,174,47)" fg:x="2580" fg:w="12"/><text x="23.1223%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::set_len (6 samples, 0.05%)</title><rect x="22.9787%" y="261" width="0.0532%" height="15" fill="rgb(206,201,31)" fg:x="2592" fg:w="6"/><text x="23.2287%" y="271.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (3 samples, 0.03%)</title><rect x="23.3599%" y="165" width="0.0266%" height="15" fill="rgb(231,57,52)" fg:x="2635" fg:w="3"/><text x="23.6099%" y="175.50"></text></g><g><title>__GI___libc_malloc (3 samples, 0.03%)</title><rect x="23.3954%" y="149" width="0.0266%" height="15" fill="rgb(248,177,22)" fg:x="2639" fg:w="3"/><text x="23.6454%" y="159.50"></text></g><g><title>checked_request2size (2 samples, 0.02%)</title><rect x="23.4043%" y="133" width="0.0177%" height="15" fill="rgb(215,211,37)" fg:x="2640" fg:w="2"/><text x="23.6543%" y="143.50"></text></g><g><title>alloc::alloc::alloc (5 samples, 0.04%)</title><rect x="23.3865%" y="165" width="0.0443%" height="15" fill="rgb(241,128,51)" fg:x="2638" fg:w="5"/><text x="23.6365%" y="175.50"></text></g><g><title>core::option::Option&lt;T&gt;::ok_or (4 samples, 0.04%)</title><rect x="23.4309%" y="165" width="0.0355%" height="15" fill="rgb(227,165,31)" fg:x="2643" fg:w="4"/><text x="23.6809%" y="175.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new (2 samples, 0.02%)</title><rect x="23.4663%" y="165" width="0.0177%" height="15" fill="rgb(228,167,24)" fg:x="2647" fg:w="2"/><text x="23.7163%" y="175.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new_unchecked (2 samples, 0.02%)</title><rect x="23.5195%" y="149" width="0.0177%" height="15" fill="rgb(228,143,12)" fg:x="2653" fg:w="2"/><text x="23.7695%" y="159.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (34 samples, 0.30%)</title><rect x="23.2535%" y="197" width="0.3014%" height="15" fill="rgb(249,149,8)" fg:x="2623" fg:w="34"/><text x="23.5035%" y="207.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (31 samples, 0.27%)</title><rect x="23.2801%" y="181" width="0.2748%" height="15" fill="rgb(243,35,44)" fg:x="2626" fg:w="31"/><text x="23.5301%" y="191.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;[T]&gt;::slice_from_raw_parts (8 samples, 0.07%)</title><rect x="23.4840%" y="165" width="0.0709%" height="15" fill="rgb(246,89,9)" fg:x="2649" fg:w="8"/><text x="23.7340%" y="175.50"></text></g><g><title>core::ptr::slice_from_raw_parts_mut (2 samples, 0.02%)</title><rect x="23.5372%" y="149" width="0.0177%" height="15" fill="rgb(233,213,13)" fg:x="2655" fg:w="2"/><text x="23.7872%" y="159.50"></text></g><g><title>core::ptr::metadata::from_raw_parts_mut (2 samples, 0.02%)</title><rect x="23.5372%" y="133" width="0.0177%" height="15" fill="rgb(233,141,41)" fg:x="2655" fg:w="2"/><text x="23.7872%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::capacity_from_bytes (2 samples, 0.02%)</title><rect x="23.5550%" y="197" width="0.0177%" height="15" fill="rgb(239,167,4)" fg:x="2657" fg:w="2"/><text x="23.8050%" y="207.50"></text></g><g><title>alloc::raw_vec::alloc_guard (2 samples, 0.02%)</title><rect x="23.5727%" y="197" width="0.0177%" height="15" fill="rgb(209,217,16)" fg:x="2659" fg:w="2"/><text x="23.8227%" y="207.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (6 samples, 0.05%)</title><rect x="23.6791%" y="181" width="0.0532%" height="15" fill="rgb(219,88,35)" fg:x="2671" fg:w="6"/><text x="23.9291%" y="191.50"></text></g><g><title>core::alloc::layout::Layout::from_size_align_unchecked (4 samples, 0.04%)</title><rect x="23.7411%" y="165" width="0.0355%" height="15" fill="rgb(220,193,23)" fg:x="2678" fg:w="4"/><text x="23.9911%" y="175.50"></text></g><g><title>core::alloc::layout::Layout::new (6 samples, 0.05%)</title><rect x="23.7323%" y="181" width="0.0532%" height="15" fill="rgb(230,90,52)" fg:x="2677" fg:w="6"/><text x="23.9823%" y="191.50"></text></g><g><title>core::alloc::layout::Layout::align (3 samples, 0.03%)</title><rect x="23.8564%" y="165" width="0.0266%" height="15" fill="rgb(252,106,19)" fg:x="2691" fg:w="3"/><text x="24.1064%" y="175.50"></text></g><g><title>core::num::nonzero::NonZeroUsize::get (2 samples, 0.02%)</title><rect x="23.8652%" y="149" width="0.0177%" height="15" fill="rgb(206,74,20)" fg:x="2692" fg:w="2"/><text x="24.1152%" y="159.50"></text></g><g><title>core::alloc::layout::Layout::from_size_align_unchecked (2 samples, 0.02%)</title><rect x="23.9007%" y="149" width="0.0177%" height="15" fill="rgb(230,138,44)" fg:x="2696" fg:w="2"/><text x="24.1507%" y="159.50"></text></g><g><title>core::alloc::layout::Layout::from_size_align (9 samples, 0.08%)</title><rect x="23.8830%" y="165" width="0.0798%" height="15" fill="rgb(235,182,43)" fg:x="2694" fg:w="9"/><text x="24.1330%" y="175.50"></text></g><g><title>core::num::&lt;impl usize&gt;::is_power_of_two (5 samples, 0.04%)</title><rect x="23.9184%" y="149" width="0.0443%" height="15" fill="rgb(242,16,51)" fg:x="2698" fg:w="5"/><text x="24.1684%" y="159.50"></text></g><g><title>core::num::&lt;impl usize&gt;::count_ones (3 samples, 0.03%)</title><rect x="23.9362%" y="133" width="0.0266%" height="15" fill="rgb(248,9,4)" fg:x="2700" fg:w="3"/><text x="24.1862%" y="143.50"></text></g><g><title>core::alloc::layout::Layout::padding_needed_for (7 samples, 0.06%)</title><rect x="23.9628%" y="165" width="0.0621%" height="15" fill="rgb(210,31,22)" fg:x="2703" fg:w="7"/><text x="24.2128%" y="175.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_add (2 samples, 0.02%)</title><rect x="24.0071%" y="149" width="0.0177%" height="15" fill="rgb(239,54,39)" fg:x="2708" fg:w="2"/><text x="24.2571%" y="159.50"></text></g><g><title>core::alloc::layout::Layout::pad_to_align (29 samples, 0.26%)</title><rect x="23.7855%" y="181" width="0.2571%" height="15" fill="rgb(230,99,41)" fg:x="2683" fg:w="29"/><text x="24.0355%" y="191.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::unwrap (2 samples, 0.02%)</title><rect x="24.0248%" y="165" width="0.0177%" height="15" fill="rgb(253,106,12)" fg:x="2710" fg:w="2"/><text x="24.2748%" y="175.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (8 samples, 0.07%)</title><rect x="24.1401%" y="165" width="0.0709%" height="15" fill="rgb(213,46,41)" fg:x="2723" fg:w="8"/><text x="24.3901%" y="175.50"></text></g><g><title>core::alloc::layout::Layout::align (2 samples, 0.02%)</title><rect x="24.2110%" y="165" width="0.0177%" height="15" fill="rgb(215,133,35)" fg:x="2731" fg:w="2"/><text x="24.4610%" y="175.50"></text></g><g><title>core::alloc::layout::Layout::from_size_align_unchecked (2 samples, 0.02%)</title><rect x="24.2287%" y="165" width="0.0177%" height="15" fill="rgb(213,28,5)" fg:x="2733" fg:w="2"/><text x="24.4787%" y="175.50"></text></g><g><title>core::alloc::layout::Layout::size (2 samples, 0.02%)</title><rect x="24.2819%" y="149" width="0.0177%" height="15" fill="rgb(215,77,49)" fg:x="2739" fg:w="2"/><text x="24.5319%" y="159.50"></text></g><g><title>core::alloc::layout::Layout::padding_needed_for (9 samples, 0.08%)</title><rect x="24.2465%" y="165" width="0.0798%" height="15" fill="rgb(248,100,22)" fg:x="2735" fg:w="9"/><text x="24.4965%" y="175.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (2 samples, 0.02%)</title><rect x="24.3085%" y="149" width="0.0177%" height="15" fill="rgb(208,67,9)" fg:x="2742" fg:w="2"/><text x="24.5585%" y="159.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_mul (9 samples, 0.08%)</title><rect x="24.3262%" y="165" width="0.0798%" height="15" fill="rgb(219,133,21)" fg:x="2744" fg:w="9"/><text x="24.5762%" y="175.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_mul (3 samples, 0.03%)</title><rect x="24.3794%" y="149" width="0.0266%" height="15" fill="rgb(246,46,29)" fg:x="2750" fg:w="3"/><text x="24.6294%" y="159.50"></text></g><g><title>core::alloc::layout::Layout::array (95 samples, 0.84%)</title><rect x="23.5904%" y="197" width="0.8422%" height="15" fill="rgb(246,185,52)" fg:x="2661" fg:w="95"/><text x="23.8404%" y="207.50"></text></g><g><title>core::alloc::layout::Layout::repeat (44 samples, 0.39%)</title><rect x="24.0426%" y="181" width="0.3901%" height="15" fill="rgb(252,136,11)" fg:x="2712" fg:w="44"/><text x="24.2926%" y="191.50"></text></g><g><title>core::option::Option&lt;T&gt;::ok_or (3 samples, 0.03%)</title><rect x="24.4060%" y="165" width="0.0266%" height="15" fill="rgb(219,138,53)" fg:x="2753" fg:w="3"/><text x="24.6560%" y="175.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::cast (3 samples, 0.03%)</title><rect x="24.4415%" y="197" width="0.0266%" height="15" fill="rgb(211,51,23)" fg:x="2757" fg:w="3"/><text x="24.6915%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (164 samples, 1.45%)</title><rect x="23.0319%" y="261" width="1.4539%" height="15" fill="rgb(247,221,28)" fg:x="2598" fg:w="164"/><text x="23.2819%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (164 samples, 1.45%)</title><rect x="23.0319%" y="245" width="1.4539%" height="15" fill="rgb(251,222,45)" fg:x="2598" fg:w="164"/><text x="23.2819%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (158 samples, 1.40%)</title><rect x="23.0851%" y="229" width="1.4007%" height="15" fill="rgb(217,162,53)" fg:x="2604" fg:w="158"/><text x="23.3351%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (157 samples, 1.39%)</title><rect x="23.0940%" y="213" width="1.3918%" height="15" fill="rgb(229,93,14)" fg:x="2605" fg:w="157"/><text x="23.3440%" y="223.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;[T]&gt;::len (2 samples, 0.02%)</title><rect x="24.4681%" y="197" width="0.0177%" height="15" fill="rgb(209,67,49)" fg:x="2760" fg:w="2"/><text x="24.7181%" y="207.50"></text></g><g><title>candlelib_hydrocarbon::completer::token::Token::new (6 samples, 0.05%)</title><rect x="24.4858%" y="261" width="0.0532%" height="15" fill="rgb(213,87,29)" fg:x="2762" fg:w="6"/><text x="24.7358%" y="271.50"></text></g><g><title>candlelib_hydrocarbon::completer::token::Token::token_from_range (67 samples, 0.59%)</title><rect x="24.5390%" y="261" width="0.5940%" height="15" fill="rgb(205,151,52)" fg:x="2768" fg:w="67"/><text x="24.7890%" y="271.50"></text></g><g><title>__memmove_avx_unaligned_erms (17 samples, 0.15%)</title><rect x="25.6560%" y="245" width="0.1507%" height="15" fill="rgb(253,215,39)" fg:x="2894" fg:w="17"/><text x="25.9060%" y="255.50"></text></g><g><title>__memset_avx2_unaligned_erms (2 samples, 0.02%)</title><rect x="25.8067%" y="245" width="0.0177%" height="15" fill="rgb(221,220,41)" fg:x="2911" fg:w="2"/><text x="26.0567%" y="255.50"></text></g><g><title>candlelib_hydrocarbon::recognizer::iterator::KernelToken::new (3 samples, 0.03%)</title><rect x="25.8245%" y="245" width="0.0266%" height="15" fill="rgb(218,133,21)" fg:x="2913" fg:w="3"/><text x="26.0745%" y="255.50"></text></g><g><title>__memmove_avx_unaligned_erms (11 samples, 0.10%)</title><rect x="25.8688%" y="229" width="0.0975%" height="15" fill="rgb(221,193,43)" fg:x="2918" fg:w="11"/><text x="26.1188%" y="239.50"></text></g><g><title>candlelib_hydrocarbon::recognizer::stack::KernelStack::new (15 samples, 0.13%)</title><rect x="25.8511%" y="245" width="0.1330%" height="15" fill="rgb(240,128,52)" fg:x="2916" fg:w="15"/><text x="26.1011%" y="255.50"></text></g><g><title>__memset_avx2_unaligned_erms (2 samples, 0.02%)</title><rect x="25.9663%" y="229" width="0.0177%" height="15" fill="rgb(253,114,12)" fg:x="2929" fg:w="2"/><text x="26.2163%" y="239.50"></text></g><g><title>candlelib_hydrocarbon::recognizer::stack::KernelStack::reset (8 samples, 0.07%)</title><rect x="25.9840%" y="245" width="0.0709%" height="15" fill="rgb(215,223,47)" fg:x="2931" fg:w="8"/><text x="26.2340%" y="255.50"></text></g><g><title>candlelib_hydrocarbon::recognizer::stack::KernelStack::push_state (8 samples, 0.07%)</title><rect x="25.9840%" y="229" width="0.0709%" height="15" fill="rgb(248,225,23)" fg:x="2931" fg:w="8"/><text x="26.2340%" y="239.50"></text></g><g><title>candlelib_hydrocarbon::recognizer::iterator::StateIterator&lt;T&gt;::new (105 samples, 0.93%)</title><rect x="25.1330%" y="261" width="0.9309%" height="15" fill="rgb(250,108,0)" fg:x="2835" fg:w="105"/><text x="25.3830%" y="271.50"></text></g><g><title>&lt;I as core::iter::traits::collect::IntoIterator&gt;::into_iter (14 samples, 0.12%)</title><rect x="28.3067%" y="245" width="0.1241%" height="15" fill="rgb(228,208,7)" fg:x="3193" fg:w="14"/><text x="28.5567%" y="255.50"></text></g><g><title>candlelib_hydrocarbon::recognizer::iterator::StateIterator&lt;T&gt;::advanced_return (2 samples, 0.02%)</title><rect x="34.2908%" y="229" width="0.0177%" height="15" fill="rgb(244,45,10)" fg:x="3868" fg:w="2"/><text x="34.5408%" y="239.50"></text></g><g><title>&lt;I as core::iter::traits::collect::IntoIterator&gt;::into_iter (2 samples, 0.02%)</title><rect x="37.1277%" y="197" width="0.0177%" height="15" fill="rgb(207,125,25)" fg:x="4188" fg:w="2"/><text x="37.3777%" y="207.50"></text></g><g><title>&lt;candlelib_hydrocarbon::recognizer::reader::UTF8StringReader as candlelib_hydrocarbon::recognizer::reader::ByteReader&gt;::END (10 samples, 0.09%)</title><rect x="37.1454%" y="197" width="0.0887%" height="15" fill="rgb(210,195,18)" fg:x="4190" fg:w="10"/><text x="37.3954%" y="207.50"></text></g><g><title>&lt;candlelib_hydrocarbon::recognizer::reader::UTF8StringReader as candlelib_hydrocarbon::recognizer::reader::ByteReader&gt;::byte (16 samples, 0.14%)</title><rect x="37.2340%" y="197" width="0.1418%" height="15" fill="rgb(249,80,12)" fg:x="4200" fg:w="16"/><text x="37.4840%" y="207.50"></text></g><g><title>candlelib_hydrocarbon::recognizer::utf8::get_utf8_code_point_from (23 samples, 0.20%)</title><rect x="37.3759%" y="197" width="0.2039%" height="15" fill="rgb(221,65,9)" fg:x="4216" fg:w="23"/><text x="37.6259%" y="207.50"></text></g><g><title>core::cmp::max (13 samples, 0.12%)</title><rect x="37.5798%" y="197" width="0.1152%" height="15" fill="rgb(235,49,36)" fg:x="4239" fg:w="13"/><text x="37.8298%" y="207.50"></text></g><g><title>core::cmp::Ord::max (12 samples, 0.11%)</title><rect x="37.5887%" y="181" width="0.1064%" height="15" fill="rgb(225,32,20)" fg:x="4240" fg:w="12"/><text x="37.8387%" y="191.50"></text></g><g><title>core::cmp::max_by (12 samples, 0.11%)</title><rect x="37.5887%" y="165" width="0.1064%" height="15" fill="rgb(215,141,46)" fg:x="4240" fg:w="12"/><text x="37.8387%" y="175.50"></text></g><g><title>core::ops::function::FnOnce::call_once (3 samples, 0.03%)</title><rect x="37.6684%" y="149" width="0.0266%" height="15" fill="rgb(250,160,47)" fg:x="4249" fg:w="3"/><text x="37.9184%" y="159.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for i32&gt;::cmp (2 samples, 0.02%)</title><rect x="37.6773%" y="133" width="0.0177%" height="15" fill="rgb(216,222,40)" fg:x="4250" fg:w="2"/><text x="37.9273%" y="143.50"></text></g><g><title>core::cmp::min (12 samples, 0.11%)</title><rect x="37.6950%" y="197" width="0.1064%" height="15" fill="rgb(234,217,39)" fg:x="4252" fg:w="12"/><text x="37.9450%" y="207.50"></text></g><g><title>core::cmp::Ord::min (12 samples, 0.11%)</title><rect x="37.6950%" y="181" width="0.1064%" height="15" fill="rgb(207,178,40)" fg:x="4252" fg:w="12"/><text x="37.9450%" y="191.50"></text></g><g><title>core::cmp::min_by (12 samples, 0.11%)</title><rect x="37.6950%" y="165" width="0.1064%" height="15" fill="rgb(221,136,13)" fg:x="4252" fg:w="12"/><text x="37.9450%" y="175.50"></text></g><g><title>core::ops::function::FnOnce::call_once (3 samples, 0.03%)</title><rect x="37.7748%" y="149" width="0.0266%" height="15" fill="rgb(249,199,10)" fg:x="4261" fg:w="3"/><text x="38.0248%" y="159.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for i32&gt;::cmp (2 samples, 0.02%)</title><rect x="37.7837%" y="133" width="0.0177%" height="15" fill="rgb(249,222,13)" fg:x="4262" fg:w="2"/><text x="38.0337%" y="143.50"></text></g><g><title>&lt;u32 as core::iter::range::Step&gt;::forward_unchecked (8 samples, 0.07%)</title><rect x="38.2979%" y="165" width="0.0709%" height="15" fill="rgb(244,185,38)" fg:x="4320" fg:w="8"/><text x="38.5479%" y="175.50"></text></g><g><title>core::num::&lt;impl u32&gt;::unchecked_add (8 samples, 0.07%)</title><rect x="38.2979%" y="149" width="0.0709%" height="15" fill="rgb(236,202,9)" fg:x="4320" fg:w="8"/><text x="38.5479%" y="159.50"></text></g><g><title>core::clone::impls::&lt;impl core::clone::Clone for u32&gt;::clone (6 samples, 0.05%)</title><rect x="38.3688%" y="165" width="0.0532%" height="15" fill="rgb(250,229,37)" fg:x="4328" fg:w="6"/><text x="38.6188%" y="175.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for u32&gt;::lt (9 samples, 0.08%)</title><rect x="38.4220%" y="165" width="0.0798%" height="15" fill="rgb(206,174,23)" fg:x="4334" fg:w="9"/><text x="38.6720%" y="175.50"></text></g><g><title>core::ptr::read (13 samples, 0.12%)</title><rect x="38.6613%" y="149" width="0.1152%" height="15" fill="rgb(211,33,43)" fg:x="4361" fg:w="13"/><text x="38.9113%" y="159.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::uninit (2 samples, 0.02%)</title><rect x="38.7589%" y="133" width="0.0177%" height="15" fill="rgb(245,58,50)" fg:x="4372" fg:w="2"/><text x="39.0089%" y="143.50"></text></g><g><title>&lt;candlelib_hydrocarbon::recognizer::reader::UTF8StringReader as candlelib_hydrocarbon::recognizer::reader::ByteReader&gt;::next (338 samples, 3.00%)</title><rect x="35.8245%" y="213" width="2.9965%" height="15" fill="rgb(244,68,36)" fg:x="4041" fg:w="338"/><text x="36.0745%" y="223.50">&lt;ca..</text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (115 samples, 1.02%)</title><rect x="37.8014%" y="197" width="1.0195%" height="15" fill="rgb(232,229,15)" fg:x="4264" fg:w="115"/><text x="38.0514%" y="207.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (100 samples, 0.89%)</title><rect x="37.9344%" y="181" width="0.8865%" height="15" fill="rgb(254,30,23)" fg:x="4279" fg:w="100"/><text x="38.1844%" y="191.50"></text></g><g><title>core::mem::replace (36 samples, 0.32%)</title><rect x="38.5018%" y="165" width="0.3191%" height="15" fill="rgb(235,160,14)" fg:x="4343" fg:w="36"/><text x="38.7518%" y="175.50"></text></g><g><title>core::ptr::write (5 samples, 0.04%)</title><rect x="38.7766%" y="149" width="0.0443%" height="15" fill="rgb(212,155,44)" fg:x="4374" fg:w="5"/><text x="39.0266%" y="159.50"></text></g><g><title>candlelib_hydrocarbon::recognizer::iterator::StateIterator&lt;T&gt;::consume (617 samples, 5.47%)</title><rect x="34.3085%" y="229" width="5.4699%" height="15" fill="rgb(226,2,50)" fg:x="3870" fg:w="617"/><text x="34.5585%" y="239.50">candlel..</text></g><g><title>candlelib_hydrocarbon::recognizer::iterator::StateIterator&lt;T&gt;::emitShift (108 samples, 0.96%)</title><rect x="38.8209%" y="213" width="0.9574%" height="15" fill="rgb(234,177,6)" fg:x="4379" fg:w="108"/><text x="39.0709%" y="223.50"></text></g><g><title>candlelib_hydrocarbon::recognizer::iterator::StateIterator&lt;T&gt;::pushAction (49 samples, 0.43%)</title><rect x="39.3440%" y="197" width="0.4344%" height="15" fill="rgb(217,24,9)" fg:x="4438" fg:w="49"/><text x="39.5940%" y="207.50"></text></g><g><title>candlelib_hydrocarbon::recognizer::iterator::StateIterator&lt;T&gt;::goto (87 samples, 0.77%)</title><rect x="39.7784%" y="229" width="0.7713%" height="15" fill="rgb(220,13,46)" fg:x="4487" fg:w="87"/><text x="40.0284%" y="239.50"></text></g><g><title>candlelib_hydrocarbon::recognizer::stack::KernelStack::push_state (65 samples, 0.58%)</title><rect x="39.9734%" y="213" width="0.5762%" height="15" fill="rgb(239,221,27)" fg:x="4509" fg:w="65"/><text x="40.2234%" y="223.50"></text></g><g><title>&lt;candlelib_hydrocarbon::recognizer::reader::UTF8StringReader as candlelib_hydrocarbon::recognizer::reader::ByteReader&gt;::END (10 samples, 0.09%)</title><rect x="46.9504%" y="197" width="0.0887%" height="15" fill="rgb(222,198,25)" fg:x="5296" fg:w="10"/><text x="47.2004%" y="207.50"></text></g><g><title>&lt;candlelib_hydrocarbon::recognizer::reader::UTF8StringReader as candlelib_hydrocarbon::recognizer::reader::ByteReader&gt;::clone (51 samples, 0.45%)</title><rect x="48.2801%" y="181" width="0.4521%" height="15" fill="rgb(211,99,13)" fg:x="5446" fg:w="51"/><text x="48.5301%" y="191.50"></text></g><g><title>[sandbox] (7 samples, 0.06%)</title><rect x="48.7323%" y="181" width="0.0621%" height="15" fill="rgb(232,111,31)" fg:x="5497" fg:w="7"/><text x="48.9823%" y="191.50"></text></g><g><title>__memmove_avx_unaligned_erms (46 samples, 0.41%)</title><rect x="48.7943%" y="181" width="0.4078%" height="15" fill="rgb(245,82,37)" fg:x="5504" fg:w="46"/><text x="49.0443%" y="191.50"></text></g><g><title>[sandbox] (5 samples, 0.04%)</title><rect x="54.0337%" y="165" width="0.0443%" height="15" fill="rgb(227,149,46)" fg:x="6095" fg:w="5"/><text x="54.2837%" y="175.50"></text></g><g><title>__memmove_avx_unaligned_erms (186 samples, 1.65%)</title><rect x="54.0780%" y="165" width="1.6489%" height="15" fill="rgb(218,36,50)" fg:x="6100" fg:w="186"/><text x="54.3280%" y="175.50"></text></g><g><title>__memset_avx2_unaligned_erms (16 samples, 0.14%)</title><rect x="55.7270%" y="165" width="0.1418%" height="15" fill="rgb(226,80,48)" fg:x="6286" fg:w="16"/><text x="55.9770%" y="175.50"></text></g><g><title>candlelib_hydrocarbon::recognizer::iterator::KernelToken::new (19 samples, 0.17%)</title><rect x="55.8688%" y="165" width="0.1684%" height="15" fill="rgb(238,224,15)" fg:x="6302" fg:w="19"/><text x="56.1188%" y="175.50"></text></g><g><title>[sandbox] (7 samples, 0.06%)</title><rect x="56.2234%" y="149" width="0.0621%" height="15" fill="rgb(241,136,10)" fg:x="6342" fg:w="7"/><text x="56.4734%" y="159.50"></text></g><g><title>__memmove_avx_unaligned_erms (112 samples, 0.99%)</title><rect x="56.2855%" y="149" width="0.9929%" height="15" fill="rgb(208,32,45)" fg:x="6349" fg:w="112"/><text x="56.5355%" y="159.50"></text></g><g><title>candlelib_hydrocarbon::recognizer::stack::KernelStack::new (209 samples, 1.85%)</title><rect x="56.0372%" y="165" width="1.8528%" height="15" fill="rgb(207,135,9)" fg:x="6321" fg:w="209"/><text x="56.2872%" y="175.50">c..</text></g><g><title>__memset_avx2_unaligned_erms (69 samples, 0.61%)</title><rect x="57.2784%" y="149" width="0.6117%" height="15" fill="rgb(206,86,44)" fg:x="6461" fg:w="69"/><text x="57.5284%" y="159.50"></text></g><g><title>candlelib_hydrocarbon::recognizer::iterator::StateIterator&lt;T&gt;::new (1,029 samples, 9.12%)</title><rect x="49.2021%" y="181" width="9.1223%" height="15" fill="rgb(245,177,15)" fg:x="5550" fg:w="1029"/><text x="49.4521%" y="191.50">candlelib_hyd..</text></g><g><title>candlelib_hydrocarbon::recognizer::stack::KernelStack::reset (49 samples, 0.43%)</title><rect x="57.8901%" y="165" width="0.4344%" height="15" fill="rgb(206,64,50)" fg:x="6530" fg:w="49"/><text x="58.1401%" y="175.50"></text></g><g><title>candlelib_hydrocarbon::recognizer::stack::KernelStack::push_state (43 samples, 0.38%)</title><rect x="57.9433%" y="149" width="0.3812%" height="15" fill="rgb(234,36,40)" fg:x="6536" fg:w="43"/><text x="58.1933%" y="159.50"></text></g><g><title>&lt;I as core::iter::traits::collect::IntoIterator&gt;::into_iter (19 samples, 0.17%)</title><rect x="62.0390%" y="165" width="0.1684%" height="15" fill="rgb(213,64,8)" fg:x="6998" fg:w="19"/><text x="62.2890%" y="175.50"></text></g><g><title>candlelib_hydrocarbon::recognizer::iterator::StateIterator&lt;T&gt;::advanced_return (4 samples, 0.04%)</title><rect x="71.5337%" y="149" width="0.0355%" height="15" fill="rgb(210,75,36)" fg:x="8069" fg:w="4"/><text x="71.7837%" y="159.50"></text></g><g><title>&lt;candlelib_hydrocarbon::recognizer::reader::UTF8StringReader as candlelib_hydrocarbon::recognizer::reader::ByteReader&gt;::END (2 samples, 0.02%)</title><rect x="71.5514%" y="133" width="0.0177%" height="15" fill="rgb(229,88,21)" fg:x="8071" fg:w="2"/><text x="71.8014%" y="143.50"></text></g><g><title>&lt;candlelib_hydrocarbon::recognizer::reader::UTF8StringReader as candlelib_hydrocarbon::recognizer::reader::ByteReader&gt;::END (4 samples, 0.04%)</title><rect x="73.3954%" y="117" width="0.0355%" height="15" fill="rgb(252,204,47)" fg:x="8279" fg:w="4"/><text x="73.6454%" y="127.50"></text></g><g><title>&lt;candlelib_hydrocarbon::recognizer::reader::UTF8StringReader as candlelib_hydrocarbon::recognizer::reader::ByteReader&gt;::byte (11 samples, 0.10%)</title><rect x="73.4309%" y="117" width="0.0975%" height="15" fill="rgb(208,77,27)" fg:x="8283" fg:w="11"/><text x="73.6809%" y="127.50"></text></g><g><title>candlelib_hydrocarbon::recognizer::iterator::StateIterator&lt;T&gt;::consume (238 samples, 2.11%)</title><rect x="71.5691%" y="149" width="2.1099%" height="15" fill="rgb(221,76,26)" fg:x="8073" fg:w="238"/><text x="71.8191%" y="159.50">c..</text></g><g><title>&lt;candlelib_hydrocarbon::recognizer::reader::UTF8StringReader as candlelib_hydrocarbon::recognizer::reader::ByteReader&gt;::next (112 samples, 0.99%)</title><rect x="72.6862%" y="133" width="0.9929%" height="15" fill="rgb(225,139,18)" fg:x="8199" fg:w="112"/><text x="72.9362%" y="143.50"></text></g><g><title>candlelib_hydrocarbon::recognizer::utf8::get_utf8_code_point_from (17 samples, 0.15%)</title><rect x="73.5284%" y="117" width="0.1507%" height="15" fill="rgb(230,137,11)" fg:x="8294" fg:w="17"/><text x="73.7784%" y="127.50"></text></g><g><title>candlelib_hydrocarbon::recognizer::iterator::StateIterator&lt;T&gt;::goto (80 samples, 0.71%)</title><rect x="73.6791%" y="149" width="0.7092%" height="15" fill="rgb(212,28,1)" fg:x="8311" fg:w="80"/><text x="73.9291%" y="159.50"></text></g><g><title>candlelib_hydrocarbon::recognizer::stack::KernelStack::push_state (61 samples, 0.54%)</title><rect x="73.8475%" y="133" width="0.5408%" height="15" fill="rgb(248,164,17)" fg:x="8330" fg:w="61"/><text x="74.0975%" y="143.50"></text></g><g><title>&lt;candlelib_hydrocarbon::recognizer::reader::UTF8StringReader as candlelib_hydrocarbon::recognizer::reader::ByteReader&gt;::END (8 samples, 0.07%)</title><rect x="81.1879%" y="117" width="0.0709%" height="15" fill="rgb(222,171,42)" fg:x="9158" fg:w="8"/><text x="81.4379%" y="127.50"></text></g><g><title>&lt;candlelib_hydrocarbon::recognizer::reader::UTF8StringReader as candlelib_hydrocarbon::recognizer::reader::ByteReader&gt;::codepoint (4 samples, 0.04%)</title><rect x="81.3475%" y="101" width="0.0355%" height="15" fill="rgb(243,84,45)" fg:x="9176" fg:w="4"/><text x="81.5975%" y="111.50"></text></g><g><title>candlelib_hydrocarbon::recognizer::reader::ByteReader::class (22 samples, 0.20%)</title><rect x="81.2589%" y="117" width="0.1950%" height="15" fill="rgb(252,49,23)" fg:x="9166" fg:w="22"/><text x="81.5089%" y="127.50"></text></g><g><title>candlelib_hydrocarbon::recognizer::utf8::getTypeAt (8 samples, 0.07%)</title><rect x="81.3830%" y="101" width="0.0709%" height="15" fill="rgb(215,19,7)" fg:x="9180" fg:w="8"/><text x="81.6330%" y="111.50"></text></g><g><title>candlelib_hydrocarbon::recognizer::reader::ByteReader::codepoint_byte_length (24 samples, 0.21%)</title><rect x="81.4539%" y="117" width="0.2128%" height="15" fill="rgb(238,81,41)" fg:x="9188" fg:w="24"/><text x="81.7039%" y="127.50"></text></g><g><title>candlelib_hydrocarbon::recognizer::utf8::get_utf8_byte_length_from_code_point (5 samples, 0.04%)</title><rect x="81.6223%" y="101" width="0.0443%" height="15" fill="rgb(210,199,37)" fg:x="9207" fg:w="5"/><text x="81.8723%" y="111.50"></text></g><g><title>&lt;candlelib_hydrocarbon::recognizer::reader::UTF8StringReader as candlelib_hydrocarbon::recognizer::reader::ByteReader&gt;::codepoint (5 samples, 0.04%)</title><rect x="81.6844%" y="101" width="0.0443%" height="15" fill="rgb(244,192,49)" fg:x="9214" fg:w="5"/><text x="81.9344%" y="111.50"></text></g><g><title>candlelib_hydrocarbon::recognizer::iterator::StateIterator&lt;T&gt;::hash_jump (835 samples, 7.40%)</title><rect x="74.3883%" y="149" width="7.4025%" height="15" fill="rgb(226,211,11)" fg:x="8391" fg:w="835"/><text x="74.6383%" y="159.50">candlelib_..</text></g><g><title>candlelib_hydrocarbon::recognizer::iterator::StateIterator&lt;T&gt;::get_input_value (173 samples, 1.53%)</title><rect x="80.2571%" y="133" width="1.5337%" height="15" fill="rgb(236,162,54)" fg:x="9053" fg:w="173"/><text x="80.5071%" y="143.50"></text></g><g><title>candlelib_hydrocarbon::recognizer::reader::ByteReader::codepoint_length (14 samples, 0.12%)</title><rect x="81.6667%" y="117" width="0.1241%" height="15" fill="rgb(220,229,9)" fg:x="9212" fg:w="14"/><text x="81.9167%" y="127.50"></text></g><g><title>candlelib_hydrocarbon::recognizer::utf8::get_token_length_from_code_point (7 samples, 0.06%)</title><rect x="81.7287%" y="101" width="0.0621%" height="15" fill="rgb(250,87,22)" fg:x="9219" fg:w="7"/><text x="81.9787%" y="111.50"></text></g><g><title>&lt;candlelib_hydrocarbon::recognizer::reader::UTF8StringReader as candlelib_hydrocarbon::recognizer::reader::ByteReader&gt;::END (6 samples, 0.05%)</title><rect x="84.2199%" y="117" width="0.0532%" height="15" fill="rgb(239,43,17)" fg:x="9500" fg:w="6"/><text x="84.4699%" y="127.50"></text></g><g><title>&lt;candlelib_hydrocarbon::recognizer::reader::UTF8StringReader as candlelib_hydrocarbon::recognizer::reader::ByteReader&gt;::codepoint (5 samples, 0.04%)</title><rect x="84.3706%" y="101" width="0.0443%" height="15" fill="rgb(231,177,25)" fg:x="9517" fg:w="5"/><text x="84.6206%" y="111.50"></text></g><g><title>candlelib_hydrocarbon::recognizer::reader::ByteReader::class (30 samples, 0.27%)</title><rect x="84.2730%" y="117" width="0.2660%" height="15" fill="rgb(219,179,1)" fg:x="9506" fg:w="30"/><text x="84.5230%" y="127.50"></text></g><g><title>candlelib_hydrocarbon::recognizer::utf8::getTypeAt (14 samples, 0.12%)</title><rect x="84.4149%" y="101" width="0.1241%" height="15" fill="rgb(238,219,53)" fg:x="9522" fg:w="14"/><text x="84.6649%" y="111.50"></text></g><g><title>&lt;candlelib_hydrocarbon::recognizer::reader::UTF8StringReader as candlelib_hydrocarbon::recognizer::reader::ByteReader&gt;::codepoint (2 samples, 0.02%)</title><rect x="84.5656%" y="101" width="0.0177%" height="15" fill="rgb(232,167,36)" fg:x="9539" fg:w="2"/><text x="84.8156%" y="111.50"></text></g><g><title>candlelib_hydrocarbon::recognizer::reader::ByteReader::codepoint_byte_length (17 samples, 0.15%)</title><rect x="84.5390%" y="117" width="0.1507%" height="15" fill="rgb(244,19,51)" fg:x="9536" fg:w="17"/><text x="84.7890%" y="127.50"></text></g><g><title>candlelib_hydrocarbon::recognizer::utf8::get_utf8_byte_length_from_code_point (12 samples, 0.11%)</title><rect x="84.5833%" y="101" width="0.1064%" height="15" fill="rgb(224,6,22)" fg:x="9541" fg:w="12"/><text x="84.8333%" y="111.50"></text></g><g><title>candlelib_hydrocarbon::recognizer::iterator::StateIterator&lt;T&gt;::index_jump (329 samples, 2.92%)</title><rect x="81.7908%" y="149" width="2.9167%" height="15" fill="rgb(224,145,5)" fg:x="9226" fg:w="329"/><text x="82.0408%" y="159.50">ca..</text></g><g><title>candlelib_hydrocarbon::recognizer::iterator::StateIterator&lt;T&gt;::get_input_value (144 samples, 1.28%)</title><rect x="83.4309%" y="133" width="1.2766%" height="15" fill="rgb(234,130,49)" fg:x="9411" fg:w="144"/><text x="83.6809%" y="143.50"></text></g><g><title>candlelib_hydrocarbon::recognizer::reader::ByteReader::codepoint_length (2 samples, 0.02%)</title><rect x="84.6897%" y="117" width="0.0177%" height="15" fill="rgb(254,6,2)" fg:x="9553" fg:w="2"/><text x="84.9397%" y="127.50"></text></g><g><title>candlelib_hydrocarbon::recognizer::utf8::get_token_length_from_code_point (2 samples, 0.02%)</title><rect x="84.6897%" y="101" width="0.0177%" height="15" fill="rgb(208,96,46)" fg:x="9553" fg:w="2"/><text x="84.9397%" y="111.50"></text></g><g><title>candlelib_hydrocarbon::recognizer::iterator::StateIterator&lt;T&gt;::pass (12 samples, 0.11%)</title><rect x="84.7074%" y="149" width="0.1064%" height="15" fill="rgb(239,3,39)" fg:x="9555" fg:w="12"/><text x="84.9574%" y="159.50"></text></g><g><title>candlelib_hydrocarbon::recognizer::iterator::StateIterator&lt;T&gt;::set_production (8 samples, 0.07%)</title><rect x="84.8138%" y="149" width="0.0709%" height="15" fill="rgb(233,210,1)" fg:x="9567" fg:w="8"/><text x="85.0638%" y="159.50"></text></g><g><title>candlelib_hydrocarbon::recognizer::iterator::StateIterator&lt;T&gt;::instruction_executor (2,664 samples, 23.62%)</title><rect x="62.2074%" y="165" width="23.6170%" height="15" fill="rgb(244,137,37)" fg:x="7017" fg:w="2664"/><text x="62.4574%" y="175.50">candlelib_hydrocarbon::recognizer::ite..</text></g><g><title>candlelib_hydrocarbon::recognizer::iterator::StateIterator&lt;T&gt;::set_token (106 samples, 0.94%)</title><rect x="84.8848%" y="149" width="0.9397%" height="15" fill="rgb(240,136,2)" fg:x="9575" fg:w="106"/><text x="85.1348%" y="159.50"></text></g><g><title>candlelib_hydrocarbon::recognizer::stack::KernelStack::pop_state (179 samples, 1.59%)</title><rect x="85.8245%" y="165" width="1.5869%" height="15" fill="rgb(239,18,37)" fg:x="9681" fg:w="179"/><text x="86.0745%" y="175.50"></text></g><g><title>candlelib_hydrocarbon::recognizer::stack::KernelStack::read_state (86 samples, 0.76%)</title><rect x="86.6489%" y="149" width="0.7624%" height="15" fill="rgb(218,185,22)" fg:x="9774" fg:w="86"/><text x="86.8989%" y="159.50"></text></g><g><title>&lt;i32 as core::iter::range::Step&gt;::forward_unchecked (52 samples, 0.46%)</title><rect x="89.1312%" y="133" width="0.4610%" height="15" fill="rgb(225,218,4)" fg:x="10054" fg:w="52"/><text x="89.3812%" y="143.50"></text></g><g><title>core::num::&lt;impl i32&gt;::unchecked_add (14 samples, 0.12%)</title><rect x="89.4681%" y="117" width="0.1241%" height="15" fill="rgb(230,182,32)" fg:x="10092" fg:w="14"/><text x="89.7181%" y="127.50"></text></g><g><title>core::clone::impls::&lt;impl core::clone::Clone for i32&gt;::clone (25 samples, 0.22%)</title><rect x="89.5922%" y="133" width="0.2216%" height="15" fill="rgb(242,56,43)" fg:x="10106" fg:w="25"/><text x="89.8422%" y="143.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for i32&gt;::lt (44 samples, 0.39%)</title><rect x="89.8138%" y="133" width="0.3901%" height="15" fill="rgb(233,99,24)" fg:x="10131" fg:w="44"/><text x="90.0638%" y="143.50"></text></g><g><title>core::ptr::read (110 samples, 0.98%)</title><rect x="90.9929%" y="117" width="0.9752%" height="15" fill="rgb(234,209,42)" fg:x="10264" fg:w="110"/><text x="91.2429%" y="127.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::uninit (9 samples, 0.08%)</title><rect x="91.8883%" y="101" width="0.0798%" height="15" fill="rgb(227,7,12)" fg:x="10365" fg:w="9"/><text x="92.1383%" y="111.50"></text></g><g><title>candlelib_hydrocarbon::recognizer::iterator::StateIterator&lt;T&gt;::nextAction (3,823 samples, 33.89%)</title><rect x="58.3245%" y="181" width="33.8918%" height="15" fill="rgb(245,203,43)" fg:x="6579" fg:w="3823"/><text x="58.5745%" y="191.50">candlelib_hydrocarbon::recognizer::iterator::StateItera..</text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (542 samples, 4.80%)</title><rect x="87.4113%" y="165" width="4.8050%" height="15" fill="rgb(238,205,33)" fg:x="9860" fg:w="542"/><text x="87.6613%" y="175.50">core::..</text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (491 samples, 4.35%)</title><rect x="87.8635%" y="149" width="4.3528%" height="15" fill="rgb(231,56,7)" fg:x="9911" fg:w="491"/><text x="88.1135%" y="159.50">&lt;core..</text></g><g><title>core::mem::replace (227 samples, 2.01%)</title><rect x="90.2039%" y="133" width="2.0124%" height="15" fill="rgb(244,186,29)" fg:x="10175" fg:w="227"/><text x="90.4539%" y="143.50">c..</text></g><g><title>core::ptr::write (28 samples, 0.25%)</title><rect x="91.9681%" y="117" width="0.2482%" height="15" fill="rgb(234,111,31)" fg:x="10374" fg:w="28"/><text x="92.2181%" y="127.50"></text></g><g><title>candlelib_hydrocarbon::recognizer::iterator::StateIterator&lt;T&gt;::hash_jump (5,841 samples, 51.78%)</title><rect x="40.5496%" y="229" width="51.7819%" height="15" fill="rgb(241,149,10)" fg:x="4574" fg:w="5841"/><text x="40.7996%" y="239.50">candlelib_hydrocarbon::recognizer::iterator::StateIterator&lt;T&gt;::hash_jump</text></g><g><title>candlelib_hydrocarbon::recognizer::iterator::StateIterator&lt;T&gt;::get_input_value (5,207 samples, 46.16%)</title><rect x="46.1702%" y="213" width="46.1613%" height="15" fill="rgb(249,206,44)" fg:x="5208" fg:w="5207"/><text x="46.4202%" y="223.50">candlelib_hydrocarbon::recognizer::iterator::StateIterator&lt;T&gt;::get_input_val..</text></g><g><title>candlelib_hydrocarbon::recognizer::iterator::StateIterator&lt;T&gt;::scanner (5,109 samples, 45.29%)</title><rect x="47.0390%" y="197" width="45.2926%" height="15" fill="rgb(251,153,30)" fg:x="5306" fg:w="5109"/><text x="47.2890%" y="207.50">candlelib_hydrocarbon::recognizer::iterator::StateIterator&lt;T&gt;::scanner</text></g><g><title>candlelib_hydrocarbon::recognizer::stack::KernelStack::reset (13 samples, 0.12%)</title><rect x="92.2163%" y="181" width="0.1152%" height="15" fill="rgb(239,152,38)" fg:x="10402" fg:w="13"/><text x="92.4663%" y="191.50"></text></g><g><title>candlelib_hydrocarbon::recognizer::stack::KernelStack::push_state (12 samples, 0.11%)</title><rect x="92.2252%" y="165" width="0.1064%" height="15" fill="rgb(249,139,47)" fg:x="10403" fg:w="12"/><text x="92.4752%" y="175.50"></text></g><g><title>candlelib_hydrocarbon::recognizer::iterator::StateIterator&lt;T&gt;::pass (7 samples, 0.06%)</title><rect x="92.3316%" y="229" width="0.0621%" height="15" fill="rgb(244,64,35)" fg:x="10415" fg:w="7"/><text x="92.5816%" y="239.50"></text></g><g><title>candlelib_hydrocarbon::recognizer::iterator::StateIterator&lt;T&gt;::reduce (64 samples, 0.57%)</title><rect x="92.3936%" y="229" width="0.5674%" height="15" fill="rgb(216,46,15)" fg:x="10422" fg:w="64"/><text x="92.6436%" y="239.50"></text></g><g><title>candlelib_hydrocarbon::recognizer::iterator::StateIterator&lt;T&gt;::emitReduce (45 samples, 0.40%)</title><rect x="92.5621%" y="213" width="0.3989%" height="15" fill="rgb(250,74,19)" fg:x="10441" fg:w="45"/><text x="92.8121%" y="223.50"></text></g><g><title>candlelib_hydrocarbon::recognizer::iterator::StateIterator&lt;T&gt;::pushAction (36 samples, 0.32%)</title><rect x="92.6418%" y="197" width="0.3191%" height="15" fill="rgb(249,42,33)" fg:x="10450" fg:w="36"/><text x="92.8918%" y="207.50"></text></g><g><title>candlelib_hydrocarbon::recognizer::iterator::StateIterator&lt;T&gt;::instruction_executor (7,281 samples, 64.55%)</title><rect x="28.4309%" y="245" width="64.5479%" height="15" fill="rgb(242,149,17)" fg:x="3207" fg:w="7281"/><text x="28.6809%" y="255.50">candlelib_hydrocarbon::recognizer::iterator::StateIterator&lt;T&gt;::instruction_executor</text></g><g><title>candlelib_hydrocarbon::recognizer::iterator::StateIterator&lt;T&gt;::set_production (2 samples, 0.02%)</title><rect x="92.9610%" y="229" width="0.0177%" height="15" fill="rgb(244,29,21)" fg:x="10486" fg:w="2"/><text x="93.2110%" y="239.50"></text></g><g><title>candlelib_hydrocarbon::recognizer::iterator::StateIterator&lt;T&gt;::nextAction (34 samples, 0.30%)</title><rect x="92.9787%" y="245" width="0.3014%" height="15" fill="rgb(220,130,37)" fg:x="10488" fg:w="34"/><text x="93.2287%" y="255.50"></text></g><g><title>candlelib_hydrocarbon::recognizer::stack::KernelStack::pop_state (88 samples, 0.78%)</title><rect x="93.2801%" y="245" width="0.7801%" height="15" fill="rgb(211,67,2)" fg:x="10522" fg:w="88"/><text x="93.5301%" y="255.50"></text></g><g><title>candlelib_hydrocarbon::recognizer::stack::KernelStack::read_state (38 samples, 0.34%)</title><rect x="93.7234%" y="229" width="0.3369%" height="15" fill="rgb(235,68,52)" fg:x="10572" fg:w="38"/><text x="93.9734%" y="239.50"></text></g><g><title>&lt;i32 as core::iter::range::Step&gt;::forward_unchecked (25 samples, 0.22%)</title><rect x="95.1596%" y="213" width="0.2216%" height="15" fill="rgb(246,142,3)" fg:x="10734" fg:w="25"/><text x="95.4096%" y="223.50"></text></g><g><title>core::num::&lt;impl i32&gt;::unchecked_add (6 samples, 0.05%)</title><rect x="95.3280%" y="197" width="0.0532%" height="15" fill="rgb(241,25,7)" fg:x="10753" fg:w="6"/><text x="95.5780%" y="207.50"></text></g><g><title>core::clone::impls::&lt;impl core::clone::Clone for i32&gt;::clone (14 samples, 0.12%)</title><rect x="95.3812%" y="213" width="0.1241%" height="15" fill="rgb(242,119,39)" fg:x="10759" fg:w="14"/><text x="95.6312%" y="223.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for i32&gt;::lt (24 samples, 0.21%)</title><rect x="95.5053%" y="213" width="0.2128%" height="15" fill="rgb(241,98,45)" fg:x="10773" fg:w="24"/><text x="95.7553%" y="223.50"></text></g><g><title>core::ptr::read (66 samples, 0.59%)</title><rect x="96.2411%" y="197" width="0.5851%" height="15" fill="rgb(254,28,30)" fg:x="10856" fg:w="66"/><text x="96.4911%" y="207.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::uninit (5 samples, 0.04%)</title><rect x="96.7819%" y="181" width="0.0443%" height="15" fill="rgb(241,142,54)" fg:x="10917" fg:w="5"/><text x="97.0319%" y="191.50"></text></g><g><title>candlelib_hydrocarbon::recognizer::iterator::StateIterator&lt;T&gt;::nextAction (7,994 samples, 70.87%)</title><rect x="26.0638%" y="261" width="70.8688%" height="15" fill="rgb(222,85,15)" fg:x="2940" fg:w="7994"/><text x="26.3138%" y="271.50">candlelib_hydrocarbon::recognizer::iterator::StateIterator&lt;T&gt;::nextAction</text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (324 samples, 2.87%)</title><rect x="94.0603%" y="245" width="2.8723%" height="15" fill="rgb(210,85,47)" fg:x="10610" fg:w="324"/><text x="94.3103%" y="255.50">co..</text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (293 samples, 2.60%)</title><rect x="94.3351%" y="229" width="2.5975%" height="15" fill="rgb(224,206,25)" fg:x="10641" fg:w="293"/><text x="94.5851%" y="239.50">&lt;c..</text></g><g><title>core::mem::replace (137 samples, 1.21%)</title><rect x="95.7181%" y="213" width="1.2145%" height="15" fill="rgb(243,201,19)" fg:x="10797" fg:w="137"/><text x="95.9681%" y="223.50"></text></g><g><title>core::ptr::write (12 samples, 0.11%)</title><rect x="96.8262%" y="197" width="0.1064%" height="15" fill="rgb(236,59,4)" fg:x="10922" fg:w="12"/><text x="97.0762%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (2 samples, 0.02%)</title><rect x="96.9592%" y="213" width="0.0177%" height="15" fill="rgb(254,179,45)" fg:x="10937" fg:w="2"/><text x="97.2092%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (10 samples, 0.09%)</title><rect x="96.9592%" y="229" width="0.0887%" height="15" fill="rgb(226,14,10)" fg:x="10937" fg:w="10"/><text x="97.2092%" y="239.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::is_null (8 samples, 0.07%)</title><rect x="96.9770%" y="213" width="0.0709%" height="15" fill="rgb(244,27,41)" fg:x="10939" fg:w="8"/><text x="97.2270%" y="223.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::guaranteed_eq (6 samples, 0.05%)</title><rect x="96.9947%" y="197" width="0.0532%" height="15" fill="rgb(235,35,32)" fg:x="10941" fg:w="6"/><text x="97.2447%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (17 samples, 0.15%)</title><rect x="96.9504%" y="245" width="0.1507%" height="15" fill="rgb(218,68,31)" fg:x="10936" fg:w="17"/><text x="97.2004%" y="255.50"></text></g><g><title>core::ptr::slice_from_raw_parts_mut (6 samples, 0.05%)</title><rect x="97.0479%" y="229" width="0.0532%" height="15" fill="rgb(207,120,37)" fg:x="10947" fg:w="6"/><text x="97.2979%" y="239.50"></text></g><g><title>core::ptr::metadata::from_raw_parts_mut (5 samples, 0.04%)</title><rect x="97.0567%" y="213" width="0.0443%" height="15" fill="rgb(227,98,0)" fg:x="10948" fg:w="5"/><text x="97.3067%" y="223.50"></text></g><g><title>_int_free (23 samples, 0.20%)</title><rect x="97.1986%" y="181" width="0.2039%" height="15" fill="rgb(207,7,3)" fg:x="10964" fg:w="23"/><text x="97.4486%" y="191.50"></text></g><g><title>tcache_put (2 samples, 0.02%)</title><rect x="97.3848%" y="165" width="0.0177%" height="15" fill="rgb(206,98,19)" fg:x="10985" fg:w="2"/><text x="97.6348%" y="175.50"></text></g><g><title>core::alloc::layout::Layout::align (2 samples, 0.02%)</title><rect x="97.4025%" y="181" width="0.0177%" height="15" fill="rgb(217,5,26)" fg:x="10987" fg:w="2"/><text x="97.6525%" y="191.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (31 samples, 0.27%)</title><rect x="97.1543%" y="213" width="0.2748%" height="15" fill="rgb(235,190,38)" fg:x="10959" fg:w="31"/><text x="97.4043%" y="223.50"></text></g><g><title>alloc::alloc::dealloc (27 samples, 0.24%)</title><rect x="97.1897%" y="197" width="0.2394%" height="15" fill="rgb(247,86,24)" fg:x="10963" fg:w="27"/><text x="97.4397%" y="207.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new_unchecked (2 samples, 0.02%)</title><rect x="97.5443%" y="165" width="0.0177%" height="15" fill="rgb(205,101,16)" fg:x="11003" fg:w="2"/><text x="97.7943%" y="175.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (8 samples, 0.07%)</title><rect x="97.5089%" y="197" width="0.0709%" height="15" fill="rgb(246,168,33)" fg:x="10999" fg:w="8"/><text x="97.7589%" y="207.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::convert::From&lt;core::ptr::unique::Unique&lt;T&gt;&gt;&gt;::from (5 samples, 0.04%)</title><rect x="97.5355%" y="181" width="0.0443%" height="15" fill="rgb(231,114,1)" fg:x="11002" fg:w="5"/><text x="97.7855%" y="191.50"></text></g><g><title>core::ptr::unique::Unique&lt;T&gt;::as_ptr (2 samples, 0.02%)</title><rect x="97.5621%" y="165" width="0.0177%" height="15" fill="rgb(207,184,53)" fg:x="11005" fg:w="2"/><text x="97.8121%" y="175.50"></text></g><g><title>candlelib_hydrocarbon::completer::completer::complete (9,594 samples, 85.05%)</title><rect x="12.5532%" y="277" width="85.0532%" height="15" fill="rgb(224,95,51)" fg:x="1416" fg:w="9594"/><text x="12.8032%" y="287.50">candlelib_hydrocarbon::completer::completer::complete</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;candlelib_hydrocarbon::completer::token::Token&gt;&gt; (76 samples, 0.67%)</title><rect x="96.9326%" y="261" width="0.6738%" height="15" fill="rgb(212,188,45)" fg:x="10934" fg:w="76"/><text x="97.1826%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;candlelib_hydrocarbon::completer::token::Token&gt;&gt; (57 samples, 0.51%)</title><rect x="97.1011%" y="245" width="0.5053%" height="15" fill="rgb(223,154,38)" fg:x="10953" fg:w="57"/><text x="97.3511%" y="255.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (56 samples, 0.50%)</title><rect x="97.1099%" y="229" width="0.4965%" height="15" fill="rgb(251,22,52)" fg:x="10954" fg:w="56"/><text x="97.3599%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (20 samples, 0.18%)</title><rect x="97.4291%" y="213" width="0.1773%" height="15" fill="rgb(229,209,22)" fg:x="10990" fg:w="20"/><text x="97.6791%" y="223.50"></text></g><g><title>core::ptr::unique::Unique&lt;T&gt;::cast (2 samples, 0.02%)</title><rect x="97.5887%" y="197" width="0.0177%" height="15" fill="rgb(234,138,34)" fg:x="11008" fg:w="2"/><text x="97.8387%" y="207.50"></text></g><g><title>&lt;candlelib_hydrocarbon::recognizer::reader::UTF8StringReader as candlelib_hydrocarbon::recognizer::reader::ByteReader&gt;::END (2 samples, 0.02%)</title><rect x="98.1472%" y="245" width="0.0177%" height="15" fill="rgb(212,95,11)" fg:x="11071" fg:w="2"/><text x="98.3972%" y="255.50"></text></g><g><title>core::cmp::max (16 samples, 0.14%)</title><rect x="98.1738%" y="245" width="0.1418%" height="15" fill="rgb(240,179,47)" fg:x="11074" fg:w="16"/><text x="98.4238%" y="255.50"></text></g><g><title>core::cmp::Ord::max (14 samples, 0.12%)</title><rect x="98.1915%" y="229" width="0.1241%" height="15" fill="rgb(240,163,11)" fg:x="11076" fg:w="14"/><text x="98.4415%" y="239.50"></text></g><g><title>core::cmp::max_by (14 samples, 0.12%)</title><rect x="98.1915%" y="213" width="0.1241%" height="15" fill="rgb(236,37,12)" fg:x="11076" fg:w="14"/><text x="98.4415%" y="223.50"></text></g><g><title>core::ops::function::FnOnce::call_once (7 samples, 0.06%)</title><rect x="98.2535%" y="197" width="0.0621%" height="15" fill="rgb(232,164,16)" fg:x="11083" fg:w="7"/><text x="98.5035%" y="207.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for i32&gt;::cmp (5 samples, 0.04%)</title><rect x="98.2713%" y="181" width="0.0443%" height="15" fill="rgb(244,205,15)" fg:x="11085" fg:w="5"/><text x="98.5213%" y="191.50"></text></g><g><title>core::cmp::min (9 samples, 0.08%)</title><rect x="98.3156%" y="245" width="0.0798%" height="15" fill="rgb(223,117,47)" fg:x="11090" fg:w="9"/><text x="98.5656%" y="255.50"></text></g><g><title>core::cmp::Ord::min (8 samples, 0.07%)</title><rect x="98.3245%" y="229" width="0.0709%" height="15" fill="rgb(244,107,35)" fg:x="11091" fg:w="8"/><text x="98.5745%" y="239.50"></text></g><g><title>core::cmp::min_by (8 samples, 0.07%)</title><rect x="98.3245%" y="213" width="0.0709%" height="15" fill="rgb(205,140,8)" fg:x="11091" fg:w="8"/><text x="98.5745%" y="223.50"></text></g><g><title>&lt;u32 as core::iter::range::Step&gt;::forward_unchecked (3 samples, 0.03%)</title><rect x="98.5993%" y="213" width="0.0266%" height="15" fill="rgb(228,84,46)" fg:x="11122" fg:w="3"/><text x="98.8493%" y="223.50"></text></g><g><title>core::num::&lt;impl u32&gt;::unchecked_add (3 samples, 0.03%)</title><rect x="98.5993%" y="197" width="0.0266%" height="15" fill="rgb(254,188,9)" fg:x="11122" fg:w="3"/><text x="98.8493%" y="207.50"></text></g><g><title>core::clone::impls::&lt;impl core::clone::Clone for u32&gt;::clone (4 samples, 0.04%)</title><rect x="98.6259%" y="213" width="0.0355%" height="15" fill="rgb(206,112,54)" fg:x="11125" fg:w="4"/><text x="98.8759%" y="223.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for u32&gt;::lt (6 samples, 0.05%)</title><rect x="98.6613%" y="213" width="0.0532%" height="15" fill="rgb(216,84,49)" fg:x="11129" fg:w="6"/><text x="98.9113%" y="223.50"></text></g><g><title>candlelib_hydrocarbon::recognizer::reader::UTF8StringReader::new (146 samples, 1.29%)</title><rect x="97.6064%" y="277" width="1.2943%" height="15" fill="rgb(214,194,35)" fg:x="11010" fg:w="146"/><text x="97.8564%" y="287.50"></text></g><g><title>&lt;candlelib_hydrocarbon::recognizer::reader::UTF8StringReader as candlelib_hydrocarbon::recognizer::reader::ByteReader&gt;::next (145 samples, 1.29%)</title><rect x="97.6152%" y="261" width="1.2855%" height="15" fill="rgb(249,28,3)" fg:x="11011" fg:w="145"/><text x="97.8652%" y="271.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (57 samples, 0.51%)</title><rect x="98.3954%" y="245" width="0.5053%" height="15" fill="rgb(222,56,52)" fg:x="11099" fg:w="57"/><text x="98.6454%" y="255.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (50 samples, 0.44%)</title><rect x="98.4574%" y="229" width="0.4433%" height="15" fill="rgb(245,217,50)" fg:x="11106" fg:w="50"/><text x="98.7074%" y="239.50"></text></g><g><title>core::mem::replace (21 samples, 0.19%)</title><rect x="98.7145%" y="213" width="0.1862%" height="15" fill="rgb(213,201,24)" fg:x="11135" fg:w="21"/><text x="98.9645%" y="223.50"></text></g><g><title>core::ptr::read (12 samples, 0.11%)</title><rect x="98.7943%" y="197" width="0.1064%" height="15" fill="rgb(248,116,28)" fg:x="11144" fg:w="12"/><text x="99.0443%" y="207.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (9 samples, 0.08%)</title><rect x="98.9007%" y="277" width="0.0798%" height="15" fill="rgb(219,72,43)" fg:x="11156" fg:w="9"/><text x="99.1507%" y="287.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (9 samples, 0.08%)</title><rect x="98.9007%" y="261" width="0.0798%" height="15" fill="rgb(209,138,14)" fg:x="11156" fg:w="9"/><text x="99.1507%" y="271.50"></text></g><g><title>core::mem::replace (5 samples, 0.04%)</title><rect x="98.9362%" y="245" width="0.0443%" height="15" fill="rgb(222,18,33)" fg:x="11160" fg:w="5"/><text x="99.1862%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (2 samples, 0.02%)</title><rect x="99.0780%" y="197" width="0.0177%" height="15" fill="rgb(213,199,7)" fg:x="11176" fg:w="2"/><text x="99.3280%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (12 samples, 0.11%)</title><rect x="99.0603%" y="213" width="0.1064%" height="15" fill="rgb(250,110,10)" fg:x="11174" fg:w="12"/><text x="99.3103%" y="223.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::is_null (8 samples, 0.07%)</title><rect x="99.0957%" y="197" width="0.0709%" height="15" fill="rgb(248,123,6)" fg:x="11178" fg:w="8"/><text x="99.3457%" y="207.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::guaranteed_eq (5 samples, 0.04%)</title><rect x="99.1223%" y="181" width="0.0443%" height="15" fill="rgb(206,91,31)" fg:x="11181" fg:w="5"/><text x="99.3723%" y="191.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (22 samples, 0.20%)</title><rect x="99.0337%" y="229" width="0.1950%" height="15" fill="rgb(211,154,13)" fg:x="11171" fg:w="22"/><text x="99.2837%" y="239.50"></text></g><g><title>core::ptr::slice_from_raw_parts_mut (7 samples, 0.06%)</title><rect x="99.1667%" y="213" width="0.0621%" height="15" fill="rgb(225,148,7)" fg:x="11186" fg:w="7"/><text x="99.4167%" y="223.50"></text></g><g><title>core::ptr::metadata::from_raw_parts_mut (4 samples, 0.04%)</title><rect x="99.1933%" y="197" width="0.0355%" height="15" fill="rgb(220,160,43)" fg:x="11189" fg:w="4"/><text x="99.4433%" y="207.50"></text></g><g><title>__GI___libc_free (2 samples, 0.02%)</title><rect x="99.3174%" y="165" width="0.0177%" height="15" fill="rgb(213,52,39)" fg:x="11203" fg:w="2"/><text x="99.5674%" y="175.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (13 samples, 0.12%)</title><rect x="99.2553%" y="197" width="0.1152%" height="15" fill="rgb(243,137,7)" fg:x="11196" fg:w="13"/><text x="99.5053%" y="207.50"></text></g><g><title>alloc::alloc::dealloc (10 samples, 0.09%)</title><rect x="99.2819%" y="181" width="0.0887%" height="15" fill="rgb(230,79,13)" fg:x="11199" fg:w="10"/><text x="99.5319%" y="191.50"></text></g><g><title>_int_free (4 samples, 0.04%)</title><rect x="99.3351%" y="165" width="0.0355%" height="15" fill="rgb(247,105,23)" fg:x="11205" fg:w="4"/><text x="99.5851%" y="175.50"></text></g><g><title>tcache_put (2 samples, 0.02%)</title><rect x="99.3528%" y="149" width="0.0177%" height="15" fill="rgb(223,179,41)" fg:x="11207" fg:w="2"/><text x="99.6028%" y="159.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new_unchecked (3 samples, 0.03%)</title><rect x="99.4238%" y="149" width="0.0266%" height="15" fill="rgb(218,9,34)" fg:x="11215" fg:w="3"/><text x="99.6738%" y="159.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (4 samples, 0.04%)</title><rect x="99.4238%" y="181" width="0.0355%" height="15" fill="rgb(222,106,8)" fg:x="11215" fg:w="4"/><text x="99.6738%" y="191.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::convert::From&lt;core::ptr::unique::Unique&lt;T&gt;&gt;&gt;::from (4 samples, 0.04%)</title><rect x="99.4238%" y="165" width="0.0355%" height="15" fill="rgb(211,220,0)" fg:x="11215" fg:w="4"/><text x="99.6738%" y="175.50"></text></g><g><title>core::alloc::layout::Layout::from_size_align_unchecked (4 samples, 0.04%)</title><rect x="99.4592%" y="181" width="0.0355%" height="15" fill="rgb(229,52,16)" fg:x="11219" fg:w="4"/><text x="99.7092%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::result::Result&lt;candlelib_hydrocarbon::completer::token::Token,alloc::string::String&gt;&gt; (64 samples, 0.57%)</title><rect x="98.9805%" y="277" width="0.5674%" height="15" fill="rgb(212,155,18)" fg:x="11165" fg:w="64"/><text x="99.2305%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (58 samples, 0.51%)</title><rect x="99.0337%" y="261" width="0.5142%" height="15" fill="rgb(242,21,14)" fg:x="11171" fg:w="58"/><text x="99.2837%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (58 samples, 0.51%)</title><rect x="99.0337%" y="245" width="0.5142%" height="15" fill="rgb(222,19,48)" fg:x="11171" fg:w="58"/><text x="99.2837%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (36 samples, 0.32%)</title><rect x="99.2287%" y="229" width="0.3191%" height="15" fill="rgb(232,45,27)" fg:x="11193" fg:w="36"/><text x="99.4787%" y="239.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (36 samples, 0.32%)</title><rect x="99.2287%" y="213" width="0.3191%" height="15" fill="rgb(249,103,42)" fg:x="11193" fg:w="36"/><text x="99.4787%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (20 samples, 0.18%)</title><rect x="99.3706%" y="197" width="0.1773%" height="15" fill="rgb(246,81,33)" fg:x="11209" fg:w="20"/><text x="99.6206%" y="207.50"></text></g><g><title>core::ptr::unique::Unique&lt;T&gt;::cast (5 samples, 0.04%)</title><rect x="99.5035%" y="181" width="0.0443%" height="15" fill="rgb(252,33,42)" fg:x="11224" fg:w="5"/><text x="99.7535%" y="191.50"></text></g><g><title>core::ptr::unique::Unique&lt;T&gt;::new_unchecked (2 samples, 0.02%)</title><rect x="99.5301%" y="165" width="0.0177%" height="15" fill="rgb(209,212,41)" fg:x="11227" fg:w="2"/><text x="99.7801%" y="175.50"></text></g><g><title>__libc_start_main (9,825 samples, 87.10%)</title><rect x="12.4734%" y="533" width="87.1011%" height="15" fill="rgb(207,154,6)" fg:x="1407" fg:w="9825"/><text x="12.7234%" y="543.50">__libc_start_main</text></g><g><title>main (9,825 samples, 87.10%)</title><rect x="12.4734%" y="517" width="87.1011%" height="15" fill="rgb(223,64,47)" fg:x="1407" fg:w="9825"/><text x="12.7234%" y="527.50">main</text></g><g><title>std::rt::lang_start (9,825 samples, 87.10%)</title><rect x="12.4734%" y="501" width="87.1011%" height="15" fill="rgb(211,161,38)" fg:x="1407" fg:w="9825"/><text x="12.7234%" y="511.50">std::rt::lang_start</text></g><g><title>std::rt::lang_start_internal (9,825 samples, 87.10%)</title><rect x="12.4734%" y="485" width="87.1011%" height="15" fill="rgb(219,138,40)" fg:x="1407" fg:w="9825"/><text x="12.7234%" y="495.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (9,825 samples, 87.10%)</title><rect x="12.4734%" y="469" width="87.1011%" height="15" fill="rgb(241,228,46)" fg:x="1407" fg:w="9825"/><text x="12.7234%" y="479.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (9,825 samples, 87.10%)</title><rect x="12.4734%" y="453" width="87.1011%" height="15" fill="rgb(223,209,38)" fg:x="1407" fg:w="9825"/><text x="12.7234%" y="463.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (9,825 samples, 87.10%)</title><rect x="12.4734%" y="437" width="87.1011%" height="15" fill="rgb(236,164,45)" fg:x="1407" fg:w="9825"/><text x="12.7234%" y="447.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (9,825 samples, 87.10%)</title><rect x="12.4734%" y="421" width="87.1011%" height="15" fill="rgb(231,15,5)" fg:x="1407" fg:w="9825"/><text x="12.7234%" y="431.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (9,825 samples, 87.10%)</title><rect x="12.4734%" y="405" width="87.1011%" height="15" fill="rgb(252,35,15)" fg:x="1407" fg:w="9825"/><text x="12.7234%" y="415.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (9,825 samples, 87.10%)</title><rect x="12.4734%" y="389" width="87.1011%" height="15" fill="rgb(248,181,18)" fg:x="1407" fg:w="9825"/><text x="12.7234%" y="399.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (9,825 samples, 87.10%)</title><rect x="12.4734%" y="373" width="87.1011%" height="15" fill="rgb(233,39,42)" fg:x="1407" fg:w="9825"/><text x="12.7234%" y="383.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (9,825 samples, 87.10%)</title><rect x="12.4734%" y="357" width="87.1011%" height="15" fill="rgb(238,110,33)" fg:x="1407" fg:w="9825"/><text x="12.7234%" y="367.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (9,825 samples, 87.10%)</title><rect x="12.4734%" y="341" width="87.1011%" height="15" fill="rgb(233,195,10)" fg:x="1407" fg:w="9825"/><text x="12.7234%" y="351.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (9,825 samples, 87.10%)</title><rect x="12.4734%" y="325" width="87.1011%" height="15" fill="rgb(254,105,3)" fg:x="1407" fg:w="9825"/><text x="12.7234%" y="335.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (9,825 samples, 87.10%)</title><rect x="12.4734%" y="309" width="87.1011%" height="15" fill="rgb(221,225,9)" fg:x="1407" fg:w="9825"/><text x="12.7234%" y="319.50">core::ops::function::FnOnce::call_once</text></g><g><title>sandbox::main (9,825 samples, 87.10%)</title><rect x="12.4734%" y="293" width="87.1011%" height="15" fill="rgb(224,227,45)" fg:x="1407" fg:w="9825"/><text x="12.7234%" y="303.50">sandbox::main</text></g><g><title>core::str::&lt;impl str&gt;::as_bytes (3 samples, 0.03%)</title><rect x="99.5479%" y="277" width="0.0266%" height="15" fill="rgb(229,198,43)" fg:x="11229" fg:w="3"/><text x="99.7979%" y="287.50"></text></g><g><title>_start (9,833 samples, 87.17%)</title><rect x="12.4202%" y="549" width="87.1720%" height="15" fill="rgb(206,209,35)" fg:x="1401" fg:w="9833"/><text x="12.6702%" y="559.50">_start</text></g><g><title>_dl_start (2 samples, 0.02%)</title><rect x="99.5745%" y="533" width="0.0177%" height="15" fill="rgb(245,195,53)" fg:x="11232" fg:w="2"/><text x="99.8245%" y="543.50"></text></g><g><title>_dl_start_final (2 samples, 0.02%)</title><rect x="99.5745%" y="517" width="0.0177%" height="15" fill="rgb(240,92,26)" fg:x="11232" fg:w="2"/><text x="99.8245%" y="527.50"></text></g><g><title>_dl_sysdep_start (2 samples, 0.02%)</title><rect x="99.5745%" y="501" width="0.0177%" height="15" fill="rgb(207,40,23)" fg:x="11232" fg:w="2"/><text x="99.8245%" y="511.50"></text></g><g><title>dl_main (2 samples, 0.02%)</title><rect x="99.5745%" y="485" width="0.0177%" height="15" fill="rgb(223,111,35)" fg:x="11232" fg:w="2"/><text x="99.8245%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (2 samples, 0.02%)</title><rect x="99.6011%" y="549" width="0.0177%" height="15" fill="rgb(229,147,28)" fg:x="11235" fg:w="2"/><text x="99.8511%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (2 samples, 0.02%)</title><rect x="99.6188%" y="549" width="0.0177%" height="15" fill="rgb(211,29,28)" fg:x="11237" fg:w="2"/><text x="99.8688%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (8 samples, 0.07%)</title><rect x="99.6365%" y="549" width="0.0709%" height="15" fill="rgb(228,72,33)" fg:x="11239" fg:w="8"/><text x="99.8865%" y="559.50"></text></g><g><title>candlelib_hydrocarbon::completer::token::Token::new (2 samples, 0.02%)</title><rect x="99.7074%" y="549" width="0.0177%" height="15" fill="rgb(205,214,31)" fg:x="11247" fg:w="2"/><text x="99.9574%" y="559.50"></text></g><g><title>candlelib_hydrocarbon::recognizer::iterator::StateIterator&lt;T&gt;::nextAction (2 samples, 0.02%)</title><rect x="99.7252%" y="549" width="0.0177%" height="15" fill="rgb(224,111,15)" fg:x="11249" fg:w="2"/><text x="99.9752%" y="559.50"></text></g><g><title>candlelib_hydrocarbon::recognizer::iterator::StateIterator&lt;T&gt;::set_token (4 samples, 0.04%)</title><rect x="99.7429%" y="549" width="0.0355%" height="15" fill="rgb(253,21,26)" fg:x="11251" fg:w="4"/><text x="99.9929%" y="559.50"></text></g><g><title>core::alloc::layout::Layout::align (2 samples, 0.02%)</title><rect x="99.7784%" y="549" width="0.0177%" height="15" fill="rgb(245,139,43)" fg:x="11255" fg:w="2"/><text x="100.0284%" y="559.50"></text></g><g><title>core::alloc::layout::Layout::size (4 samples, 0.04%)</title><rect x="99.8050%" y="549" width="0.0355%" height="15" fill="rgb(252,170,7)" fg:x="11258" fg:w="4"/><text x="100.0550%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;candlelib_hydrocarbon::completer::token::Token&gt;&gt; (3 samples, 0.03%)</title><rect x="99.8582%" y="549" width="0.0266%" height="15" fill="rgb(231,118,14)" fg:x="11264" fg:w="3"/><text x="100.1082%" y="559.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::guaranteed_eq (5 samples, 0.04%)</title><rect x="99.8848%" y="549" width="0.0443%" height="15" fill="rgb(238,83,0)" fg:x="11267" fg:w="5"/><text x="100.1348%" y="559.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ptr (2 samples, 0.02%)</title><rect x="99.9291%" y="549" width="0.0177%" height="15" fill="rgb(221,39,39)" fg:x="11272" fg:w="2"/><text x="100.1791%" y="559.50"></text></g><g><title>core::ptr::read (3 samples, 0.03%)</title><rect x="99.9468%" y="549" width="0.0266%" height="15" fill="rgb(222,119,46)" fg:x="11274" fg:w="3"/><text x="100.1968%" y="559.50"></text></g><g><title>all (11,280 samples, 100%)</title><rect x="0.0000%" y="581" width="100.0000%" height="15" fill="rgb(222,165,49)" fg:x="0" fg:w="11280"/><text x="0.2500%" y="591.50"></text></g><g><title>sandbox (11,280 samples, 100.00%)</title><rect x="0.0000%" y="565" width="100.0000%" height="15" fill="rgb(219,113,52)" fg:x="0" fg:w="11280"/><text x="0.2500%" y="575.50">sandbox</text></g><g><title>str.0 (2 samples, 0.02%)</title><rect x="99.9823%" y="549" width="0.0177%" height="15" fill="rgb(214,7,15)" fg:x="11278" fg:w="2"/><text x="100.2323%" y="559.50"></text></g></svg></svg>