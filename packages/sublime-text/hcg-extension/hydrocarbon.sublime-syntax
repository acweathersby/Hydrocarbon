%YAML 1.2
---
# See http://www.sublimetext.com/docs/3/syntax.html
name: HydroCarbonGrammar
file_extensions: [ hcg ]
scope: source.hydrocarbon_grammar

contexts:
  # The prototype context is prepended to all contexts but those setting
  # meta_include_prototype: false.
  prototype:
    - include: comments

  main:
    # The main context is the initial starting point of our syntax.
    # Include other contexts from here (or specify them directly).
    - include: preamble
    - include: production

  preamble:
    - match: '(@IMPORT)\s*([\w-_\/\\.\@]+)\s*(AS|as)'
      captures:
        1: preamble.header
        3: preamble.header

    - match: '(@\w+)'
      captures:
        1: preamble.header

      push:
        - meta_scope: preamble.symbol
        - match: $\n?
          pop: true

  production:

    - include: production_check

    - match: '↦'
      scope : function
      push : function_syntax

  production_check:

    - match: '(<>)\s*(\w+)\s*(→)'
      scope: production
      push: production_syntax
      captures:
        1: production.label
        2: production.label

    - match: '(\+\>)\s*(\w+\:\:)(\w+)\s*(→)'

      scope: production
      push: production_syntax
      captures:
        1: production.label
        2: preamble.header
        4: production.symbol



  production_syntax:

    - include: production_check

    - match: '(\()\s*(ERR|IGN|EXC|RED|RES)'
      captures:
        1: production.meta.bracket
        2: production.meta.title
      push:
        - meta_content_scope: production.meta
        - match: '(\))'
          captures:
            1: production.meta.bracket
          pop: true
        - include: production_syntax

    - match: '(\((?![\*\+]))'
      captures:
        1: production.group.bracket
      push: group

    - match: '([\w]+\:\:)([\w]+)'
      captures:
        1: preamble.header
        3: production.non_terminal

    - match: '(\\[^\s\w]+)'
      scope: production.terminal.symbol

    - match: '([\[\]])'
      scope: production.brackets

    - match: '(\│)'
      scope: production.symbol

    - match: '(\%\%[0-9]+)'
      scope: production.precedence
      pop: true

    - match: '↦'
      push : function_syntax

    - match: '([^\w]|)'
      scope: production.terminal.symbol

    - match: '(\τ[a-zA-Z\_\-]*|\θ[a-zA-Z\_\-]*|ɛ)'
      scope: production.terminal

    - match: '(\w)'
      scope: production.non_terminal

  function_syntax:
    - match: '([a-zA-Z]+)(\=\>)([a-zA-Z]+)'
      captures:
        1: function.name
        2: comment
        3: function.name
      pop: true

    - match: '(\^[a-zA-Z-_]+)'
      captures:
        1: function.name
      pop: true

    - match: '(cstr|c|r|return)\s+\^[a-zA-Z\_\#\$]+'
      scope: function.name
      pop: true

    - match: '((^)?[a-zA-Z\_\#\$]*\s*\{)'
      scope: function.name

    - match: '(?:\│)'
      scope: production.symbol
      pop: true

    - match: '(\{)'
      push: Packages/JavaScript/JavaScript.sublime-syntax

    - match: '(\})'
      pop: true

    - include: Packages/JavaScript/JavaScript.sublime-syntax

    - include: production_check

  inside_string:
    - meta_include_prototype: false
    - meta_scope: string.quoted.double.example-c
    - match: '\.'
      scope: constant.character.escape.example-c
    - match: '"'
      scope: punctuation.definition.string.end.example-c
      pop: true

  comments:
    # Comments begin with a '//' and finish at the end of the line.
    - match: '#'
      scope: punctuation.definition.comment.example-c
      push:
        # This is an anonymous context push for brevity.
        - meta_scope: comment.line.double-slash.example-c
        - match: $\n?
          pop: true

  group:

    - meta_content_scope: production.group


    - match: '(\))'
      captures:
         1: production.group.bracket
      pop: true

    - include: production_syntax




