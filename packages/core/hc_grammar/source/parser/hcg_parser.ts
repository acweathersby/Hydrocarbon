//@ts-nocheck
/* 
 * Copyright (C) 2021 Anthony Weathersby - The Hydrocarbon Parser Compiler
 * see /source/typescript/hydrocarbon.ts for full copyright and warranty 
 * disclaimer notice.
 */
import {
    ParserFramework,
    KernelParserCore,
    fillByteBufferWithUTF8FromString
} from "@candlelib/hydrocarbon";


const {
    token_production,
    init_table,
    KernelStateIterator,
    run,
    compare
} = KernelParserCore;

const token_sequence_lookup = new Uint8Array([
    47, 42, 47, 64, 73, 71, 78, 79, 82, 69, 103, 111, 116, 111, 95, 116, 111, 107, 101, 110, 92, 36, 101,
    109, 112, 116, 121, 58, 58, 35, 60, 62, 33, 43, 62, 124, 91, 93, 94, 63, 61, 40, 69, 88, 67, 41, 123,
    125, 61, 62, 102, 111, 114, 107, 45, 115, 121, 109, 98, 111, 108, 115, 58, 44, 97, 115, 115, 101,
    114, 116, 65, 83, 114, 101, 99, 111, 118, 101, 114, 111, 110, 112, 114, 111, 100, 98, 97, 99, 107,
    117, 110, 116, 105, 108, 105, 100, 110, 111, 116, 104, 105, 110, 103, 119, 105, 116, 104, 105,
    110, 99, 111, 110, 115, 117, 109, 101, 120, 112, 101, 99, 116, 101, 100, 47, 47, 64, 73, 77, 80,
    79, 82, 84, 103, 58, 116, 104, 101, 110, 36, 101, 111, 102, 60, 61, 40, 73, 71, 78, 102, 97, 105,
    108, 115, 107, 105, 112, 112, 101, 100, 114, 101, 116, 117, 114, 110, 112, 97, 115, 115, 101, 114,
    104, 64, 69, 88, 80, 79, 82, 84, 116, 107, 58, 116, 58, 60, 91, 40, 82, 83, 84, 40, 42, 40, 43, 102,
    58, 115, 99, 111, 112, 101, 115, 116, 97, 116, 101, 115, 99, 97, 110, 115, 101, 116, 114, 101, 100,
    117, 99, 101, 114, 101, 112, 101, 97, 116, 112, 101, 101, 107
]);

const token_lookup = new Uint32Array([
    663751552, 786432, 0, 384, 0, 0, 386, 0, 0, 59771776, 0, 0, 603980160, 786432, 0, 896, 0, 0, 1452,
    0, 4194304, 0, 0, 4194304, 428, 0, 4194304, 1408, 0, 4194304, 384, 0, 4194304, 386, 0, 4194304,
    663751554, 786432, 0, 2432, 0, 0, 1048960, 0, 0, 8388992, 0, 0, 50332544, 0, 0, 496036, 0, 0,
    256, 0, 0, 496038, 0, 0, 4480, 0, 0, 3876041638, 790527, 0, 33188, 0, 0, 65920, 0, 0, 131456, 0,
    0, 262528, 0, 0, 8576, 0, 0, 16776, 0, 0, 16768, 0, 0, 16810, 0, 0, 392, 0, 0, 16426, 0, 0, 33152,
    0, 0, 424, 0, 0, 3885480870, 790527, 0, 420, 0, 0, 128, 0, 0, 428, 0, 0, 4151292838, 42733567,
    65536, 4150768550, 42733567, 65536, 532864, 0, 0, 524672, 0, 0, 396, 0, 0, 6291840, 0, 0, 2097536,
    0, 0, 4194688, 0, 0, 2005928834, 42745920, 65536, 16777600, 0, 0, 1737493378, 786496, 0, 33554816,
    0, 0, 388, 0, 0, 1454, 0, 0, 416, 0, 0, 1408, 0, 0, 603980160, 786432, 4194304, 603980160, 0, 0,
    654312322, 786432, 0, 384, 262144, 0, 384, 524288, 0, 67109248, 0, 0, 134226304, 0, 0, 134218112,
    0, 0, 268435840, 0, 0, 2936517542, 794392, 0, 2332537764, 7960, 0, 536871296, 0, 0, 1728054146,
    786496, 0, 2282205604, 7960, 0, 3876041638, 790361, 0, 3876041638, 790363, 0, 496036, 64,
    0, 384, 64, 0, 3876041638, 790360, 0, 2147987876, 7960, 0, 2147987876, 3864, 0, 384, 4096,
    0, 2147484032, 0, 0, 384, 1, 0, 504228, 280, 0, 384, 3584, 0, 384, 8, 0, 384, 16, 0, 384, 256, 0,
    384, 512, 0, 384, 1024, 0, 384, 2048, 0, 496038, 64, 0, 384, 139264, 0, 384, 8192, 0, 384, 81922,
    0, 384, 16384, 0, 430, 16384, 0, 384, 32768, 0, 1996489602, 42729536, 65536, 384, 2, 0, 384,
    65536, 0, 384, 131072, 0, 8578, 155650, 262144, 430, 49152, 0, 428, 49152, 0, 384, 524288, 4194304,
    384, 3145728, 4194304, 384, 1048576, 4194304, 8576, 0, 4194304, 384, 1, 4194304, 384, 3732930560,
    4252784, 268435840, 8388608, 4259840, 384, 8388608, 4194304, 268435840, 0, 4259840, 384,
    0, 4259840, 268435840, 0, 4194304, 384, 2097152, 4194304, 16808, 4194304, 4194304, 392,
    0, 4194304, 16810, 4194304, 4194304, 416, 0, 4194304, 16768, 0, 4194304, 384, 4194304, 4194304,
    16426, 4194304, 4194304, 268435842, 8388608, 4259840, 384, 0, 4243456, 384, 3724541952,
    4203632, 384, 16777216, 4194304, 2147484032, 0, 4194304, 384, 256, 4194304, 384, 64, 4194304,
    8608, 0, 4194304, 386, 256, 4194304, 384, 67108864, 4194304, 268435842, 8388672, 4259840,
    384, 3623878656, 4195440, 268435842, 41943104, 4259840, 384, 33554432, 4194304, 384, 0,
    4726784, 384, 0, 4202496, 384, 33554432, 4718592, 384, 134217728, 4194304, 416, 262144,
    4194304, 384, 262144, 4194304, 384, 268435456, 4194304, 384, 16777216, 4194820, 384, 536870912,
    4194304, 8608, 0, 0, 384, 0, 4194308, 384, 0, 4194312, 496036, 0, 4194304, 384, 0, 4194816,
    384, 1073741824, 4194304, 384, 0, 4198400, 384, 2147483648, 4194304, 384, 0, 4194307, 384,
    0, 4194305, 384, 0, 4194306, 384, 0, 4194320, 384, 0, 4194336, 384, 0, 4194368, 384, 0, 4194432,
    384, 0, 4194560, 384, 0, 4195328, 268435842, 41943104, 4261888, 384, 0, 4196352, 8576, 2097152,
    4194304, 268435842, 41943104, 5308416, 268435842, 41943360, 6356992, 384, 0, 4210688,
    268435842, 8388608, 4308992, 384, 0, 4227072, 268435842, 0, 4259840, 386, 3732930560, 4252784,
    384, 0, 4325376, 268435842, 0, 6356992, 384, 0, 6291456, 386, 8388608, 4259840, 386, 0, 4259840,
    1454, 0, 4194304, 3876041646, 790527, 0, 4144477102, 42733567, 65536, 4144477094, 42733567,
    65536, 430, 0, 0, 6291854, 0, 0, 2147987878, 3865, 0, 3876041646, 790361, 0, 384, 8388608,
    0, 268435842, 25165824, 4259872, 268435842, 25165824, 65536, 384, 0, 49152, 268435842,
    8388608, 114688, 8610, 1, 0, 8608, 1, 4194304, 384, 3623878656, 1136, 268435842, 3632267328,
    4793456, 268435842, 41943104, 65536, 384, 0, 8192, 268435842, 8388672, 4792320, 384, 33554432,
    0, 384, 0, 524288, 384, 0, 4096, 268939686, 41943105, 65536, 386, 64, 1048576, 386, 64, 5242880,
    418, 1, 0, 416, 1, 4194304, 496038, 1, 0, 496038, 1, 4194304, 496036, 1, 4194304, 384, 0, 2097152,
    268435842, 0, 65536, 16392, 0, 0, 16424, 4194304, 0, 512, 0, 0
]);

const states_buffer = new Uint32Array([
    0, 4026531840, 2164260864, 4026531841, 2147483648, 603979787, 603979785, 603979788,
    0, 805306368, 0, 0, 2852126728, 1, 196618, 2147483672, 2168455177, 2172657690, 2172649483,
    2147483668, 2147491869, 2147483673, 2147483671, 2147491890, 2147491891, 2147483649,
    603979825, 603979810, 0, 2147483649, 603979825, 603979819, 0, 4026531840, 603979813,
    603979876, 0, 603979816, 603980868, 0, 1073742096, 805306369, 0, 603979822, 603980868,
    0, 1073742344, 805306369, 0, 0, 2852192261, 327681, 1, 2147483657, 2147483650, 268435456,
    603979875, 603979836, 0, 4026531840, 2852126724, 393223, 131078, 2147483656, 2147483653,
    2160066562, 2151677955, 2147483655, 2147487754, 603979850, 0, 603979864, 0, 4026531840,
    603979853, 603983832, 0, 2852192259, 589834, 1, 2147483658, 268435456, 603979861, 0, 4026531840,
    1073741848, 805306370, 0, 2852192259, 589834, 1, 2147483658, 268435456, 603979872, 0,
    4026531840, 1073741840, 805306370, 0, 0, 2147483651, 603979908, 603979881, 603979924,
    0, 1073742600, 805306371, 0, 2852126723, 1, 196618, 2147483672, 2168455177, 2172653594,
    2172649483, 2147483668, 2147487773, 2147483673, 2147483671, 2147487794, 2147487795,
    603979902, 0, 4026531840, 4026531840, 0, 603979905, 603979924, 0, 1073742864, 805306371,
    0, 3087007886, 2499805187, 0, 65539, 4026531840, 0, 0, 603979908, 603979884, 0, 2499805187,
    0, 65537, 4026531840, 0, 0, 2852126736, 196609, 131078, 2164269076, 2164285449, 2147500055,
    2143289355, 2147508248, 2147508249, 2147483652, 603979964, 603979950, 0, 2147483652,
    603979964, 603979955, 0, 2147483652, 603979964, 603979958, 0, 2147483652, 603979964,
    603979961, 0, 4026531840, 603979953, 603979965, 0, 805306372, 0, 603979953, 603980574,
    0, 603979953, 603980633, 0, 603979953, 603980684, 0, 0, 2852192261, 851969, 1, 2147483659,
    2147483653, 268435456, 603979989, 603979975, 0, 4026531840, 603979978, 603979990, 0,
    2852192259, 65554, 1, 2147483655, 268435456, 603979986, 0, 4026531840, 1073743128, 805306373,
    0, 0, 2147483654, 603980020, 603979995, 603980036, 0, 1073742600, 805306374, 0, 2852126723,
    1114130, 196616, 2147483664, 2147483665, 2164260866, 2147483663, 2147483660, 2147483653,
    2147483666, 2130710535, 603980014, 0, 4026531840, 4026531840, 0, 603980017, 603980036,
    0, 1073742864, 805306374, 0, 3087007998, 2499805190, 0, 65539, 4026531840, 0, 0, 603980020,
    603979998, 0, 2499805190, 0, 65537, 4026531840, 0, 0, 2147483655, 603980043, 603980041,
    603980044, 0, 805306375, 0, 0, 2852126740, 1114113, 131079, 2164260876, 2164269061, 2164269058,
    2147491855, 2147500048, 2147508241, 2147516434, 2147483656, 603980093, 603980076, 0,
    2147483656, 603980093, 603980081, 0, 2147483656, 603980093, 603980084, 0, 2147483656,
    603980093, 603980087, 0, 2147483656, 603980093, 603980090, 0, 4026531840, 0, 603980079,
    603980094, 0, 805306376, 0, 603980079, 603980205, 0, 603980079, 603980414, 0, 603980079,
    603980434, 0, 603980079, 603980448, 0, 0, 2852192261, 1310721, 1, 2147483660, 2147483657,
    268435456, 603980115, 603980104, 0, 4026531840, 2852192259, 1703937, 1, 2147483661, 268435456,
    603980112, 0, 4026531840, 1073743376, 805306377, 0, 0, 2852126728, 1769473, 65538, 2147483662,
    2147491843, 2147483658, 603980189, 603980130, 0, 2147483658, 603980189, 603980140, 0,
    4026531840, 2852192259, 1835009, 1, 2147483662, 268435456, 603980138, 0, 4026531840,
    805306378, 0, 2852192259, 1966081, 1, 2147483651, 268435456, 603980138, 0, 4026531840,
    2852126726, 2031616, 65539, 2147487758, 2151677955, 2147491845, 603980162, 0, 603980173,
    0, 603980181, 0, 4026531840, 0, 2852192259, 2031616, 1, 2147483651, 268435456, 603980170,
    0, 4026531840, 1073743632, 805306378, 0, 2852192259, 2031616, 1, 2147483662, 268435456,
    603980170, 0, 4026531840, 2852192259, 2031616, 1, 2147483653, 268435456, 603980170, 0,
    4026531840, 3087008167, 2499805194, 0, 65539, 4026531840, 0, 0, 603980189, 603980148,
    0, 2499805194, 0, 65537, 4026531840, 0, 0, 2852126728, 1441793, 65539, 2147491842, 2151686149,
    2147483663, 2147483659, 603980380, 603980221, 0, 2147483659, 603980380, 603980374, 0,
    4026531840, 0, 2852192259, 2097153, 1, 2147483663, 268435456, 603980229, 0, 4026531840,
    603980232, 603983986, 0, 2852126724, 1376256, 327712, 2147487776, 2202013697, 2222985218,
    2147487779, 2147487780, 2214596613, 2147487782, 2210398215, 2210402312, 2222985225,
    2147487786, 2147487787, 2147487756, 2147487757, 2147487777, 2147487759, 2147487760,
    2147487761, 2189430802, 2147487795, 2147487778, 2147487781, 2147487783, 2147487784,
    2147487768, 2147487769, 2147487770, 2147487785, 2147487794, 2147487773, 2147487774,
    2147487775, 603980272, 0, 603980331, 0, 4026531840, 2583756807, 65554, 65538, 4026531840,
    0, 603980280, 0, 0, 2785017860, 2228242, 327714, 2147483680, 2202009601, 2227175426, 2147483683,
    2147483684, 2218786821, 2147483686, 2231369735, 2147483688, 2227175433, 2147483690,
    2235568139, 2147483660, 2147483661, 2147483681, 2147483663, 2147483664, 2147483665,
    2210398226, 2147483699, 2147487764, 2147483682, 2147483685, 2147487767, 2147483672,
    2147483673, 2147483674, 2147483687, 2147483689, 2147483677, 2147483678, 2147483679,
    2147483691, 2147483698, 603980322, 0, 603980328, 0, 4026531840, 603980325, 603980381,
    0, 1073743896, 805306379, 0, 1073743888, 805306379, 0, 2852126724, 1376256, 262175, 2239762448,
    2210402305, 2210402306, 2260733987, 2147487780, 2231373829, 2147487782, 2147487783,
    2189426696, 2189430793, 2222985242, 2147487787, 2147487756, 2176847885, 2147487774,
    2172653583, 2176847889, 2176847890, 2181042200, 2181042201, 2147487773, 2147487775,
    2147487776, 2147487777, 2168459298, 2147487781, 2147487784, 2147487785, 2147487786,
    2147487794, 2147487795, 603980371, 0, 603980328, 0, 4026531840, 0, 603980325, 603980381,
    0, 603980377, 603984238, 0, 1073744136, 805306379, 0, 0, 2852126728, 65536, 65538, 2147483656,
    2147491847, 2147483660, 603980413, 603980395, 0, 2147483660, 603980413, 603980405, 0,
    4026531840, 2852192259, 65572, 1, 2147483656, 268435456, 603980403, 0, 4026531840, 805306380,
    0, 2852192259, 65554, 1, 2147483655, 268435456, 603980403, 0, 4026531840, 0, 2852192261,
    1507329, 1, 2147483664, 2147483661, 268435456, 603980433, 603980424, 0, 4026531840, 603980427,
    603984434, 0, 603980430, 603980381, 0, 1073744408, 805306381, 0, 0, 2852192261, 1572865,
    1, 2147483665, 2147483662, 268435456, 603980447, 603980444, 0, 4026531840, 1073744648,
    805306382, 0, 0, 2852192261, 1638401, 1, 2147483666, 2147483663, 268435456, 603980464,
    603980458, 0, 4026531840, 603980461, 603980465, 0, 1073744912, 805306383, 0, 0, 2852192260,
    1703937, 1, 2147483661, 2147483664, 603980529, 603980475, 0, 4026531840, 0, 2785017860,
    2490386, 327718, 2147483680, 2202009601, 2222981122, 2147483683, 2147483684, 2239758341,
    2147483686, 2252341255, 2147483688, 2248146953, 2147483690, 2147483691, 2147483660,
    2147483661, 2147483681, 2147483663, 2235564048, 2147483665, 2214592530, 2214596627,
    2147483682, 2147483669, 2147483670, 2147483703, 2147483672, 2193621017, 2147483674,
    2147483685, 2147483676, 2147483677, 2147483678, 2147483679, 2147483687, 2147483689,
    2147483698, 2147483699, 2147483705, 2147483728, 603980521, 0, 603980526, 0, 4026531840,
    603980524, 603980530, 0, 805306384, 0, 603980524, 603980544, 0, 0, 2852192261, 1703937,
    1, 2147483661, 2147483665, 268435456, 603980543, 603980540, 0, 4026531840, 1073745160,
    805306385, 0, 0, 2852192261, 1703937, 1, 2147483661, 2147483666, 268435456, 603980573,
    603980554, 0, 4026531840, 2852192259, 2686977, 1, 2147483667, 268435456, 603980562, 0,
    4026531840, 2852192259, 1703937, 1, 2147483661, 268435456, 603980570, 0, 4026531840,
    1073745432, 805306386, 0, 0, 2852192261, 917505, 1, 2147483668, 2147483667, 268435456,
    603980619, 603980584, 0, 4026531840, 603980587, 603984540, 0, 2583691285, 2818049, 131074,
    4026531840, 0, 603980597, 0, 603980611, 0, 0, 2852192259, 2883585, 1, 2147483669, 268435456,
    603980605, 0, 4026531840, 603980608, 603980620, 0, 1073745696, 805306387, 0, 2852192259,
    2949121, 1, 2147483670, 268435456, 603980605, 0, 4026531840, 0, 2852192261, 1703937, 1,
    2147483661, 2147483668, 268435456, 603980632, 603980630, 0, 4026531840, 805306388, 0,
    0, 2852192261, 983041, 1, 2147483671, 2147483669, 268435456, 603980683, 603980643, 0,
    4026531840, 603980646, 603980465, 0, 2583691285, 2818049, 131074, 4026531840, 0, 603980656,
    0, 603980675, 0, 0, 2852192259, 2883585, 1, 2147483669, 268435456, 603980664, 0, 4026531840,
    2852192259, 1966081, 1, 2147483651, 268435456, 603980672, 0, 4026531840, 1073745952,
    805306389, 0, 2852192259, 2949121, 1, 2147483670, 268435456, 603980664, 0, 4026531840,
    0, 2852126732, 1048577, 65539, 2147483672, 2151694345, 2147491865, 2147483670, 603980715,
    603980704, 0, 2147483670, 603980715, 603980709, 0, 2147483670, 603980715, 603980712,
    0, 4026531840, 0, 603980707, 603980716, 0, 805306390, 0, 603980707, 603980823, 0, 603980707,
    603980843, 0, 0, 2852192261, 3080193, 1, 2147483672, 2147483671, 268435456, 603980735,
    603980726, 0, 4026531840, 603980729, 603984622, 0, 603980732, 603980795, 0, 1073741848,
    805306391, 0, 0, 2852126736, 2424868, 131076, 2147508232, 2147500037, 2147483650, 2147491843,
    2147483672, 603980794, 603980760, 0, 2147483672, 603980794, 603980770, 0, 2147483672,
    603980794, 603980778, 0, 2147483672, 603980794, 603980786, 0, 4026531840, 2852192259,
    3276801, 1, 2147483650, 268435456, 603980768, 0, 4026531840, 805306392, 0, 2852192259,
    1966081, 1, 2147483651, 268435456, 603980768, 0, 4026531840, 2852192259, 3407873, 1, 2147483653,
    268435456, 603980768, 0, 4026531840, 2852192259, 65572, 1, 2147483656, 268435456, 603980768,
    0, 4026531840, 0, 2852126728, 131090, 65538, 2147483655, 2143297537, 2147483673, 603980822,
    603980809, 0, 2147483673, 603980822, 603980819, 0, 4026531840, 2852192259, 65554, 1, 2147483655,
    268435457, 603980817, 0, 4026531840, 805306393, 0, 268435457, 603980817, 0, 0, 2852192261,
    3211265, 1, 2147483673, 2147483674, 268435456, 603980842, 603980833, 0, 4026531840, 603980836,
    603984622, 0, 603980839, 603980795, 0, 1073741848, 805306394, 0, 0, 2852192261, 327681,
    1, 2147483657, 2147483675, 268435456, 603980867, 603980853, 0, 4026531840, 603980856,
    603984666, 0, 2852192259, 3473409, 1, 2147483658, 268435456, 603980864, 0, 4026531840,
    1073741848, 805306395, 0, 0, 2852126732, 3538954, 131076, 2147491890, 2147483677, 2139095066,
    2147500083, 2147483676, 603980952, 603980888, 0, 2147483676, 603980952, 603980894, 0,
    2147483676, 603980952, 603980900, 0, 4026531840, 603980891, 603980968, 0, 1073746184,
    805306396, 0, 603980897, 603982375, 0, 1073746440, 805306396, 0, 603980903, 603982406,
    0, 1073746696, 805306396, 0, 2852126729, 3670017, 196616, 2147495960, 2160082945, 2168455194,
    2147491891, 2155884553, 2147483677, 2147495961, 2147487794, 603980928, 0, 603980934,
    0, 603980940, 0, 603980946, 0, 4026531840, 4026531840, 0, 603980931, 603980968, 0, 1073746960,
    805306396, 0, 603980937, 603982375, 0, 1073747216, 805306396, 0, 603980943, 603982406,
    0, 1073747472, 805306396, 0, 603980949, 603980684, 0, 1073747728, 805306396, 0, 3087008930,
    2499805212, 0, 65539, 4026531840, 0, 0, 603980952, 603980906, 0, 2499805212, 0, 65537, 4026531840,
    0, 0, 2852126728, 3604481, 65538, 2147483674, 2147491869, 2147483677, 603981141, 603980982,
    0, 2147483677, 603981141, 603981116, 0, 4026531840, 2852192259, 3866625, 1, 2147483674,
    268435456, 603980990, 0, 4026531840, 2852126724, 3932161, 65538, 2147483675, 2143293453,
    603981000, 0, 603981062, 0, 4026531840, 2852192259, 3997697, 1, 2147483675, 268435456,
    603981008, 0, 4026531840, 603981011, 603980465, 0, 2852192259, 4063233, 1, 2147483676,
    268435456, 603981019, 0, 4026531840, 2852126724, 4128769, 262169, 2147483664, 2168459265,
    2168455170, 2235564067, 2147483684, 2147483653, 2147483665, 2214592530, 2189426712,
    2168455177, 2189430810, 2189426715, 2189426700, 2160066573, 2168455193, 2155872271,
    2147487773, 2147483679, 2147483688, 2147483689, 2147483690, 2147483691, 2147483692,
    2147487794, 2147487795, 603981053, 0, 603981059, 0, 4026531840, 0, 603981056, 603981142,
    0, 1073748008, 805306397, 0, 1073748768, 805306397, 0, 603981065, 603980465, 0, 2852192259,
    4063233, 1, 2147483676, 268435456, 603981073, 0, 4026531840, 2852126724, 4128769, 262169,
    2147483664, 2168459265, 2168455170, 2235564067, 2147483684, 2147483653, 2147483665,
    2214592530, 2189426712, 2168455177, 2189430810, 2189426715, 2189426700, 2160066573,
    2168455193, 2155872271, 2147487773, 2147483679, 2147483688, 2147483689, 2147483690,
    2147483691, 2147483692, 2147487794, 2147487795, 603981107, 0, 603981113, 0, 4026531840,
    0, 603981110, 603981142, 0, 1073748512, 805306397, 0, 1073749016, 805306397, 0, 2852192259,
    4259841, 1, 2147483677, 268435456, 603981124, 0, 4026531840, 603981127, 603980465, 0,
    2852192259, 4063233, 1, 2147483676, 268435456, 603981135, 0, 4026531840, 603981138, 603981142,
    0, 1073748256, 805306397, 0, 0, 2852126728, 4194305, 262164, 2147491856, 2147491857, 2164269058,
    2147491875, 2147491876, 2147491845, 2147491858, 2189426713, 2181038104, 2139095049,
    2147491882, 2176851995, 2176851980, 2147491853, 2147491871, 2143297551, 2147491880,
    2147491881, 2147491883, 2147491884, 2147483678, 603981433, 603981174, 0, 2147483678,
    603981433, 603981180, 0, 4026531840, 603981177, 603980684, 0, 1073742600, 805306398,
    0, 603981177, 603981467, 0, 805306403, 0, 2852126730, 1376257, 262174, 2235564048, 2210398209,
    2210398210, 2256535587, 2147483684, 2227175429, 2147483686, 2147500071, 2218786840,
    2185232393, 2218786842, 2147483691, 2147483660, 2172649485, 2147483678, 2168455183,
    2172649489, 2172649490, 2181038105, 2147483677, 2147483679, 2147483680, 2147487777,
    2168463394, 2147495973, 2147483688, 2147483689, 2147483690, 2147483698, 2147483699,
    603981229, 0, 603981231, 0, 603981245, 0, 603981256, 0, 603981305, 0, 4026531840, 805306402,
    0, 2852192259, 4521985, 1, 2147483681, 268435456, 603981239, 0, 4026531840, 603981242,
    603981901, 0, 1073751320, 805306402, 0, 2852192259, 1376257, 1, 2147483682, 268435456,
    603981253, 0, 4026531840, 1073751568, 805306403, 0, 2852192259, 1376257, 1, 2147483685,
    268435456, 603981264, 0, 4026531840, 2852126724, 4587521, 196616, 2147483664, 2147483665,
    2151677954, 2147483666, 2147483660, 2147483653, 2147487782, 2147483663, 603981280,
    0, 603981294, 0, 4026531840, 603981283, 603980044, 0, 2852192259, 4653057, 1, 2147483686,
    268435456, 603981291, 0, 4026531840, 1073752352, 805306403, 0, 2852192259, 4653057, 1,
    2147483686, 268435456, 603981302, 0, 4026531840, 1073752600, 805306403, 0, 2852192259,
    1376257, 1, 2147483687, 268435456, 603981264, 0, 4026531840, 1073742600, 805306401, 0,
    1073747720, 805306400, 0, 2852126726, 4718593, 262169, 2147491856, 2172653569, 2206212098,
    2235572259, 2147491876, 2147491845, 2147487782, 2147491857, 2197819416, 2181042185,
    2197819418, 2147491883, 2147491852, 2168463373, 2147487774, 2164269071, 2176851986,
    2164264985, 2147487773, 2147491871, 2147491880, 2147491881, 2147491882, 2147483698,
    2147487795, 603981355, 0, 603981361, 0, 603981364, 0, 4026531840, 0, 603981358, 603982104,
    0, 1073749776, 805306399, 0, 1073750280, 805306399, 0, 603981367, 603981644, 0, 1073750544,
    805306400, 0, 2852126724, 4325377, 196618, 2147487768, 2160070657, 2176847898, 2147487795,
    2160070665, 2147487773, 2155872286, 2147487769, 2147489830, 2147487794, 603981388,
    0, 4026531840, 4026531840, 4026531840, 2852192259, 4325377, 1, 2147483678, 268435456,
    603981396, 0, 4026531840, 2852126724, 4194305, 262164, 2147487760, 2147487761, 2164264962,
    2147487779, 2147487780, 2147487749, 2147487762, 2189426713, 2181038104, 2139095049,
    2147487786, 2176847899, 2176847884, 2147487757, 2147487775, 2143293455, 2147487784,
    2147487785, 2147487787, 2147487788, 603981424, 0, 603981430, 0, 4026531840, 603981427,
    603980684, 0, 1073749272, 805306398, 0, 603981427, 603981467, 0, 3087009429, 2499805214,
    0, 458755, 4026531840, 0, 0, 603981433, 603981370, 0, 603981433, 603981177, 0, 603981433,
    603981319, 0, 603981433, 603981316, 0, 603981433, 603981313, 0, 603981433, 603981185,
    0, 603981433, 603981183, 0, 2499805214, 0, 65537, 4026531840, 0, 0, 2852126728, 4390913,
    262161, 2147491856, 2147491857, 2164269058, 2147491875, 2147491876, 2147491845, 2147491858,
    2147491871, 2147491880, 2147491881, 2147491882, 2160066587, 2164269068, 2147491853,
    2147491883, 2113937423, 2147491884, 2147483679, 603981556, 603981497, 0, 2147483679,
    603981556, 603981535, 0, 4026531840, 0, 2852192259, 3997697, 1, 2147483675, 268435456,
    603981505, 0, 4026531840, 603981508, 603981557, 0, 2852126724, 4325377, 196618, 2147487768,
    2160070657, 2176847898, 2147487795, 2160070665, 2147487773, 2155876382, 2147487769,
    2147487782, 2147483698, 603981526, 0, 603981532, 0, 4026531840, 603981529, 603982104,
    0, 1073749528, 805306399, 0, 1073750032, 805306399, 0, 603981538, 603981557, 0, 2852126724,
    4325377, 196618, 2147487768, 2160070657, 2176847898, 2147487795, 2160070665, 2147487773,
    2155876382, 2147487769, 2147487782, 2147483698, 603981355, 0, 603981361, 0, 4026531840,
    0, 2852126728, 4784129, 262160, 2147483664, 2147483665, 2164260866, 2147483683, 2147483684,
    2147483653, 2147483666, 2147483679, 2147483688, 2147483689, 2147483690, 2147483691,
    2155872268, 2147483661, 2147491884, 2113929231, 2147483680, 603981628, 603981585, 0,
    2147483680, 603981628, 603981588, 0, 4026531840, 603981316, 603981644, 0, 603981591,
    603982090, 0, 1073750792, 805306400, 0, 2852126724, 4718593, 262169, 2147483664, 2172655617,
    2206203906, 2235564067, 2147483684, 2147483653, 2147489830, 2147483665, 2197821464,
    2181044233, 2197821466, 2147483691, 2147483660, 2168455181, 2147489822, 2164260879,
    2176843794, 2164267033, 2147489821, 2147483679, 2147483688, 2147483689, 2147483690,
    2147487794, 2147489843, 603981364, 0, 4026531840, 4026531840, 4026531840, 0, 3087009606,
    2499805216, 0, 65539, 4026531840, 0, 0, 603981628, 603981594, 0, 2499805216, 0, 65537, 4026531840,
    0, 0, 2852126732, 4849665, 196623, 2193629200, 2193629201, 2172657666, 2193629219, 2172657676,
    2151686149, 2147491853, 2155880463, 2168463378, 2147483679, 2147491876, 2147491880,
    2147500073, 2147500074, 2147500075, 2147483681, 603981704, 603981676, 0, 2147483681,
    603981704, 603981698, 0, 2147483681, 603981704, 603981701, 0, 4026531840, 0, 2852192259,
    4980737, 1, 2147483679, 268435456, 603981684, 0, 4026531840, 603981687, 603984744, 0,
    2852192259, 5046273, 1, 2147483680, 268435456, 603981695, 0, 4026531840, 1073751064,
    805306401, 0, 603981313, 603981705, 0, 603981313, 603981957, 0, 0, 2147483682, 603981746,
    603981710, 603981747, 0, 2852126724, 4521985, 262171, 2231369744, 2172649473, 2206203906,
    2243952675, 2147483684, 2147483653, 2147483686, 2206203921, 2206203928, 2181038089,
    2206203930, 2147483691, 2147483660, 2168455181, 2147483678, 2164260879, 2185232402,
    2172649497, 2147483677, 2147483679, 2147483680, 2147487777, 2147483688, 2147483689,
    2147483690, 2147483698, 2147483699, 603981229, 0, 603981231, 0, 4026531840, 0, 0, 2852126740,
    5111809, 196619, 2189443088, 2147500049, 2172665858, 2147483683, 2168471564, 2151694341,
    2147516429, 2147500047, 2147500050, 2147491876, 2147508264, 2147483683, 603981860,
    603981783, 0, 2147483683, 603981860, 603981797, 0, 2147483683, 603981860, 603981811,
    0, 2147483683, 603981860, 603981814, 0, 2147483683, 603981860, 603981817, 0, 4026531840,
    0, 2852192259, 5242881, 1, 2147483683, 268435456, 603981791, 0, 4026531840, 603981794,
    603981747, 0, 1073751824, 805306403, 0, 2852192259, 5308417, 1, 2147483684, 268435456,
    603981805, 0, 4026531840, 603981808, 603981747, 0, 1073752080, 805306403, 0, 603981183,
    603980044, 0, 603981183, 603981876, 0, 603981183, 603980465, 0, 2852126728, 1376257, 262172,
    2231382032, 2160078849, 2206216194, 2147495987, 2218799121, 2222993413, 2147495974,
    2147491879, 2214604824, 2181050377, 2214604826, 2147495979, 2147495948, 2168467469,
    2147495966, 2164273167, 2172661778, 2181050393, 2147495965, 2147495967, 2147495968,
    2147498017, 2168455202, 2147487781, 2147495976, 2147495977, 2147495978, 2147495986,
    603981245, 0, 603981256, 0, 603981305, 0, 4026531840, 4026531840, 4026531840, 3087009838,
    2499805219, 0, 65539, 4026531840, 0, 0, 603981860, 603981820, 0, 2499805219, 0, 65537, 4026531840,
    0, 0, 2852192261, 5373953, 1, 2147483688, 2147483684, 268435456, 603981900, 603981886,
    0, 4026531840, 603981889, 603981142, 0, 2852192259, 4653057, 1, 2147483686, 268435456,
    603981897, 0, 4026531840, 1073752856, 805306404, 0, 0, 2147483685, 603981956, 603981906,
    603984800, 0, 2852126724, 4456484, 262171, 2235568144, 2172653569, 2206208002, 2243956771,
    2147487780, 2147487749, 2147487782, 2147487761, 2185232392, 2185236489, 2206208026,
    2147487787, 2147487756, 2172653581, 2147487774, 2168459279, 2185236498, 2168459288,
    2168459289, 2147487773, 2147487775, 2147487776, 2147487784, 2147487785, 2147487786,
    2147487794, 2147487795, 603981942, 0, 603981953, 0, 4026531840, 0, 2852192259, 65572,
    1, 2147483656, 268435456, 603981950, 0, 4026531840, 1073747728, 805306405, 0, 1073747720,
    805306405, 0, 0, 2583691305, 5177345, 196612, 4026531840, 0, 0, 0, 2147483686, 603982043,
    603981977, 0, 2147483686, 603982043, 603981999, 0, 2147483686, 603982043, 603982021,
    0, 0, 2852192259, 5439489, 1, 2147483689, 268435456, 603981985, 0, 4026531840, 603981988,
    603982044, 0, 2852192259, 4653057, 1, 2147483686, 268435456, 603981996, 0, 4026531840,
    1073753112, 805306406, 0, 2852192259, 5505025, 1, 2147483690, 268435456, 603982007, 0,
    4026531840, 603982010, 603982044, 0, 2852192259, 4653057, 1, 2147483686, 268435456, 603982018,
    0, 4026531840, 1073753368, 805306406, 0, 2852192259, 5570561, 1, 2147483691, 268435456,
    603982029, 0, 4026531840, 603982032, 603982044, 0, 2852192259, 4653057, 1, 2147483686,
    268435456, 603982040, 0, 4026531840, 1073753624, 805306406, 0, 0, 2147483687, 603982074,
    603982049, 603980044, 0, 1073742600, 805306407, 0, 2852126723, 4587521, 196616, 2147483664,
    2147483665, 2151677954, 2147483666, 2147483660, 2147483653, 2147487782, 2147483663,
    603982068, 0, 4026531840, 4026531840, 0, 603982071, 603980044, 0, 1073742864, 805306407,
    0, 3087010052, 2499805223, 0, 65539, 4026531840, 0, 0, 603982074, 603982052, 0, 2499805223,
    0, 65537, 4026531840, 0, 0, 2852192261, 4915201, 1, 2147483692, 2147483688, 268435456,
    603982103, 603982100, 0, 4026531840, 1073753864, 805306408, 0, 0, 2147483689, 603982199,
    603982109, 603982200, 0, 2852126724, 5701633, 65538, 2147487793, 2143289389, 603982119,
    0, 603982191, 0, 4026531840, 2852192259, 5767169, 1, 2147483693, 268435456, 603982127,
    0, 4026531840, 2852126726, 5832705, 65539, 2155872302, 2147487777, 2147491888, 603982141,
    0, 603982163, 0, 603982177, 0, 4026531840, 0, 2852192259, 5898241, 1, 2147483694, 268435456,
    603982149, 0, 4026531840, 603982152, 603982214, 0, 2852192259, 6029313, 1, 2147483695,
    268435456, 603982160, 0, 4026531840, 1073754152, 805306409, 0, 2852192259, 6160385, 1,
    2147483681, 268435456, 603982171, 0, 4026531840, 603982174, 603980620, 0, 1073754400,
    805306409, 0, 2852192259, 6225921, 1, 2147483696, 268435456, 603982185, 0, 4026531840,
    603982188, 603980620, 0, 1073754656, 805306409, 0, 2852192259, 6291457, 1, 2147483697,
    268435456, 603982127, 0, 4026531840, 0, 2852192261, 3735553, 1, 2147483698, 2147483690,
    268435456, 603982213, 603982210, 0, 4026531840, 1073754888, 805306410, 0, 0, 2852126732,
    5963812, 131078, 2147491848, 2160066561, 2160074754, 2147491843, 2147491845, 2147500078,
    2147483691, 603982271, 603982236, 0, 2147483691, 603982271, 603982240, 0, 2147483691,
    603982271, 603982243, 0, 4026531840, 603982238, 0, 805306411, 0, 603982238, 603982291,
    0, 603982238, 603982350, 0, 2852126725, 6488100, 131078, 2147483656, 2147483653, 2155872258,
    2155872259, 2147487790, 2147491887, 603982262, 0, 603982268, 0, 4026531840, 4026531840,
    0, 603982265, 603982291, 0, 1073743632, 805306411, 0, 603982265, 603982350, 0, 3087010253,
    2768240646, 0, 65538, 2147483693, 2143295531, 603982271, 603982238, 0, 603982271, 603982246,
    0, 4026531840, 0, 2499805227, 0, 65537, 4026531840, 0, 0, 2852126736, 2424868, 131076, 2147500040,
    2147491845, 2147508226, 2147483651, 2147483692, 603982349, 603982315, 0, 2147483692,
    603982349, 603982325, 0, 2147483692, 603982349, 603982333, 0, 2147483692, 603982349,
    603982341, 0, 4026531840, 2852192259, 1966081, 1, 2147483651, 268435456, 603982323, 0,
    4026531840, 805306412, 0, 2852192259, 3407873, 1, 2147483653, 268435456, 603982323, 0,
    4026531840, 2852192259, 65572, 1, 2147483656, 268435456, 603982323, 0, 4026531840, 2852192259,
    3276801, 1, 2147483650, 268435456, 603982323, 0, 4026531840, 0, 2852192261, 5898241, 1,
    2147483694, 2147483693, 268435456, 603982374, 603982360, 0, 4026531840, 603982363, 603982214,
    0, 2852192259, 6029313, 1, 2147483695, 268435456, 603982371, 0, 4026531840, 1073755160,
    805306413, 0, 0, 2147483694, 603982405, 603982380, 603982200, 0, 603982383, 603980620,
    0, 2852192259, 5898241, 1, 2147483694, 268435456, 603982391, 0, 4026531840, 603982394,
    603982214, 0, 2852192259, 6029313, 1, 2147483695, 268435456, 603982402, 0, 4026531840,
    1073755432, 805306414, 0, 0, 2852192261, 6553610, 1, 2147483699, 2147483695, 268435456,
    603982621, 603982416, 0, 4026531840, 2583691316, 6619146, 131074, 4026531840, 0, 603982426,
    0, 603982525, 0, 0, 2852192259, 6684682, 1, 2147483700, 268435456, 603982434, 0, 4026531840,
    603982437, 603980465, 0, 2852192259, 6815754, 1, 2147483680, 268435456, 603982445, 0,
    4026531840, 603982448, 603982747, 0, 2852126726, 6946826, 65539, 2155880476, 2147483703,
    2147487824, 603982462, 0, 603982500, 0, 603982514, 0, 4026531840, 0, 603982465, 603983625,
    0, 2852126724, 7077898, 65538, 2151682076, 2147483728, 603982475, 0, 603982489, 0, 4026531840,
    603982478, 603983735, 0, 2852192259, 7208970, 1, 2147483676, 268435456, 603982486, 0,
    4026531840, 1073755712, 805306415, 0, 2852192259, 7208970, 1, 2147483676, 268435456,
    603982497, 0, 4026531840, 1073756472, 805306415, 0, 603982503, 603983735, 0, 2852192259,
    7208970, 1, 2147483676, 268435456, 603982511, 0, 4026531840, 1073756216, 805306415, 0,
    2852192259, 7208970, 1, 2147483676, 268435456, 603982522, 0, 4026531840, 1073757232,
    805306415, 0, 2852192259, 7274506, 1, 2147483701, 268435456, 603982533, 0, 4026531840,
    2852192259, 6815754, 1, 2147483680, 268435456, 603982541, 0, 4026531840, 603982544, 603982747,
    0, 2852126726, 6946826, 65539, 2155880476, 2147483703, 2147487824, 603982558, 0, 603982596,
    0, 603982610, 0, 4026531840, 0, 603982561, 603983625, 0, 2852126724, 7077898, 65538, 2151682076,
    2147483728, 603982571, 0, 603982585, 0, 4026531840, 603982574, 603983735, 0, 2852192259,
    7208970, 1, 2147483676, 268435456, 603982582, 0, 4026531840, 1073755960, 805306415, 0,
    2852192259, 7208970, 1, 2147483676, 268435456, 603982593, 0, 4026531840, 1073756976,
    805306415, 0, 603982599, 603983735, 0, 2852192259, 7208970, 1, 2147483676, 268435456,
    603982607, 0, 4026531840, 1073756720, 805306415, 0, 2852192259, 7208970, 1, 2147483676,
    268435456, 603982618, 0, 4026531840, 1073757480, 805306415, 0, 0, 2852126736, 7340042,
    131076, 2147508278, 2147491845, 2139111438, 2147483651, 2147483696, 603982731, 603982646,
    0, 2147483696, 603982731, 603982656, 0, 2147483696, 603982731, 603982664, 0, 2147483696,
    603982731, 603982672, 0, 4026531840, 2852192259, 7405578, 1, 2147483651, 268435456, 603982654,
    0, 4026531840, 805306416, 0, 2852192259, 7536650, 1, 2147483653, 268435456, 603982654,
    0, 4026531840, 2852192259, 7602186, 1, 2147483662, 268435456, 603982654, 0, 4026531840,
    2852192259, 7667722, 1, 2147483702, 268435456, 603982654, 0, 4026531840, 2852126728,
    7733255, 131076, 2147491894, 2147483653, 2139099150, 2147495939, 603982696, 0, 603982707,
    0, 603982715, 0, 603982723, 0, 4026531840, 2852192259, 7733255, 1, 2147483653, 268435456,
    603982704, 0, 4026531840, 1073741840, 805306416, 0, 2852192259, 7733255, 1, 2147483662,
    268435456, 603982704, 0, 4026531840, 2852192259, 7733255, 1, 2147483702, 268435456, 603982704,
    0, 4026531840, 2852192259, 7733255, 1, 2147483651, 268435456, 603982704, 0, 4026531840,
    3087010709, 2499805232, 0, 65539, 4026531840, 0, 0, 603982731, 603982680, 0, 2499805232,
    0, 65537, 4026531840, 0, 0, 2852126732, 6881290, 196622, 2202026047, 2147500089, 2181054522,
    2147500091, 2164277308, 2172665925, 2160083006, 2118123575, 2147500100, 2160083014,
    2147500106, 2147500109, 2147491918, 2147491919, 2147483697, 603982788, 603982777, 0,
    2147483697, 603982788, 603982782, 0, 2147483697, 603982788, 603982785, 0, 4026531840,
    603982780, 603985058, 0, 805306417, 0, 603982780, 603985126, 0, 603982780, 603982858,
    0, 0, 2852192261, 7012362, 1, 2147483703, 2147483698, 268435456, 603982832, 603982799,
    0, 4026531840, 2852192259, 7995402, 1, 2147483704, 268435456, 603982807, 0, 4026531840,
    603982810, 603982833, 0, 2852192259, 8126474, 1, 2147483688, 268435456, 603982818, 0,
    4026531840, 603982821, 603982858, 0, 2852192259, 8192010, 1, 2147483686, 268435456, 603982829,
    0, 4026531840, 1073757744, 805306418, 0, 0, 2852192261, 8060938, 1, 2147483679, 2147483699,
    268435456, 603982857, 603982843, 0, 4026531840, 603982846, 603985170, 0, 2852192259,
    6815754, 1, 2147483680, 268435456, 603982854, 0, 4026531840, 1073757976, 805306419, 0,
    0, 2852126736, 7929866, 196619, 2147491908, 2147508281, 2176843834, 2147491899, 2130714684,
    2168463429, 2155880510, 2147491903, 2147491910, 2147491914, 2147500109, 2147483700,
    603983017, 603982890, 0, 2147483700, 603983017, 603982901, 0, 2147483700, 603983017,
    603982991, 0, 2147483700, 603983017, 603983011, 0, 4026531840, 0, 2852192259, 8388618,
    1, 2147483706, 268435456, 603982898, 0, 4026531840, 1073750792, 805306420, 0, 603982904,
    603985230, 0, 2852126724, 8585226, 131078, 2168459292, 2160070657, 2147487782, 2147487799,
    2147483705, 2147487824, 603982918, 0, 603982976, 0, 4026531840, 2583756857, 8650762,
    65538, 4026531840, 0, 603982926, 0, 0, 2785017860, 8716298, 65538, 2147487827, 2143289421,
    603982936, 0, 603982970, 0, 4026531840, 2852192259, 8650762, 1, 2147483705, 268435456,
    603982944, 0, 4026531840, 603982947, 603985318, 0, 2852126724, 8585226, 131078, 2168459292,
    2160070657, 2147487782, 2147487799, 2147483705, 2147487824, 603982961, 0, 603982967,
    0, 4026531840, 603982964, 603985388, 0, 1073758240, 805306420, 0, 1073758744, 805306420,
    0, 603982973, 603985388, 0, 1073758480, 805306420, 0, 2852192258, 8454154, 131077, 2164260892,
    2147483649, 2147483686, 2147483703, 2147483728, 603982988, 0, 4026531840, 0, 1073758984,
    805306420, 0, 603982994, 603985318, 0, 2852126724, 8585226, 131078, 2168459292, 2160070657,
    2147487782, 2147487799, 2147483705, 2147487824, 603983008, 0, 603982988, 0, 4026531840,
    603982973, 603985388, 0, 603983014, 603985388, 0, 1073742600, 805306420, 0, 0, 2852126752,
    8519690, 196616, 2147516484, 2147532870, 2147541066, 2147483707, 2130714684, 2147524677,
    2126528574, 2147508287, 2147483701, 603983450, 603983062, 0, 2147483701, 603983450,
    603983105, 0, 2147483701, 603983450, 603983252, 0, 2147483701, 603983450, 603983290,
    0, 2147483701, 603983450, 603983344, 0, 2147483701, 603983450, 603983355, 0, 2147483701,
    603983450, 603983366, 0, 2147483701, 603983450, 603983412, 0, 4026531840, 2852192259,
    8912906, 1, 2147483707, 268435456, 603983070, 0, 4026531840, 2852126724, 8978442, 65538,
    2147487794, 2147483653, 603983080, 0, 603983099, 0, 4026531840, 2852192259, 7536650,
    1, 2147483653, 268435456, 603983088, 0, 4026531840, 2852192259, 7536650, 1, 2147483653,
    268435456, 603983096, 0, 4026531840, 1073759256, 805306421, 0, 603983102, 603982104,
    0, 1073759504, 805306421, 0, 2852192259, 9109514, 1, 2147483708, 268435456, 603983113,
    0, 4026531840, 2852126726, 9175050, 65539, 2155872312, 2147491913, 2147487810, 603983127,
    0, 603983162, 0, 603983230, 0, 4026531840, 0, 2852192259, 7995402, 1, 2147483704, 268435456,
    603983135, 0, 4026531840, 2852192259, 9240586, 1, 2147483709, 268435456, 603983143, 0,
    4026531840, 2852126724, 9306113, 65538, 2147483661, 2143293445, 603983153, 0, 603983159,
    0, 4026531840, 603983156, 603980465, 0, 1073759776, 805306421, 0, 603983156, 603985418,
    0, 2852192259, 9371658, 1, 2147483714, 268435456, 603983170, 0, 4026531840, 2852192259,
    9437194, 1, 2147483715, 268435456, 603983178, 0, 4026531840, 2852126724, 9502730, 131079,
    2164264972, 2164260869, 2164264962, 2147487759, 2147487760, 2147487761, 2147487762,
    603983194, 0, 603983215, 0, 4026531840, 0, 1610612738, 67112286, 67112300, 0, 603983201,
    603980044, 0, 2852192259, 7536650, 1, 2147483653, 268435456, 603983209, 0, 4026531840,
    1073760552, 805306421, 0, 603983201, 603985418, 0, 2852192258, 1114113, 131078, 2164260876,
    2147483665, 2160066562, 2147483663, 2147483664, 2147483666, 603983227, 0, 4026531840,
    603983201, 603980044, 0, 2852192259, 9568266, 1, 2147483721, 268435456, 603983238, 0,
    4026531840, 2852192259, 9240586, 1, 2147483709, 268435456, 603983246, 0, 4026531840,
    603983249, 603985418, 0, 1073761568, 805306421, 0, 2852192259, 9633802, 1, 2147483710,
    268435456, 603983260, 0, 4026531840, 2852192259, 9240586, 1, 2147483709, 268435456, 603983268,
    0, 4026531840, 2852192259, 8126474, 1, 2147483688, 268435456, 603983276, 0, 4026531840,
    603983279, 603985432, 0, 2852192259, 8192010, 1, 2147483686, 268435456, 603983287, 0,
    4026531840, 1073760040, 805306421, 0, 2852192259, 9764874, 1, 2147483711, 268435456,
    603983298, 0, 4026531840, 2583691328, 9830410, 131074, 4026531840, 0, 603983308, 0, 603983330,
    0, 0, 2852192259, 9895946, 1, 2147483712, 268435456, 603983316, 0, 4026531840, 2852192259,
    9961482, 1, 2147483713, 268435456, 603983324, 0, 4026531840, 603983327, 603983502, 0,
    1073760288, 805306421, 0, 2852192259, 9961482, 1, 2147483713, 268435456, 603983338, 0,
    4026531840, 603983341, 603983502, 0, 1073762072, 805306421, 0, 2852192259, 10027018,
    1, 2147483716, 268435456, 603983352, 0, 4026531840, 1073760776, 805306421, 0, 2852192259,
    10092554, 1, 2147483717, 268435456, 603983363, 0, 4026531840, 1073761032, 805306421,
    0, 2852192259, 10158090, 1, 2147483718, 268435456, 603983374, 0, 4026531840, 2852192259,
    10223626, 1, 2147483719, 268435456, 603983382, 0, 4026531840, 2852192259, 10289162, 1,
    2147483720, 268435456, 603983390, 0, 4026531840, 2852192259, 8060938, 1, 2147483679,
    268435456, 603983398, 0, 4026531840, 603983401, 603985480, 0, 2852192259, 6815754, 1,
    2147483680, 268435456, 603983409, 0, 4026531840, 1073761328, 805306421, 0, 2852192259,
    10354698, 1, 2147483722, 268435456, 603983420, 0, 4026531840, 2852126724, 10420234, 131079,
    2172653596, 2160070657, 2147487782, 2155876407, 2147487801, 2147483723, 2147487824,
    603983436, 0, 603983447, 0, 4026531840, 0, 2852192259, 10485770, 1, 2147483723, 268435456,
    603983444, 0, 4026531840, 1073761808, 805306421, 0, 1073762312, 805306421, 0, 0, 2852192261,
    9699338, 1, 2147483724, 2147483702, 268435456, 603983501, 603983461, 0, 4026531840, 2852192259,
    8060938, 1, 2147483679, 268435456, 603983469, 0, 4026531840, 2852126724, 10551306, 65538,
    2147487797, 2143289357, 603983479, 0, 603983493, 0, 4026531840, 603983482, 603980465,
    0, 2852192259, 6815754, 1, 2147483680, 268435456, 603983490, 0, 4026531840, 1073762592,
    805306422, 0, 2852192259, 7274506, 1, 2147483701, 268435456, 603983482, 0, 4026531840,
    0, 2852192261, 8060938, 1, 2147483679, 2147483703, 268435456, 603983526, 603983512, 0,
    4026531840, 603983515, 603985520, 0, 2852192259, 6815754, 1, 2147483680, 268435456, 603983523,
    0, 4026531840, 1073757976, 805306423, 0, 0, 2852192261, 8781834, 1, 2147483725, 2147483704,
    268435456, 603983543, 603983537, 0, 4026531840, 603983540, 603983451, 0, 1073762832,
    805306424, 0, 0, 2852126728, 7864330, 65538, 2147483726, 2147491919, 2147483705, 603983624,
    603983558, 0, 2147483705, 603983624, 603983591, 0, 4026531840, 2852192259, 10747914,
    1, 2147483726, 268435456, 603983566, 0, 4026531840, 603983569, 603983502, 0, 2852192259,
    8126474, 1, 2147483688, 268435456, 603983577, 0, 4026531840, 603983580, 603982858, 0,
    2852192259, 8192010, 1, 2147483686, 268435456, 603983588, 0, 4026531840, 1073763112,
    805306425, 0, 2852192259, 10878986, 1, 2147483727, 268435456, 603983599, 0, 4026531840,
    603983602, 603983502, 0, 2852192259, 8126474, 1, 2147483688, 268435456, 603983610, 0,
    4026531840, 603983613, 603982858, 0, 2852192259, 8192010, 1, 2147483686, 268435456, 603983621,
    0, 4026531840, 1073763368, 805306425, 0, 0, 2852192261, 7012362, 1, 2147483703, 2147483706,
    268435456, 603983696, 603983635, 0, 4026531840, 2852192259, 10092554, 1, 2147483717,
    268435456, 603983643, 0, 4026531840, 603983646, 603983697, 0, 603983649, 603982747, 0,
    2852126726, 7798794, 131076, 2155880476, 2147491841, 2147487824, 2147483703, 603983663,
    0, 603983687, 0, 603983693, 0, 4026531840, 603983666, 603983625, 0, 2852126724, 10944522,
    65539, 2155876380, 2147487745, 2147483728, 603983678, 0, 603983684, 0, 4026531840, 0,
    603983681, 603983735, 0, 1073763632, 805306426, 0, 1073764136, 805306426, 0, 603983690,
    603983735, 0, 1073763880, 805306426, 0, 1073764384, 805306426, 0, 0, 2852192261, 9699338,
    1, 2147483724, 2147483707, 268435456, 603983734, 603983707, 0, 4026531840, 2852192259,
    8060938, 1, 2147483679, 268435456, 603983715, 0, 4026531840, 2852192259, 7274506, 1, 2147483701,
    268435456, 603983723, 0, 4026531840, 2852192259, 6815754, 1, 2147483680, 268435456, 603983731,
    0, 4026531840, 1073762592, 805306427, 0, 0, 2852192261, 7143434, 1, 2147483728, 2147483708,
    268435456, 603983777, 603983745, 0, 4026531840, 2852192259, 11075594, 1, 2147483729,
    268435456, 603983753, 0, 4026531840, 603983756, 603983502, 0, 2852126724, 11141130, 131076,
    2155876380, 2155876353, 2147487824, 2147483733, 603983768, 0, 603983774, 0, 4026531840,
    603983771, 603985630, 0, 1073764640, 805306428, 0, 1073764888, 805306428, 0, 0, 2147483709,
    603983831, 603983783, 603983697, 0, 603983786, 603982747, 0, 2852126726, 11272202, 65539,
    2147487824, 2151686145, 2147483703, 603983800, 0, 603983822, 0, 603983828, 0, 4026531840,
    0, 603983803, 603983625, 0, 2852126724, 11337738, 65538, 2147483728, 2147487745, 603983813,
    0, 603983819, 0, 4026531840, 603983816, 603983735, 0, 1073765152, 805306429, 0, 1073765656,
    805306429, 0, 603983825, 603983735, 0, 1073765400, 805306429, 0, 1073765904, 805306429,
    0, 0, 2852126740, 2424832, 131077, 2147491848, 2147516421, 2147483650, 2151702531, 2147500039,
    2147483713, 603983970, 603983862, 0, 2147483713, 603983970, 603983873, 0, 2147483713,
    603983970, 603983881, 0, 2147483713, 603983970, 603983889, 0, 2147483713, 603983970,
    603983897, 0, 4026531840, 0, 2852192259, 3276801, 1, 2147483650, 268435456, 603983870,
    0, 4026531840, 1073742600, 805306433, 0, 2852192259, 65572, 1, 2147483656, 268435456,
    603983870, 0, 4026531840, 2852192259, 65554, 1, 2147483655, 268435456, 603983870, 0, 4026531840,
    2852192259, 1966081, 1, 2147483651, 268435456, 603983870, 0, 4026531840, 2852192259,
    3407873, 1, 2147483653, 268435456, 603983870, 0, 4026531840, 2852126731, 11403271, 131078,
    2147487752, 2147500037, 2160066562, 2151690243, 2147491847, 2147504138, 603983927,
    0, 603983938, 0, 603983946, 0, 603983954, 0, 603983962, 0, 4026531840, 4026531840, 0, 2852192259,
    3342336, 1, 2147483650, 268435456, 603983935, 0, 4026531840, 1073742864, 805306433, 0,
    2852192259, 3342336, 1, 2147483656, 268435456, 603983935, 0, 4026531840, 2852192259,
    3342336, 1, 2147483655, 268435456, 603983935, 0, 4026531840, 2852192259, 3342336, 1, 2147483651,
    268435456, 603983935, 0, 4026531840, 2852192259, 3342336, 1, 2147483653, 268435456, 603983935,
    0, 4026531840, 3087011948, 2499805249, 0, 65539, 4026531840, 0, 0, 603983970, 603983905,
    0, 2499805249, 0, 65537, 4026531840, 0, 0, 2852126728, 2162689, 65538, 2147483653, 2143297539,
    2147483714, 603984222, 603984000, 0, 2147483714, 603984222, 603984011, 0, 4026531840,
    2852192259, 3407873, 1, 2147483653, 268435456, 603984008, 0, 4026531840, 1073766920,
    805306434, 0, 2852192259, 1966081, 1, 2147483651, 268435456, 603984008, 0, 4026531840,
    2852126726, 11468800, 327713, 2147491872, 2202017793, 2222989314, 2222989315, 2147491876,
    2218786821, 2147491878, 2214596615, 2227183624, 2227183625, 2147491882, 2147491883,
    2147491852, 2147491853, 2147491873, 2147491855, 2147491856, 2147491857, 2206212114,
    2147491891, 2147491874, 2147491875, 2147491877, 2147491879, 2147491864, 2147491865,
    2147491866, 2147491880, 2147491881, 2147491869, 2147491870, 2147491871, 2147491890,
    603984063, 0, 603984126, 0, 603984174, 0, 4026531840, 0, 2583756805, 11468800, 65538, 4026531840,
    0, 603984071, 0, 0, 2785017859, 11534336, 327717, 2147483680, 2202009601, 2222981122,
    2222981123, 2147483684, 2218786821, 2147483686, 2231369735, 2248146952, 2248146953,
    2147483690, 2147483691, 2147483660, 2147483661, 2147483681, 2147483663, 2231369744,
    2147483665, 2214592530, 2147483699, 2147483682, 2147483683, 2147483685, 2147487799,
    2147483672, 2189426713, 2147483674, 2147483687, 2147487772, 2147483677, 2147483678,
    2147483679, 2147483688, 2147483689, 2147483698, 2147487801, 2147487824, 603984115,
    0, 4026531840, 4026531840, 2852192259, 11468800, 1, 2147483653, 268435456, 603984123,
    0, 4026531840, 1073743632, 805306434, 0, 2583756807, 65554, 65538, 4026531840, 0, 603984134,
    0, 0, 2785017858, 2228242, 327714, 2147483680, 2202009601, 2227175426, 2147483683, 2147483684,
    2218786821, 2147483686, 2231369735, 2147483688, 2227175433, 2147483690, 2235566091,
    2147483660, 2147483661, 2147483681, 2147483663, 2147483664, 2147483665, 2210398226,
    2147483699, 2147485716, 2147483682, 2147483685, 2147485719, 2147483672, 2147483673,
    2147483674, 2147483687, 2147483689, 2147483677, 2147483678, 2147483679, 2147483691,
    2147483698, 4026531840, 4026531840, 4026531840, 2852126724, 11468800, 262175, 2239764496,
    2210404353, 2210404354, 2239758339, 2147489828, 2147489829, 2147489830, 2147489831,
    2189430792, 2189432841, 2222987290, 2147489835, 2147489804, 2176849933, 2147489822,
    2172655631, 2176849937, 2176849938, 2181044248, 2181044249, 2147489821, 2147489823,
    2147489824, 2147489825, 2168461346, 2168461347, 2147489832, 2147489833, 2147489834,
    2147489842, 2147489843, 603984214, 0, 4026531840, 4026531840, 4026531840, 0, 2852192259,
    11468800, 1, 2147483651, 268435456, 603984123, 0, 4026531840, 3087012200, 2499805250,
    0, 65539, 4026531840, 0, 0, 603984222, 603984019, 0, 2499805250, 0, 65537, 4026531840, 0,
    0, 2852126728, 2293761, 65538, 2147491842, 2147483653, 2147483715, 603984418, 603984252,
    0, 2147483715, 603984418, 603984263, 0, 4026531840, 2852192259, 3407873, 1, 2147483653,
    268435456, 603984260, 0, 4026531840, 1073766920, 805306435, 0, 2852192259, 3276801, 1,
    2147483650, 268435456, 603984260, 0, 4026531840, 2852126724, 1376274, 262175, 2235568144,
    2210402305, 2210402306, 2260733987, 2147487780, 2227175429, 2147487782, 2222985223,
    2222985240, 2185236489, 2222985242, 2147487787, 2147487756, 2172653581, 2147487774,
    2168459279, 2172653585, 2172653586, 2185236505, 2147487773, 2147487775, 2147487776,
    2147487777, 2172653602, 2147487781, 2147487783, 2147487784, 2147487785, 2147487786,
    2147487794, 2147487795, 603984311, 0, 603984372, 0, 4026531840, 0, 2583756805, 1376274,
    65538, 4026531840, 0, 603984319, 0, 0, 2785017859, 11599890, 327715, 2147483680, 2202009601,
    2222981122, 2147483683, 2147483684, 2214592517, 2147483686, 2210398215, 2147483688,
    2222981129, 2147483690, 2147483691, 2147483660, 2147483661, 2147483681, 2147483663,
    2222981136, 2147483665, 2206203922, 2147483699, 2147483682, 2147483685, 2147483687,
    2147487799, 2147483672, 2181038105, 2147483674, 2147483689, 2147487772, 2147483677,
    2147483678, 2147483679, 2147483698, 2147487801, 2147487824, 603984361, 0, 4026531840,
    4026531840, 2852192259, 1376274, 1, 2147483653, 268435456, 603984369, 0, 4026531840,
    1073743632, 805306435, 0, 2852126723, 1376274, 262174, 2235568144, 2210402305, 2210398210,
    2256539683, 2147487780, 2147487781, 2147487782, 2218790919, 2218790936, 2185236489,
    2218790938, 2147487787, 2147487756, 2172653581, 2147487774, 2168459279, 2172653585,
    2172653586, 2181042201, 2147487773, 2147487775, 2147487776, 2147487777, 2168459298,
    2147487783, 2147487784, 2147487785, 2147487786, 2147487794, 2147487795, 603984410,
    0, 4026531840, 4026531840, 0, 2852192259, 1376274, 1, 2147483650, 268435456, 603984369,
    0, 4026531840, 3087012396, 2499805251, 0, 65539, 4026531840, 0, 0, 603984418, 603984271,
    0, 2499805251, 0, 65537, 4026531840, 0, 0, 2852126732, 2424833, 65539, 2147500034, 2151686147,
    2147483653, 2147483716, 603984524, 603984454, 0, 2147483716, 603984524, 603984465, 0,
    2147483716, 603984524, 603984473, 0, 4026531840, 0, 2852192259, 3407873, 1, 2147483653,
    268435456, 603984462, 0, 4026531840, 1073766920, 805306436, 0, 2852192259, 1966081, 1,
    2147483651, 268435456, 603984462, 0, 4026531840, 2852192259, 3276801, 1, 2147483650,
    268435456, 603984462, 0, 4026531840, 2852126727, 11665408, 131077, 2147495944, 2147483653,
    2147491842, 2151682051, 2147495943, 603984497, 0, 603984508, 0, 603984516, 0, 4026531840,
    4026531840, 2852192259, 11665408, 1, 2147483653, 268435456, 603984505, 0, 4026531840,
    1073743632, 805306436, 0, 2852192259, 11665408, 1, 2147483651, 268435456, 603984505,
    0, 4026531840, 2852192259, 11665408, 1, 2147483650, 268435456, 603984505, 0, 4026531840,
    3087012502, 2499805252, 0, 65539, 4026531840, 0, 0, 603984524, 603984481, 0, 2499805252,
    0, 65537, 4026531840, 0, 0, 2852126728, 2752513, 65538, 2147483650, 2147491843, 2147483717,
    603984606, 603984554, 0, 2147483717, 603984606, 603984565, 0, 4026531840, 2852192259,
    3276801, 1, 2147483650, 268435456, 603984562, 0, 4026531840, 1073766920, 805306437, 0,
    2852192259, 1966081, 1, 2147483651, 268435456, 603984562, 0, 4026531840, 2852126726,
    11730945, 131076, 2147493910, 2147491861, 2139095042, 2147487747, 603984587, 0, 603984598,
    0, 4026531840, 4026531840, 4026531840, 2852192259, 11730945, 1, 2147483650, 268435456,
    603984595, 0, 4026531840, 1073743632, 805306437, 0, 2852192259, 11730945, 1, 2147483651,
    268435456, 603984595, 0, 4026531840, 3087012584, 2499805253, 0, 65539, 4026531840, 0,
    0, 603984606, 603984573, 0, 2499805253, 0, 65537, 4026531840, 0, 0, 2147483718, 603984650,
    603984627, 603980736, 0, 1073742600, 805306438, 0, 2852126723, 11665408, 131078, 2147483656,
    2160070657, 2147483650, 2155872259, 2147483653, 2147487751, 603984644, 0, 4026531840,
    4026531840, 0, 603984647, 603980736, 0, 1073742864, 805306438, 0, 3087012628, 2499805254,
    0, 65539, 4026531840, 0, 0, 603984650, 603984630, 0, 2499805254, 0, 65537, 4026531840, 0,
    0, 2852126728, 2424832, 131077, 2147491848, 2147491845, 2147491842, 2151686147, 2147483655,
    2147483719, 603984728, 603984684, 0, 2147483719, 603984728, 603984695, 0, 4026531840,
    0, 2852192259, 65554, 1, 2147483655, 268435456, 603984692, 0, 4026531840, 1073742600,
    805306439, 0, 603984692, 603980736, 0, 2852126725, 3342336, 131078, 2147483656, 2147483653,
    2160066562, 2151677955, 2147487751, 2147491850, 603984714, 0, 603984720, 0, 4026531840,
    4026531840, 0, 603984717, 603980736, 0, 1073742864, 805306439, 0, 2852192259, 3342336,
    1, 2147483655, 268435456, 603984717, 0, 4026531840, 3087012706, 2499805255, 0, 65539,
    4026531840, 0, 0, 603984728, 603984698, 0, 2499805255, 0, 65537, 4026531840, 0, 0, 2147483720,
    603984780, 603984749, 603981644, 0, 1073742600, 805306440, 0, 2852192258, 4849665, 196623,
    2193621008, 2193621009, 2172649474, 2193621027, 2172649484, 2151677957, 2147483661,
    2155872271, 2168455186, 2147483679, 2147483684, 2147483688, 2147483689, 2147483690,
    2147483691, 603984774, 0, 4026531840, 0, 603984777, 603981644, 0, 1073742864, 805306440,
    0, 3087012762, 2768240646, 0, 65538, 2147483720, 2147489825, 603984780, 603984752, 0,
    603984780, 603984749, 0, 4026531840, 0, 2499805256, 0, 65537, 4026531840, 0, 0, 2852126732,
    2424833, 65539, 2147491842, 2151694339, 2147483653, 2147483721, 603985042, 603984820,
    0, 2147483721, 603985042, 603984831, 0, 2147483721, 603985042, 603984839, 0, 4026531840,
    0, 2852192259, 3407873, 1, 2147483653, 268435456, 603984828, 0, 4026531840, 1073766920,
    805306441, 0, 2852192259, 3276801, 1, 2147483650, 268435456, 603984828, 0, 4026531840,
    2852192259, 1966081, 1, 2147483651, 268435456, 603984828, 0, 4026531840, 2852126726,
    11862052, 262172, 2235572240, 2172657665, 2206208002, 2227183619, 2147491876, 2147483653,
    2147491878, 2147491857, 2185240584, 2185240585, 2210406426, 2147491883, 2147491852,
    2172657677, 2147491870, 2168463375, 2189434898, 2172657688, 2172657689, 2147491869,
    2147491871, 2147491872, 2168463395, 2147491880, 2147491881, 2147491882, 2147491890,
    2147491891, 603984885, 0, 603984944, 0, 603985000, 0, 4026531840, 2583756805, 11862052,
    65538, 4026531840, 0, 603984893, 0, 0, 2785017859, 11468800, 327713, 2147483680, 2202009601,
    2222981122, 2222981123, 2147483684, 2218786821, 2147483686, 2214596615, 2227175432,
    2227175433, 2147483690, 2147483691, 2147483660, 2147483661, 2147487777, 2147483663,
    2147483664, 2147483665, 2206203922, 2147483699, 2147487778, 2147483683, 2147487781,
    2147487783, 2147483672, 2147483673, 2147483674, 2147483688, 2147483689, 2147483677,
    2147483678, 2147483679, 2147483698, 603984933, 0, 4026531840, 4026531840, 2852192259,
    11862052, 1, 2147483653, 268435456, 603984941, 0, 4026531840, 1073743632, 805306441,
    0, 2583756802, 11862052, 65538, 4026531840, 0, 603984952, 0, 0, 2785017859, 11468800, 327713,
    2147483680, 2202009601, 2222981122, 2222981123, 2147483684, 2218786821, 2147483686,
    2214596615, 2227175432, 2227175433, 2147483690, 2147483691, 2147483660, 2147483661,
    2147487777, 2147483663, 2147483664, 2147483665, 2206203922, 2147483699, 2147487778,
    2147483683, 2147487781, 2147487783, 2147483672, 2147483673, 2147483674, 2147483688,
    2147483689, 2147483677, 2147483678, 2147483679, 2147483698, 603984992, 0, 4026531840,
    4026531840, 2852192259, 11862052, 1, 2147483650, 268435456, 603984941, 0, 4026531840,
    2852126724, 11862052, 262170, 2227181584, 2164267009, 2239764498, 2218786819, 2147489828,
    2147489809, 2147489830, 2206210072, 2143293448, 2176849929, 2202015770, 2147489835,
    2147489804, 2164267021, 2147489822, 2160072719, 2172655641, 2147489821, 2147489823,
    2147489824, 2168461347, 2147489832, 2147489833, 2147489834, 2147489842, 2147489843,
    603985034, 0, 4026531840, 4026531840, 4026531840, 2852192259, 11862052, 1, 2147483651,
    268435456, 603984941, 0, 4026531840, 3087013020, 2499805257, 0, 65539, 4026531840, 0,
    0, 603985042, 603984847, 0, 2499805257, 0, 65537, 4026531840, 0, 0, 2147483722, 603985110,
    603985063, 603982789, 0, 1073742600, 805306442, 0, 2852126724, 7798794, 131076, 2155876380,
    2147487745, 2147487824, 2147483703, 603985078, 0, 603985102, 0, 4026531840, 2583756855,
    7012362, 65538, 4026531840, 0, 603985086, 0, 0, 2785017859, 11993098, 65538, 2147483704,
    2147487813, 603985096, 0, 4026531840, 4026531840, 0, 603985099, 603982789, 0, 1073742864,
    805306442, 0, 2852192257, 7798794, 65539, 2155872284, 2147483649, 2147483728, 4026531840,
    4026531840, 3087013088, 2499805258, 0, 65539, 4026531840, 0, 0, 603985110, 603985066,
    0, 2499805258, 0, 65537, 4026531840, 0, 0, 2147483723, 603985154, 603985131, 603983544,
    0, 1073742600, 805306443, 0, 2852126723, 10813450, 131078, 2168459292, 2147487745, 2147483726,
    2151682103, 2147483727, 2147487824, 603985148, 0, 4026531840, 4026531840, 0, 603985151,
    603983544, 0, 1073742864, 805306443, 0, 3087013132, 2499805259, 0, 65539, 4026531840,
    0, 0, 603985154, 603985134, 0, 2499805259, 0, 65537, 4026531840, 0, 0, 2852126728, 9306113,
    65538, 2147483661, 2143297541, 2147483724, 603985214, 603985184, 0, 2147483724, 603985214,
    603985190, 0, 4026531840, 603985187, 603980465, 0, 1073742600, 805306444, 0, 603985187,
    603985418, 0, 2852126725, 12320778, 65539, 2147491872, 2151682053, 2147483661, 603985205,
    0, 603985211, 0, 4026531840, 4026531840, 603985208, 603980465, 0, 1073742864, 805306444,
    0, 603985208, 603985418, 0, 3087013192, 2499805260, 0, 65539, 4026531840, 0, 0, 603985214,
    603985193, 0, 2499805260, 0, 65537, 4026531840, 0, 0, 2147483725, 603985302, 603985235,
    603983018, 0, 1073742600, 805306445, 0, 2852126724, 8585226, 131078, 2168459292, 2160070657,
    2147487782, 2147487799, 2147483705, 2147487824, 603985252, 0, 603985292, 0, 4026531840,
    2583756857, 8585226, 65538, 4026531840, 0, 603985260, 0, 0, 2785017860, 12451850, 196618,
    2147483716, 2147483718, 2147483722, 2172649531, 2130706492, 2160066629, 2126512190,
    2147483711, 2147487821, 2147489875, 603985278, 0, 4026531840, 4026531840, 4026531840,
    2852192259, 12517377, 1, 2147483705, 268435456, 603985286, 0, 4026531840, 603985289,
    603983018, 0, 1073749272, 805306445, 0, 2852192257, 8454154, 131077, 2164260892, 2147483649,
    2147483686, 2147483703, 2147483728, 4026531840, 4026531840, 3087013280, 2499805261,
    0, 65539, 4026531840, 0, 0, 603985302, 603985238, 0, 2499805261, 0, 65537, 4026531840, 0,
    0, 2147483726, 603985372, 603985323, 603983527, 0, 1073742600, 805306446, 0, 2852126724,
    8585226, 131078, 2168459292, 2160070657, 2147487782, 2147487799, 2147483705, 2147487824,
    603985340, 0, 603985292, 0, 4026531840, 2583756857, 12517377, 65538, 4026531840, 0, 603985348,
    0, 0, 2785017859, 12648458, 65538, 2147487827, 2143289421, 603985358, 0, 4026531840, 4026531840,
    0, 2852192259, 12517377, 1, 2147483705, 268435456, 603985366, 0, 4026531840, 603985369,
    603983527, 0, 1073749272, 805306446, 0, 3087013350, 2499805262, 0, 65539, 4026531840,
    0, 0, 603985372, 603985326, 0, 2499805262, 0, 65537, 4026531840, 0, 0, 2852192261, 12713985,
    1, 2147483705, 2147483727, 268435456, 603985417, 603985398, 0, 4026531840, 2852192259,
    12779521, 1, 2147483731, 268435456, 603985406, 0, 4026531840, 2852192259, 12845057, 1,
    2147483724, 268435456, 603985414, 0, 4026531840, 1073767192, 805306447, 0, 0, 2852192261,
    3407873, 1, 2147483653, 2147483728, 268435456, 603985431, 603985428, 0, 4026531840, 1073767432,
    805306448, 0, 0, 2147483729, 603985464, 603985437, 603983451, 0, 1073742600, 805306449,
    0, 2852126723, 13041674, 65538, 2151682086, 2147483732, 603985450, 0, 4026531840, 4026531840,
    0, 2852192259, 12976129, 1, 2147483732, 268435456, 603985458, 0, 4026531840, 603985461,
    603983451, 0, 1073749272, 805306449, 0, 3087013442, 2499805265, 0, 65539, 4026531840,
    0, 0, 603985464, 603985440, 0, 2499805265, 0, 65537, 4026531840, 0, 0, 2147483730, 603985504,
    603985485, 603985418, 0, 1073742600, 805306450, 0, 2852126723, 13172746, 65538, 2147487776,
    2147483653, 603985498, 0, 4026531840, 4026531840, 0, 603985501, 603985418, 0, 1073742864,
    805306450, 0, 3087013482, 2499805266, 0, 65539, 4026531840, 0, 0, 603985504, 603985488,
    0, 2499805266, 0, 65537, 4026531840, 0, 0, 2852126728, 1114113, 131079, 2164269068, 2164260869,
    2164269058, 2147491855, 2147491856, 2147491857, 2147491858, 2147483731, 603985614,
    603985540, 0, 2147483731, 603985614, 603985553, 0, 4026531840, 0, 1610612738, 67114632,
    67114638, 0, 603985547, 603980044, 0, 1073742600, 805306451, 0, 603985547, 603985418,
    0, 2852192258, 1114113, 131078, 2164260876, 2147483665, 2160066562, 2147483663, 2147483664,
    2147483666, 603985565, 0, 4026531840, 603985547, 603980044, 0, 2852126724, 13303818,
    196616, 2172653584, 2147487761, 2151682050, 2147487762, 2147487756, 2147483653, 2147487776,
    2147487759, 603985584, 0, 603985597, 0, 4026531840, 1610612738, 67114676, 67114682, 0,
    603985591, 603980044, 0, 1073742864, 805306451, 0, 603985591, 603985418, 0, 2852126723,
    13369354, 131079, 2164260876, 2147483665, 2160066562, 2147483663, 2155872272, 2147483666,
    2147487776, 603985611, 0, 4026531840, 4026531840, 603985591, 603980044, 0, 3087013592,
    2499805267, 0, 65539, 4026531840, 0, 0, 603985614, 603985568, 0, 2499805267, 0, 65537, 4026531840,
    0, 0, 2852192261, 13434881, 1, 2147483733, 2147483732, 268435456, 603985646, 603985640,
    0, 4026531840, 603985643, 603983502, 0, 1073757968, 805306452, 0, 0
]);

function isTokenActive(token_id, row) {
    var index = (row * 3) + (token_id >> 5);;
    var shift = 1 << (31 & (token_id));;
    return (token_lookup[index] & shift) != 0;
}

function pre_scan(l, token) {
    var tk_length = l.token_length;;
    var bt_length = l.byte_length;;
    var type_cache = l._type;;
    scan(l, token, 0);
    var type_out = l._type;;
    l._type = type_cache;
    l.token_length = tk_length;
    l.byte_length = bt_length;
    return type_out > 0;
}

function scan_core(l, tk_row) {
    switch ((l.get_byte_at(l.byte_offset) & 127)) {
        case 33:
            {
                if (l.get_byte_at(l.byte_offset) == 33) {
                    if (isTokenActive(27, tk_row)) {
                        l.setToken(27, 1, 1);
                        return;
                    }
                }
            }
            break;
        case 35:
            {
                if (l.get_byte_at(l.byte_offset) == 35) {
                    if (isTokenActive(24, tk_row)) {
                        l.setToken(24, 1, 1);
                        return;
                    }
                }
            }
            break;
        case 36:
            {
                if (2 == compare(l, l.byte_offset, 21, 2, token_sequence_lookup)) {
                    if (l.get_byte_at(l.byte_offset + 2) == 109) {
                        if (isTokenActive(44, tk_row) && 3 == compare(l, l.byte_offset + 3, 24, 3, token_sequence_lookup)) {
                            l.setToken(44, 6, 6);
                            return;
                        }
                    } else if (l.get_byte_at(l.byte_offset + 2) == 111) {
                        if (isTokenActive(17, tk_row) && l.get_byte_at(l.byte_offset + 3) == 102) {
                            l.setToken(17, 4, 4);
                            return;
                        }
                    }
                }
            }
            break;
        case 40:
            {
                if (l.get_byte_at(l.byte_offset) == 40) {
                    if (l.get_byte_at(l.byte_offset + 1) == 69) {
                        if (isTokenActive(41, tk_row) && 2 == compare(l, l.byte_offset + 2, 43, 2, token_sequence_lookup)) {
                            l.setToken(41, 4, 4);
                            return;
                        }
                    } else if (l.get_byte_at(l.byte_offset + 1) == 73) {
                        if (isTokenActive(42, tk_row) && 2 == compare(l, l.byte_offset + 2, 146, 2, token_sequence_lookup)) {
                            l.setToken(42, 4, 4);
                            return;
                        }
                    } else if (l.get_byte_at(l.byte_offset + 1) == 82) {
                        if (isTokenActive(43, tk_row) && 2 == compare(l, l.byte_offset + 2, 188, 2, token_sequence_lookup)) {
                            l.setToken(43, 4, 4);
                            return;
                        }
                    } else if (l.get_byte_at(l.byte_offset + 1) == 42) {
                        if (isTokenActive(37, tk_row)) {
                            l.setToken(37, 2, 2);
                            return;
                        }
                    } else if (l.get_byte_at(l.byte_offset + 1) == 43) {
                        if (isTokenActive(39, tk_row)) {
                            l.setToken(39, 2, 2);
                            return;
                        }
                    } else if (isTokenActive(40, tk_row)) {
                        l.setToken(40, 1, 1);
                        return;
                    }
                }
            }
            break;
        case 41:
            {
                if (l.get_byte_at(l.byte_offset) == 41) {
                    if (isTokenActive(38, tk_row)) {
                        l.setToken(38, 1, 1);
                        return;
                    }
                }
            }
            break;
        case 42:
            {
                if (l.get_byte_at(l.byte_offset) == 42) {
                    if (isTokenActive(10, tk_row) && l.get_byte_at(l.byte_offset + 1) == 47) {
                        l.setToken(10, 2, 2);
                        return;
                    }
                }
            }
            break;
        case 43:
            {
                if (l.get_byte_at(l.byte_offset) == 43) {
                    if (isTokenActive(29, tk_row) && l.get_byte_at(l.byte_offset + 1) == 62) {
                        l.setToken(29, 2, 2);
                        return;
                    }
                }
            }
            break;
        case 44:
            {
                if (l.get_byte_at(l.byte_offset) == 44) {
                    if (isTokenActive(84, tk_row)) {
                        l.setToken(84, 1, 1);
                        return;
                    }
                }
            }
            break;
        case 45:
            {
                if (l.get_byte_at(l.byte_offset) == 45) {
                    if (isTokenActive(53, tk_row) && token_production(l, 67111710, 48, 53, 2, states_buffer, scan) && l.byte_length > 1) {
                        return;
                    } else if (isTokenActive(54, tk_row)) {
                        l.setToken(54, 1, 1);
                        return;
                    }
                }
            }
            break;
        case 47:
            {
                if (l.get_byte_at(l.byte_offset) == 47) {
                    if (l.get_byte_at(l.byte_offset + 1) == 42) {
                        if (isTokenActive(86, tk_row) && token_production(l, 67108914, 2, 86, 4, states_buffer, scan) && l.byte_length > 2) {
                            return;
                        } else if (isTokenActive(9, tk_row)) {
                            l.setToken(9, 2, 2);
                            return;
                        }
                    } else if (l.get_byte_at(l.byte_offset + 1) == 47) {
                        if (isTokenActive(25, tk_row)) {
                            l.setToken(25, 2, 2);
                            return;
                        }
                    }
                }
            }
            break;
        case 58:
            {
                if (l.get_byte_at(l.byte_offset) == 58) {
                    if (isTokenActive(19, tk_row) && l.get_byte_at(l.byte_offset + 1) == 58) {
                        l.setToken(19, 2, 2);
                        return;
                    }
                }
            }
            break;
        case 60:
            {
                if (l.get_byte_at(l.byte_offset) == 60) {
                    if (l.get_byte_at(l.byte_offset + 1) == 62) {
                        if (isTokenActive(26, tk_row)) {
                            l.setToken(26, 2, 2);
                            return;
                        }
                    } else if (l.get_byte_at(l.byte_offset + 1) == 61) {
                        if (isTokenActive(35, tk_row)) {
                            l.setToken(35, 2, 2);
                            return;
                        }
                    } else if (l.get_byte_at(l.byte_offset + 1) == 91) {
                        if (isTokenActive(51, tk_row)) {
                            l.setToken(51, 2, 2);
                            return;
                        }
                    }
                }
            }
            break;
        case 61:
            {
                if (l.get_byte_at(l.byte_offset) == 61) {
                    if (isTokenActive(48, tk_row) && l.get_byte_at(l.byte_offset + 1) == 62) {
                        l.setToken(48, 2, 2);
                        return;
                    }
                }
            }
            break;
        case 62:
            {
                if (l.get_byte_at(l.byte_offset) == 62) {
                    if (isTokenActive(28, tk_row)) {
                        l.setToken(28, 1, 1);
                        return;
                    }
                }
            }
            break;
        case 63:
            {
                if (l.get_byte_at(l.byte_offset) == 63) {
                    if (l.get_byte_at(l.byte_offset + 1) == 61) {
                        if (isTokenActive(36, tk_row)) {
                            l.setToken(36, 2, 2);
                            return;
                        }
                    } else if (isTokenActive(34, tk_row)) {
                        l.setToken(34, 1, 1);
                        return;
                    }
                }
            }
            break;
        case 64:
            {
                if (l.get_byte_at(l.byte_offset) == 64) {
                    if (l.get_byte_at(l.byte_offset + 1) == 73) {
                        if (l.get_byte_at(l.byte_offset + 2) == 71) {
                            if (isTokenActive(11, tk_row) && 4 == compare(l, l.byte_offset + 3, 6, 4, token_sequence_lookup)) {
                                l.setToken(11, 7, 7);
                                return;
                            }
                        } else if (l.get_byte_at(l.byte_offset + 2) == 77) {
                            if (isTokenActive(20, tk_row) && 4 == compare(l, l.byte_offset + 3, 128, 4, token_sequence_lookup)) {
                                l.setToken(20, 7, 7);
                                return;
                            }
                        }
                    } else if (l.get_byte_at(l.byte_offset + 1) == 69) {
                        if (isTokenActive(23, tk_row) && 5 == compare(l, l.byte_offset + 2, 174, 5, token_sequence_lookup)) {
                            l.setToken(23, 7, 7);
                            return;
                        }
                    }
                }
            }
            break;
        case 65:
            {
                if (l.get_byte_at(l.byte_offset) == 65) {
                    if (l.get_byte_at(l.byte_offset + 1) == 83) {
                        if (isTokenActive(13, tk_row) && token_production(l, 67109204, 10, 13, 1, states_buffer, scan) && l.byte_length > 2) {
                            return;
                        } else if (isTokenActive(53, tk_row) && token_production(l, 67111710, 48, 53, 2, states_buffer, scan) && l.byte_length > 2) {
                            return;
                        } else if (isTokenActive(3, tk_row) && l.isUniID() && l.byte_length > 2) {
                            l._type = 3;
                            return;
                        } else if (isTokenActive(22, tk_row)) {
                            l.setToken(22, 2, 2);
                            return;
                        }
                    }
                }
            }
            break;
        case 91:
            {
                if (l.get_byte_at(l.byte_offset) == 91) {
                    if (isTokenActive(31, tk_row)) {
                        l.setToken(31, 1, 1);
                        return;
                    }
                }
            }
            break;
        case 92:
            {
                if (l.get_byte_at(l.byte_offset) == 92) {
                    if (isTokenActive(16, tk_row)) {
                        l.setToken(16, 1, 1);
                        return;
                    }
                }
            }
            break;
        case 93:
            {
                if (l.get_byte_at(l.byte_offset) == 93) {
                    if (isTokenActive(32, tk_row)) {
                        l.setToken(32, 1, 1);
                        return;
                    }
                }
            }
            break;
        case 94:
            {
                if (l.get_byte_at(l.byte_offset) == 94) {
                    if (isTokenActive(33, tk_row)) {
                        l.setToken(33, 1, 1);
                        return;
                    }
                }
            }
            break;
        case 95:
            {
                if (l.get_byte_at(l.byte_offset) == 95) {
                    if (isTokenActive(13, tk_row) && token_production(l, 67109204, 10, 13, 1, states_buffer, scan) && l.byte_length > 1) {
                        return;
                    } else if (isTokenActive(53, tk_row) && token_production(l, 67111710, 48, 53, 2, states_buffer, scan) && l.byte_length > 1) {
                        return;
                    } else if (isTokenActive(14, tk_row)) {
                        l.setToken(14, 1, 1);
                        return;
                    }
                }
            }
            break;
        case 97:
            {
                if (l.get_byte_at(l.byte_offset) == 97) {
                    if (l.get_byte_at(l.byte_offset + 1) == 115) {
                        if (l.get_byte_at(l.byte_offset + 2) == 115) {
                            if (3 == compare(l, l.byte_offset + 3, 67, 3, token_sequence_lookup)) {
                                if (isTokenActive(13, tk_row) && token_production(l, 67109204, 10, 13, 1, states_buffer, scan) && l.byte_length > 6) {
                                    return;
                                } else if (isTokenActive(53, tk_row) && token_production(l, 67111710, 48, 53, 2, states_buffer, scan) && l.byte_length > 6) {
                                    return;
                                } else if (isTokenActive(3, tk_row) && l.isUniID() && l.byte_length > 6) {
                                    l._type = 3;
                                    return;
                                } else if (isTokenActive(79, tk_row)) {
                                    l.setToken(79, 6, 6);
                                    return;
                                }
                            }
                        } else if (isTokenActive(13, tk_row) && token_production(l, 67109204, 10, 13, 1, states_buffer, scan) && l.byte_length > 2) {
                            return;
                        } else if (isTokenActive(53, tk_row) && token_production(l, 67111710, 48, 53, 2, states_buffer, scan) && l.byte_length > 2) {
                            return;
                        } else if (isTokenActive(3, tk_row) && l.isUniID() && l.byte_length > 2) {
                            l._type = 3;
                            return;
                        } else if (isTokenActive(21, tk_row)) {
                            l.setToken(21, 2, 2);
                            return;
                        }
                    }
                }
            }
            break;
        case 98:
            {
                if (l.get_byte_at(l.byte_offset) == 98) {
                    if (3 == compare(l, l.byte_offset + 1, 86, 3, token_sequence_lookup)) {
                        if (isTokenActive(13, tk_row) && token_production(l, 67109204, 10, 13, 1, states_buffer, scan) && l.byte_length > 4) {
                            return;
                        } else if (isTokenActive(53, tk_row) && token_production(l, 67111710, 48, 53, 2, states_buffer, scan) && l.byte_length > 4) {
                            return;
                        } else if (isTokenActive(3, tk_row) && l.isUniID() && l.byte_length > 4) {
                            l._type = 3;
                            return;
                        } else if (isTokenActive(64, tk_row)) {
                            l.setToken(64, 4, 4);
                            return;
                        }
                    }
                }
            }
            break;
        case 99:
            {
                if (l.get_byte_at(l.byte_offset) == 99) {
                    if (6 == compare(l, l.byte_offset + 1, 110, 6, token_sequence_lookup)) {
                        if (isTokenActive(13, tk_row) && token_production(l, 67109204, 10, 13, 1, states_buffer, scan) && l.byte_length > 7) {
                            return;
                        } else if (isTokenActive(53, tk_row) && token_production(l, 67111710, 48, 53, 2, states_buffer, scan) && l.byte_length > 7) {
                            return;
                        } else if (isTokenActive(3, tk_row) && l.isUniID() && l.byte_length > 7) {
                            l._type = 3;
                            return;
                        } else if (isTokenActive(74, tk_row)) {
                            l.setToken(74, 7, 7);
                            return;
                        }
                    }
                }
            }
            break;
        case 101:
            {
                if (l.get_byte_at(l.byte_offset) == 101) {
                    if (l.get_byte_at(l.byte_offset + 1) == 120) {
                        if (6 == compare(l, l.byte_offset + 2, 117, 6, token_sequence_lookup)) {
                            if (isTokenActive(13, tk_row) && token_production(l, 67109204, 10, 13, 1, states_buffer, scan) && l.byte_length > 8) {
                                return;
                            } else if (isTokenActive(53, tk_row) && token_production(l, 67111710, 48, 53, 2, states_buffer, scan) && l.byte_length > 8) {
                                return;
                            } else if (isTokenActive(3, tk_row) && l.isUniID() && l.byte_length > 8) {
                                l._type = 3;
                                return;
                            } else if (isTokenActive(81, tk_row)) {
                                l.setToken(81, 8, 8);
                                return;
                            }
                        }
                    } else if (l.get_byte_at(l.byte_offset + 1) == 114) {
                        if (l.get_byte_at(l.byte_offset + 2) == 104) {
                            if (isTokenActive(13, tk_row) && token_production(l, 67109204, 10, 13, 1, states_buffer, scan) && l.byte_length > 3) {
                                return;
                            } else if (isTokenActive(53, tk_row) && token_production(l, 67111710, 48, 53, 2, states_buffer, scan) && l.byte_length > 3) {
                                return;
                            } else if (isTokenActive(3, tk_row) && l.isUniID() && l.byte_length > 3) {
                                l._type = 3;
                                return;
                            } else if (isTokenActive(82, tk_row)) {
                                l.setToken(82, 3, 3);
                                return;
                            }
                        }
                    }
                }
            }
            break;
        case 102:
            {
                if (l.get_byte_at(l.byte_offset) == 102) {
                    if (l.get_byte_at(l.byte_offset + 1) == 111) {
                        if (2 == compare(l, l.byte_offset + 2, 52, 2, token_sequence_lookup)) {
                            if (isTokenActive(13, tk_row) && token_production(l, 67109204, 10, 13, 1, states_buffer, scan) && l.byte_length > 4) {
                                return;
                            } else if (isTokenActive(53, tk_row) && token_production(l, 67111710, 48, 53, 2, states_buffer, scan) && l.byte_length > 4) {
                                return;
                            } else if (isTokenActive(3, tk_row) && l.isUniID() && l.byte_length > 4) {
                                l._type = 3;
                                return;
                            } else if (isTokenActive(62, tk_row)) {
                                l.setToken(62, 4, 4);
                                return;
                            }
                        }
                    } else if (l.get_byte_at(l.byte_offset + 1) == 97) {
                        if (2 == compare(l, l.byte_offset + 2, 150, 2, token_sequence_lookup)) {
                            if (isTokenActive(13, tk_row) && token_production(l, 67109204, 10, 13, 1, states_buffer, scan) && l.byte_length > 4) {
                                return;
                            } else if (isTokenActive(53, tk_row) && token_production(l, 67111710, 48, 53, 2, states_buffer, scan) && l.byte_length > 4) {
                                return;
                            } else if (isTokenActive(3, tk_row) && l.isUniID() && l.byte_length > 4) {
                                l._type = 3;
                                return;
                            } else if (isTokenActive(69, tk_row)) {
                                l.setToken(69, 4, 4);
                                return;
                            }
                        }
                    } else if (l.get_byte_at(l.byte_offset + 1) == 58) {
                        if (isTokenActive(50, tk_row)) {
                            l.setToken(50, 2, 2);
                            return;
                        }
                    }
                }
            }
            break;
        case 103:
            {
                if (l.get_byte_at(l.byte_offset) == 103) {
                    if (l.get_byte_at(l.byte_offset + 1) == 111) {
                        if (2 == compare(l, l.byte_offset + 2, 12, 2, token_sequence_lookup)) {
                            if (isTokenActive(13, tk_row) && token_production(l, 67109204, 10, 13, 1, states_buffer, scan) && l.byte_length > 4) {
                                return;
                            } else if (isTokenActive(53, tk_row) && token_production(l, 67111710, 48, 53, 2, states_buffer, scan) && l.byte_length > 4) {
                                return;
                            } else if (isTokenActive(3, tk_row) && l.isUniID() && l.byte_length > 4) {
                                l._type = 3;
                                return;
                            } else if (isTokenActive(77, tk_row)) {
                                l.setToken(77, 4, 4);
                                return;
                            }
                        }
                    } else if (l.get_byte_at(l.byte_offset + 1) == 58) {
                        if (isTokenActive(12, tk_row)) {
                            l.setToken(12, 2, 2);
                            return;
                        }
                    }
                }
            }
            break;
        case 105:
            {
                if (l.get_byte_at(l.byte_offset) == 105) {
                    if (l.get_byte_at(l.byte_offset + 1) == 100) {
                        if (isTokenActive(13, tk_row) && token_production(l, 67109204, 10, 13, 1, states_buffer, scan) && l.byte_length > 2) {
                            return;
                        } else if (isTokenActive(53, tk_row) && token_production(l, 67111710, 48, 53, 2, states_buffer, scan) && l.byte_length > 2) {
                            return;
                        } else if (isTokenActive(3, tk_row) && l.isUniID() && l.byte_length > 2) {
                            l._type = 3;
                            return;
                        } else if (isTokenActive(67, tk_row)) {
                            l.setToken(67, 2, 2);
                            return;
                        }
                    }
                }
            }
            break;
        case 110:
            {
                if (l.get_byte_at(l.byte_offset) == 110) {
                    if (2 == compare(l, l.byte_offset + 1, 97, 2, token_sequence_lookup)) {
                        if (l.get_byte_at(l.byte_offset + 3) == 104) {
                            if (3 == compare(l, l.byte_offset + 4, 100, 3, token_sequence_lookup)) {
                                if (isTokenActive(13, tk_row) && token_production(l, 67109204, 10, 13, 1, states_buffer, scan) && l.byte_length > 7) {
                                    return;
                                } else if (isTokenActive(53, tk_row) && token_production(l, 67111710, 48, 53, 2, states_buffer, scan) && l.byte_length > 7) {
                                    return;
                                } else if (isTokenActive(3, tk_row) && l.isUniID() && l.byte_length > 7) {
                                    l._type = 3;
                                    return;
                                } else if (isTokenActive(75, tk_row)) {
                                    l.setToken(75, 7, 7);
                                    return;
                                }
                            }
                        } else if (isTokenActive(13, tk_row) && token_production(l, 67109204, 10, 13, 1, states_buffer, scan) && l.byte_length > 3) {
                            return;
                        } else if (isTokenActive(53, tk_row) && token_production(l, 67111710, 48, 53, 2, states_buffer, scan) && l.byte_length > 3) {
                            return;
                        } else if (isTokenActive(3, tk_row) && l.isUniID() && l.byte_length > 3) {
                            l._type = 3;
                            return;
                        } else if (isTokenActive(70, tk_row)) {
                            l.setToken(70, 3, 3);
                            return;
                        }
                    }
                }
            }
            break;
        case 111:
            {
                if (l.get_byte_at(l.byte_offset) == 111) {
                    if (l.get_byte_at(l.byte_offset + 1) == 110) {
                        if (isTokenActive(13, tk_row) && token_production(l, 67109204, 10, 13, 1, states_buffer, scan) && l.byte_length > 2) {
                            return;
                        } else if (isTokenActive(53, tk_row) && token_production(l, 67111710, 48, 53, 2, states_buffer, scan) && l.byte_length > 2) {
                            return;
                        } else if (isTokenActive(3, tk_row) && l.isUniID() && l.byte_length > 2) {
                            l._type = 3;
                            return;
                        } else if (isTokenActive(55, tk_row)) {
                            l.setToken(55, 2, 2);
                            return;
                        }
                    }
                }
            }
            break;
        case 112:
            {
                if (l.get_byte_at(l.byte_offset) == 112) {
                    if (l.get_byte_at(l.byte_offset + 1) == 114) {
                        if (2 == compare(l, l.byte_offset + 2, 83, 2, token_sequence_lookup)) {
                            if (isTokenActive(13, tk_row) && token_production(l, 67109204, 10, 13, 1, states_buffer, scan) && l.byte_length > 4) {
                                return;
                            } else if (isTokenActive(53, tk_row) && token_production(l, 67111710, 48, 53, 2, states_buffer, scan) && l.byte_length > 4) {
                                return;
                            } else if (isTokenActive(3, tk_row) && l.isUniID() && l.byte_length > 4) {
                                l._type = 3;
                                return;
                            } else if (isTokenActive(56, tk_row)) {
                                l.setToken(56, 4, 4);
                                return;
                            }
                        }
                    } else if (l.get_byte_at(l.byte_offset + 1) == 97) {
                        if (2 == compare(l, l.byte_offset + 2, 167, 2, token_sequence_lookup)) {
                            if (isTokenActive(13, tk_row) && token_production(l, 67109204, 10, 13, 1, states_buffer, scan) && l.byte_length > 4) {
                                return;
                            } else if (isTokenActive(53, tk_row) && token_production(l, 67111710, 48, 53, 2, states_buffer, scan) && l.byte_length > 4) {
                                return;
                            } else if (isTokenActive(3, tk_row) && l.isUniID() && l.byte_length > 4) {
                                l._type = 3;
                                return;
                            } else if (isTokenActive(68, tk_row)) {
                                l.setToken(68, 4, 4);
                                return;
                            }
                        }
                    } else if (l.get_byte_at(l.byte_offset + 1) == 101) {
                        if (2 == compare(l, l.byte_offset + 2, 227, 2, token_sequence_lookup)) {
                            if (isTokenActive(13, tk_row) && token_production(l, 67109204, 10, 13, 1, states_buffer, scan) && l.byte_length > 4) {
                                return;
                            } else if (isTokenActive(53, tk_row) && token_production(l, 67111710, 48, 53, 2, states_buffer, scan) && l.byte_length > 4) {
                                return;
                            } else if (isTokenActive(3, tk_row) && l.isUniID() && l.byte_length > 4) {
                                l._type = 3;
                                return;
                            } else if (isTokenActive(78, tk_row)) {
                                l.setToken(78, 4, 4);
                                return;
                            }
                        }
                    }
                }
            }
            break;
        case 114:
            {
                if (l.get_byte_at(l.byte_offset) == 114) {
                    if (l.get_byte_at(l.byte_offset + 1) == 101) {
                        if (l.get_byte_at(l.byte_offset + 2) == 99) {
                            if (4 == compare(l, l.byte_offset + 3, 75, 4, token_sequence_lookup)) {
                                if (isTokenActive(13, tk_row) && token_production(l, 67109204, 10, 13, 1, states_buffer, scan) && l.byte_length > 7) {
                                    return;
                                } else if (isTokenActive(53, tk_row) && token_production(l, 67111710, 48, 53, 2, states_buffer, scan) && l.byte_length > 7) {
                                    return;
                                } else if (isTokenActive(3, tk_row) && l.isUniID() && l.byte_length > 7) {
                                    l._type = 3;
                                    return;
                                } else if (isTokenActive(52, tk_row)) {
                                    l.setToken(52, 7, 7);
                                    return;
                                }
                            }
                        } else if (l.get_byte_at(l.byte_offset + 2) == 116) {
                            if (3 == compare(l, l.byte_offset + 3, 162, 3, token_sequence_lookup)) {
                                if (isTokenActive(13, tk_row) && token_production(l, 67109204, 10, 13, 1, states_buffer, scan) && l.byte_length > 6) {
                                    return;
                                } else if (isTokenActive(53, tk_row) && token_production(l, 67111710, 48, 53, 2, states_buffer, scan) && l.byte_length > 6) {
                                    return;
                                } else if (isTokenActive(3, tk_row) && l.isUniID() && l.byte_length > 6) {
                                    l._type = 3;
                                    return;
                                } else if (isTokenActive(49, tk_row)) {
                                    l.setToken(49, 6, 6);
                                    return;
                                }
                            }
                        } else if (l.get_byte_at(l.byte_offset + 2) == 100) {
                            if (3 == compare(l, l.byte_offset + 3, 216, 3, token_sequence_lookup)) {
                                if (isTokenActive(13, tk_row) && token_production(l, 67109204, 10, 13, 1, states_buffer, scan) && l.byte_length > 6) {
                                    return;
                                } else if (isTokenActive(53, tk_row) && token_production(l, 67111710, 48, 53, 2, states_buffer, scan) && l.byte_length > 6) {
                                    return;
                                } else if (isTokenActive(3, tk_row) && l.isUniID() && l.byte_length > 6) {
                                    l._type = 3;
                                    return;
                                } else if (isTokenActive(59, tk_row)) {
                                    l.setToken(59, 6, 6);
                                    return;
                                }
                            }
                        } else if (l.get_byte_at(l.byte_offset + 2) == 112) {
                            if (3 == compare(l, l.byte_offset + 3, 222, 3, token_sequence_lookup)) {
                                if (isTokenActive(13, tk_row) && token_production(l, 67109204, 10, 13, 1, states_buffer, scan) && l.byte_length > 6) {
                                    return;
                                } else if (isTokenActive(53, tk_row) && token_production(l, 67111710, 48, 53, 2, states_buffer, scan) && l.byte_length > 6) {
                                    return;
                                } else if (isTokenActive(3, tk_row) && l.isUniID() && l.byte_length > 6) {
                                    l._type = 3;
                                    return;
                                } else if (isTokenActive(83, tk_row)) {
                                    l.setToken(83, 6, 6);
                                    return;
                                }
                            }
                        }
                    } else if (isTokenActive(13, tk_row) && token_production(l, 67109204, 10, 13, 1, states_buffer, scan) && l.byte_length > 1) {
                        return;
                    } else if (isTokenActive(53, tk_row) && token_production(l, 67111710, 48, 53, 2, states_buffer, scan) && l.byte_length > 1) {
                        return;
                    } else if (isTokenActive(3, tk_row) && l.isUniID() && l.byte_length > 1) {
                        l._type = 3;
                        return;
                    } else if (isTokenActive(45, tk_row)) {
                        l.setToken(45, 1, 1);
                        return;
                    }
                }
            }
            break;
        case 115:
            {
                if (l.get_byte_at(l.byte_offset) == 115) {
                    if (l.get_byte_at(l.byte_offset + 1) == 121) {
                        if (6 == compare(l, l.byte_offset + 2, 57, 6, token_sequence_lookup)) {
                            if (isTokenActive(80, tk_row)) {
                                l.setToken(80, 8, 8);
                                return;
                            }
                        }
                    } else if (l.get_byte_at(l.byte_offset + 1) == 107) {
                        if (5 == compare(l, l.byte_offset + 2, 154, 5, token_sequence_lookup)) {
                            if (isTokenActive(13, tk_row) && token_production(l, 67109204, 10, 13, 1, states_buffer, scan) && l.byte_length > 7) {
                                return;
                            } else if (isTokenActive(53, tk_row) && token_production(l, 67111710, 48, 53, 2, states_buffer, scan) && l.byte_length > 7) {
                                return;
                            } else if (isTokenActive(3, tk_row) && l.isUniID() && l.byte_length > 7) {
                                l._type = 3;
                                return;
                            } else if (isTokenActive(85, tk_row)) {
                                l.setToken(85, 7, 7);
                                return;
                            }
                        }
                    } else if (l.get_byte_at(l.byte_offset + 1) == 99) {
                        if (l.get_byte_at(l.byte_offset + 2) == 111) {
                            if (2 == compare(l, l.byte_offset + 3, 199, 2, token_sequence_lookup)) {
                                if (l.get_byte_at(l.byte_offset + 5) == 115) {
                                    if (isTokenActive(13, tk_row) && token_production(l, 67109204, 10, 13, 1, states_buffer, scan) && l.byte_length > 6) {
                                        return;
                                    } else if (isTokenActive(53, tk_row) && token_production(l, 67111710, 48, 53, 2, states_buffer, scan) && l.byte_length > 6) {
                                        return;
                                    } else if (isTokenActive(3, tk_row) && l.isUniID() && l.byte_length > 6) {
                                        l._type = 3;
                                        return;
                                    } else if (isTokenActive(72, tk_row)) {
                                        l.setToken(72, 6, 6);
                                        return;
                                    }
                                } else if (isTokenActive(13, tk_row) && token_production(l, 67109204, 10, 13, 1, states_buffer, scan) && l.byte_length > 5) {
                                    return;
                                } else if (isTokenActive(53, tk_row) && token_production(l, 67111710, 48, 53, 2, states_buffer, scan) && l.byte_length > 5) {
                                    return;
                                } else if (isTokenActive(3, tk_row) && l.isUniID() && l.byte_length > 5) {
                                    l._type = 3;
                                    return;
                                } else if (isTokenActive(73, tk_row)) {
                                    l.setToken(73, 5, 5);
                                    return;
                                }
                            }
                        } else if (l.get_byte_at(l.byte_offset + 2) == 97) {
                            if (l.get_byte_at(l.byte_offset + 3) == 110) {
                                if (isTokenActive(13, tk_row) && token_production(l, 67109204, 10, 13, 1, states_buffer, scan) && l.byte_length > 4) {
                                    return;
                                } else if (isTokenActive(53, tk_row) && token_production(l, 67111710, 48, 53, 2, states_buffer, scan) && l.byte_length > 4) {
                                    return;
                                } else if (isTokenActive(3, tk_row) && l.isUniID() && l.byte_length > 4) {
                                    l._type = 3;
                                    return;
                                } else if (isTokenActive(63, tk_row)) {
                                    l.setToken(63, 4, 4);
                                    return;
                                }
                            }
                        }
                    } else if (l.get_byte_at(l.byte_offset + 1) == 116) {
                        if (3 == compare(l, l.byte_offset + 2, 203, 3, token_sequence_lookup)) {
                            if (isTokenActive(13, tk_row) && token_production(l, 67109204, 10, 13, 1, states_buffer, scan) && l.byte_length > 5) {
                                return;
                            } else if (isTokenActive(53, tk_row) && token_production(l, 67111710, 48, 53, 2, states_buffer, scan) && l.byte_length > 5) {
                                return;
                            } else if (isTokenActive(3, tk_row) && l.isUniID() && l.byte_length > 5) {
                                l._type = 3;
                                return;
                            } else if (isTokenActive(76, tk_row)) {
                                l.setToken(76, 5, 5);
                                return;
                            }
                        }
                    } else if (l.get_byte_at(l.byte_offset + 1) == 101) {
                        if (l.get_byte_at(l.byte_offset + 2) == 116) {
                            if (isTokenActive(13, tk_row) && token_production(l, 67109204, 10, 13, 1, states_buffer, scan) && l.byte_length > 3) {
                                return;
                            } else if (isTokenActive(53, tk_row) && token_production(l, 67111710, 48, 53, 2, states_buffer, scan) && l.byte_length > 3) {
                                return;
                            } else if (isTokenActive(3, tk_row) && l.isUniID() && l.byte_length > 3) {
                                l._type = 3;
                                return;
                            } else if (isTokenActive(60, tk_row)) {
                                l.setToken(60, 3, 3);
                                return;
                            }
                        }
                    }
                }
            }
            break;
        case 116:
            {
                if (l.get_byte_at(l.byte_offset) == 116) {
                    if (l.get_byte_at(l.byte_offset + 1) == 111) {
                        if (l.get_byte_at(l.byte_offset + 2) == 107) {
                            if (2 == compare(l, l.byte_offset + 3, 18, 2, token_sequence_lookup)) {
                                if (isTokenActive(13, tk_row) && token_production(l, 67109204, 10, 13, 1, states_buffer, scan) && l.byte_length > 5) {
                                    return;
                                } else if (isTokenActive(53, tk_row) && token_production(l, 67111710, 48, 53, 2, states_buffer, scan) && l.byte_length > 5) {
                                    return;
                                } else if (isTokenActive(3, tk_row) && l.isUniID() && l.byte_length > 5) {
                                    l._type = 3;
                                    return;
                                } else if (isTokenActive(66, tk_row)) {
                                    l.setToken(66, 5, 5);
                                    return;
                                }
                            }
                        } else if (isTokenActive(13, tk_row) && token_production(l, 67109204, 10, 13, 1, states_buffer, scan) && l.byte_length > 2) {
                            return;
                        } else if (isTokenActive(53, tk_row) && token_production(l, 67111710, 48, 53, 2, states_buffer, scan) && l.byte_length > 2) {
                            return;
                        } else if (isTokenActive(3, tk_row) && l.isUniID() && l.byte_length > 2) {
                            l._type = 3;
                            return;
                        } else if (isTokenActive(61, tk_row)) {
                            l.setToken(61, 2, 2);
                            return;
                        }
                    } else if (l.get_byte_at(l.byte_offset + 1) == 104) {
                        if (2 == compare(l, l.byte_offset + 2, 136, 2, token_sequence_lookup)) {
                            if (isTokenActive(13, tk_row) && token_production(l, 67109204, 10, 13, 1, states_buffer, scan) && l.byte_length > 4) {
                                return;
                            } else if (isTokenActive(53, tk_row) && token_production(l, 67111710, 48, 53, 2, states_buffer, scan) && l.byte_length > 4) {
                                return;
                            } else if (isTokenActive(3, tk_row) && l.isUniID() && l.byte_length > 4) {
                                l._type = 3;
                                return;
                            } else if (isTokenActive(57, tk_row)) {
                                l.setToken(57, 4, 4);
                                return;
                            }
                        }
                    } else if (l.get_byte_at(l.byte_offset + 1) == 107) {
                        if (l.get_byte_at(l.byte_offset + 2) == 58) {
                            if (isTokenActive(18, tk_row)) {
                                l.setToken(18, 3, 3);
                                return;
                            }
                        }
                    } else if (l.get_byte_at(l.byte_offset + 1) == 58) {
                        if (isTokenActive(15, tk_row)) {
                            l.setToken(15, 2, 2);
                            return;
                        }
                    }
                }
            }
            break;
        case 117:
            {
                if (l.get_byte_at(l.byte_offset) == 117) {
                    if (4 == compare(l, l.byte_offset + 1, 90, 4, token_sequence_lookup)) {
                        if (isTokenActive(13, tk_row) && token_production(l, 67109204, 10, 13, 1, states_buffer, scan) && l.byte_length > 5) {
                            return;
                        } else if (isTokenActive(53, tk_row) && token_production(l, 67111710, 48, 53, 2, states_buffer, scan) && l.byte_length > 5) {
                            return;
                        } else if (isTokenActive(3, tk_row) && l.isUniID() && l.byte_length > 5) {
                            l._type = 3;
                            return;
                        } else if (isTokenActive(65, tk_row)) {
                            l.setToken(65, 5, 5);
                            return;
                        }
                    }
                }
            }
            break;
        case 119:
            {
                if (l.get_byte_at(l.byte_offset) == 119) {
                    if (5 == compare(l, l.byte_offset + 1, 104, 5, token_sequence_lookup)) {
                        if (isTokenActive(13, tk_row) && token_production(l, 67109204, 10, 13, 1, states_buffer, scan) && l.byte_length > 6) {
                            return;
                        } else if (isTokenActive(53, tk_row) && token_production(l, 67111710, 48, 53, 2, states_buffer, scan) && l.byte_length > 6) {
                            return;
                        } else if (isTokenActive(3, tk_row) && l.isUniID() && l.byte_length > 6) {
                            l._type = 3;
                            return;
                        } else if (isTokenActive(71, tk_row)) {
                            l.setToken(71, 6, 6);
                            return;
                        }
                    }
                }
            }
            break;
        case 123:
            {
                if (l.get_byte_at(l.byte_offset) == 123) {
                    if (isTokenActive(46, tk_row)) {
                        l.setToken(46, 1, 1);
                        return;
                    }
                }
            }
            break;
        case 124:
            {
                if (l.get_byte_at(l.byte_offset) == 124) {
                    if (isTokenActive(30, tk_row)) {
                        l.setToken(30, 1, 1);
                        return;
                    }
                }
            }
            break;
        case 125:
            {
                if (l.get_byte_at(l.byte_offset) == 125) {
                    if (isTokenActive(47, tk_row)) {
                        l.setToken(47, 1, 1);
                        return;
                    }
                }
            }
            break;
        default:
            break;
    };
    if (isTokenActive(13, tk_row) && pre_scan(l, 207) && token_production(l, 67109204, 10, 13, 1, states_buffer, scan)) {
        return;
    } else if (isTokenActive(53, tk_row) && pre_scan(l, 208) && token_production(l, 67111710, 48, 53, 2, states_buffer, scan)) {
        return;
    } else if (isTokenActive(86, tk_row) && pre_scan(l, 209) && token_production(l, 67108914, 2, 86, 4, states_buffer, scan)) {
        return;
    } else if (isTokenActive(0, tk_row) && false) {
        l._type = 0;
        return;
    } else if (isTokenActive(8, tk_row) && l.isSP(true)) {
        l._type = 8;
        return;
    } else if (isTokenActive(3, tk_row) && l.isUniID()) {
        l._type = 3;
        return;
    } else if (isTokenActive(2, tk_row) && l.isSym(true)) {
        l._type = 2;
        return;
    } else if (isTokenActive(7, tk_row) && l.isNL()) {
        l._type = 7;
        return;
    } else if (isTokenActive(5, tk_row) && l.isNum()) {
        l._type = 5;
        return;
    }
}

function scan(l, token, skip) {
    if (((l._type) <= 0)) scan_core(l, token);;
    if ((skip > 0 && isTokenActive(l._type, skip))) {
        while ((isTokenActive(l._type, skip))) {
            l.next();
            scan_core(l, token);
        }
    }
}

const js_parser_pack = {

    init_table: () => {
        const table = new Uint8Array(382976);
        init_table(table);
        return table;
    },

    create_iterator: (data) => {
        return new KernelStateIterator(data);
    },

    recognize: (string, entry_index) => {

        const temp_buffer = new Uint8Array(string.length * 4);

        const actual_length = fillByteBufferWithUTF8FromString(string, temp_buffer, temp_buffer.length);

        const input_buffer = new Uint8Array(temp_buffer.buffer, 0, actual_length);

        let entry_pointer = 0;

        switch (entry_index) {

            case 0: default: entry_pointer = 67108868; break;

            case 1: entry_pointer = 67110056; break;

            case 2: entry_pointer = 67110793; break;

            case 3: entry_pointer = 67112866; break;
        }

        return run(
            states_buffer,
            input_buffer,
            input_buffer.length,
            entry_pointer,
            scan,
            false
        );
    }
};


const reduce_functions = [(_, s) => s[s.length - 1], (env, sym, pos) => ({ type: "hc-grammar-5", preamble: sym[0] || [], ir_states: sym[1].ir || [], productions: sym[1].productions, functions: sym[1].functions || [], imported_grammars: [], meta: null, ignore: [], all_symbols: [], bodies: [] }) /*0*/,
(env, sym, pos) => ({ type: "hc-grammar-5", preamble: null || [], ir_states: sym[0].ir || [], productions: sym[0].productions, functions: sym[0].functions || [], imported_grammars: [], meta: null, ignore: [], all_symbols: [], bodies: [] }) /*1*/,
(env, sym, pos) => ([sym[0]]) /*2*/,
(env, sym, pos) => ((sym[0].push(sym[1]), sym[0])) /*3*/,
(env, sym, pos) => ({ type: "ignore", symbols: sym[1], pos }) /*4*/,
(env, sym, pos) => ({ type: "generated", val: sym[1], pos: pos, meta: false }) /*5*/,
(env, sym, pos) => (sym[0] + sym[1]) /*6*/,
(env, sym, pos) => ({ type: "exclusive-literal", val: "" + sym[1], pos: pos, meta: false, annotation: null }) /*7*/,
(env, sym, pos) => ({ type: "literal", val: sym[0], pos: pos, meta: false, annotation: null }) /*8*/,
(env, sym, pos) => ({ type: "literal", val: sym[1], pos: pos, meta: false, annotation: null }) /*9*/,
(env, sym, pos) => ({ type: "eof", val: "DEFAULT", pos: pos, meta: false }) /*10*/,
(env, sym, pos) => ({ type: "production_token", name: sym[1].name, production: sym[1], val: -1, pos: pos, meta: false }) /*11*/,
(env, sym, pos) => ({ type: "sym-production", name: sym[0], production: null, val: -1, pos: pos, meta: false, annotation: null }) /*12*/,
(env, sym, pos) => ({ type: "sym-production-import", module: sym[0], name: sym[2], production: null, pos: pos, meta: false, annotation: null }) /*13*/,
(env, sym, pos) => ({ type: "import", uri: sym[1], reference: sym[3], pos }) /*14*/,
(env, sym, pos) => ({ type: "export", production: sym[1], reference: sym[3], pos }) /*15*/,
(env, sym, pos) => ({ type: "production-section", functions: [], productions: [sym[0]], ir: [], pos }) /*16*/,
(env, sym, pos) => ({ type: "production-section", functions: [sym[0]], productions: [], ir: [], pos }) /*17*/,
(env, sym, pos) => ({ type: "production-section", functions: [], productions: [], ir: [sym[0]], pos }) /*18*/,
(env, sym, pos) => (sym[0].productions.push(sym[1]), sym[0]) /*19*/,
(env, sym, pos) => (sym[0].functions.push(sym[1]), sym[0]) /*20*/,
(env, sym, pos) => (sym[0].ir.push(sym[1]), sym[0]) /*21*/,
(env, sym, pos) => (sym[0]) /*22*/,
(env, sym, pos) => ({ type: "production", priority: sym[1] ? 1000 : 0, symbol: sym[2], bodies: sym[4], id: -1, pos }) /*23*/,
(env, sym, pos) => ({ type: "production-merged", symbol: sym[1], bodies: sym[3], id: -1, pos }) /*24*/,
(env, sym, pos) => ({ type: "production", priority: null ? 1000 : 0, symbol: sym[1], bodies: sym[3], id: -1, pos }) /*25*/,
(env, sym, pos) => ({ type: "production", priority: sym[1] ? 1000 : 0, symbol: sym[2], bodies: null, id: -1, pos }) /*26*/,
(env, sym, pos) => ({ type: "production", priority: null ? 1000 : 0, symbol: sym[1], bodies: null, id: -1, pos }) /*27*/,
(env, sym, pos) => ((sym[0].push(sym[2]), sym[0])) /*28*/,
(env, sym, pos) => ({ type: "body", priority: !!sym[0] ? 1000 : 0, sym: sym[1], reduce_function: sym[2], FORCE_FORK: false, id: -1, production: null, pos }) /*29*/,
(env, sym, pos) => ({ type: "body", sym: sym[0], reduce_function: sym[1], FORCE_FORK: false, id: -1, production: null, pos }) /*30*/,
(env, sym, pos) => ({ type: "body", priority: !!sym[0] ? 1000 : 0, sym: sym[1], reduce_function: null, FORCE_FORK: false, id: -1, production: null, pos }) /*31*/,
(env, sym, pos) => ({ type: "body", sym: sym[0], reduce_function: null, FORCE_FORK: false, id: -1, production: null, pos }) /*32*/,
(env, sym, pos) => (sym[0].concat(sym[1])) /*33*/,
(env, sym, pos) => ([]) /*34*/,
(env, sym, pos) => (env.group_id++, sym[1].flat().map(e => (e.IS_OPTIONAL ? e.IS_OPTIONAL |= env.group_id << 8 : 0, e))) /*35*/,
(env, sym, pos) => ((sym[0].annotation = sym[2], sym[0])) /*36*/,
(env, sym, pos) => (sym[0].IS_OPTIONAL = 1, sym[0]) /*37*/,
(env, sym, pos) => ({ type: "look-behind", val: sym[1].val, phased: sym[1], pos }) /*38*/,
(env, sym, pos) => (sym[1].IS_NON_CAPTURE = true, sym[1]) /*39*/,
(env, sym, pos) => ({ type: "list-production", terminal_symbol: sym[2], IS_OPTIONAL: +(sym[1] == "(*"), val: sym[0], pos: pos, meta: false }) /*40*/,
(env, sym, pos) => ({ type: "list-production", terminal_symbol: null, IS_OPTIONAL: +(sym[1] == "(*"), val: sym[0], pos: pos, meta: false }) /*41*/,
(env, sym, pos) => ({ type: "group-production", val: sym[1], pos: pos, meta: false }) /*42*/,
(env, sym, pos) => ({ type: "meta-exclude", sym: sym[1], meta: true, index: -1, pos: pos }) /*43*/,
(env, sym, pos) => ({ type: "meta-ignore", sym: sym[1], meta: true, index: -1, pos: pos }) /*44*/,
(env, sym, pos) => ({ type: "meta-reset", sym: sym[1], meta: true, index: -1, pos: pos }) /*45*/,
(env, sym, pos) => ({ type: "empty", val: "", pos: pos, meta: false }) /*46*/,
(env, sym, pos) => ({ type: "RETURNED", txt: sym[3], name: "", env: false, ref: "", IS_CONDITION: true, pos }) /*47*/,
(env, sym, pos) => ({ type: "env-function-reference", ref: sym[3], pos }) /*48*/,
(env, sym, pos) => ({ type: "local-function-reference", ref: sym[3], pos }) /*49*/,
(env, sym, pos) => ("FN:F") /*50*/,
(env, sym, pos) => (sym[0] + sym[1] + sym[2]) /*51*/,
(env, sym, pos) => ({ type: "ref-function", id: sym[1], txt: sym[3], pos }) /*52*/,
(env, sym, pos) => ({ type: "state", id: sym[2], instructions: sym[4], fail: sym[5], symbol_meta: sym[6], pos }) /*53*/,
(env, sym, pos) => ({ type: "state", id: sym[1], instructions: sym[3], fail: sym[4], symbol_meta: sym[5], pos }) /*54*/,
(env, sym, pos) => ({ type: "state", id: sym[2], instructions: sym[4], symbol_meta: sym[5], pos }) /*55*/,
(env, sym, pos) => ({ type: "state", id: sym[2], instructions: sym[4], fail: sym[5], pos }) /*56*/,
(env, sym, pos) => ({ type: "state", id: sym[1], instructions: sym[3], symbol_meta: sym[4], pos }) /*57*/,
(env, sym, pos) => ({ type: "state", id: sym[1], instructions: sym[3], fail: sym[4], pos }) /*58*/,
(env, sym, pos) => ({ type: "state", id: sym[2], instructions: sym[4], pos }) /*59*/,
(env, sym, pos) => ({ type: "state", id: sym[1], instructions: sym[3], pos }) /*60*/,
(env, sym, pos) => ({ type: "prod", ids: sym[2], instructions: sym[4], pos }) /*61*/,
(env, sym, pos) => (sym[1]) /*62*/,
(env, sym, pos) => ([...sym[0], ...sym[2], sym[3]]) /*63*/,
(env, sym, pos) => ([...sym[0], sym[1]]) /*64*/,
(env, sym, pos) => ([...sym[0], ...sym[2]]) /*65*/,
(env, sym, pos) => ([...sym[0]]) /*66*/,
(env, sym, pos) => ({ type: "reduce", len: parseInt(sym[1]), reduce_fn: parseInt(sym[2]), pos }) /*67*/,
(env, sym, pos) => ({ type: "reduce", len: -1, reduce_fn: sym[1], pos }) /*68*/,
(env, sym, pos) => ({ type: "set-prod", id: sym[3], pos }) /*69*/,
(env, sym, pos) => ({ type: "fork-to", states: sym[3], pos }) /*70*/,
(env, sym, pos) => ({ type: sym[1] ? "scan-back-until" : "scan-until", ids: sym[3], pos }) /*71*/,
(env, sym, pos) => ({ type: "token-id", id: sym[3], pos }) /*72*/,
(env, sym, pos) => ({ type: "pass", pos }) /*73*/,
(env, sym, pos) => ({ type: "fail", pos }) /*74*/,
(env, sym, pos) => ({ type: "not-in-scopes", ids: sym[4], pos }) /*75*/,
(env, sym, pos) => ({ type: "set-scope", scope: sym[3], pos }) /*76*/,
(env, sym, pos) => ({ type: "consume", EMPTY: !!sym[1], pos }) /*77*/,
(env, sym, pos) => ({ type: null ? "scan-back-until" : "scan-until", ids: sym[2], pos }) /*78*/,
(env, sym, pos) => ({ type: "consume", pos }) /*79*/,
(env, sym, pos) => (sym[2]) /*80*/,
(env, sym, pos) => ({ type: "goto", state: sym[1], pos }) /*81*/,
(env, sym, pos) => ({ type: "peek", ids: sym[1], instructions: sym[3], pos }) /*82*/,
(env, sym, pos) => ({ type: "assert", ids: sym[1], instructions: sym[3], pos }) /*83*/,
(env, sym, pos) => ({ type: "on-fail-state", id: sym[2], instructions: sym[3], symbol_meta: sym[5], fail: sym[4], pos }) /*84*/,
(env, sym, pos) => ({ type: "on-fail-state", id: sym[2], instructions: sym[3], symbol_meta: sym[4], pos }) /*85*/,
(env, sym, pos) => ({ type: "on-fail-state", id: sym[2], instructions: sym[3], fail: sym[4], pos }) /*86*/,
(env, sym, pos) => ({ type: "on-fail-state", id: sym[2], instructions: sym[3], pos }) /*87*/,
(env, sym, pos) => ({ type: "symbols", expected: sym[2], skipped: sym[3] || [], pos }) /*88*/,
(env, sym, pos) => ({ type: "symbols", expected: sym[2], skipped: null || [], pos }) /*89*/,
(env, sym, pos) => ({ type: "state", id: sym[0], instructions: sym[1], fail: sym[2], symbol_meta: sym[3], pos }) /*90*/,
(env, sym, pos) => ({ type: "state", id: sym[0], instructions: sym[1], symbol_meta: sym[2], pos }) /*91*/,
(env, sym, pos) => ({ type: "state", id: sym[0], instructions: sym[1], fail: sym[2], pos }) /*92*/,
(env, sym, pos) => ({ type: "state", id: sym[0], instructions: sym[1], pos }) /*93*/,
(env, sym, pos) => ({ type: "ERROR_RECOVERY", lexer_text: sym[3], body_text: sym[6], pos }) /*94*/,
(env, sym, pos) => ({ type: "function-inline", txt: sym[2], name: "", env: false, IS_CONDITION: true, pos }) /*95*/,
(env, sym, pos) => ({ type: "INLINE", txt: "", name: sym[2], env: true, IS_CONDITION: true, pos }) /*96*/,
(env, sym, pos) => (sym[0] + "") /*97*/,
(env, sym, pos) => ({ type: "repeat-state", pos }) /*98*/,
(env, sym, pos) => (parseInt(sym[0])) /*99*/,
(env, sym, pos) => (sym[0] + "DD") /*100*/];

export default ParserFramework(
    reduce_functions,
    {
        hc: 0,
        prd: 1,
        sym: 2,
        ir: 3,
    },
    js_parser_pack,

);

