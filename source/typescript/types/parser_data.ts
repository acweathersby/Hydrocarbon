/* 
 * Copyright (C) 2021 Anthony Weathersby - The Hydrocarbon Parser Compiler
 * see /source/typescript/hydrocarbon.ts for full copyright and warranty 
 * disclaimer notice.
 */
export interface ParserData {
    ptr?: number;
    input_ptr: number;
    rules_ptr: number;
    error_ptr: number;
    debug_ptr: number;
    input_len: number;
    rules_len: number;
    error_len: number;
    debug_len: number;
    input: Uint8Array;
    rules: Uint32Array;
    error: Uint8Array;
    debug: Uint16Array;
}
export interface ForkData {
    VALID: boolean;
    byte_offset: number;
    byte_length: number;
    line: number;
    last_production?: number;
}

export interface RecognizeInitializer {
    /**
     * Reset any existing data from previous recognizer runs and
     * reinitialize buffers for new data.
     * 
     * Returns a Uint8Array buffer for input string data. This buffer
     * size is the same as input_len
     */
    init_data: (
        input_len: number,
        rules_len: number,
    ) => Uint8Array,

    /**
     * Returns a 64*16bit block of data used to buffer output data, in 128byte
     * increments. Every time this function is called the internal 
     * offset is increased by 128 bytes. 
     */
    get_next_command_block: (fork_ptr: ForkData) => Uint16Array;

    /**
     * Use this function to acquire the Unicode Symbol Look Up Table
     */
    init_table: () => Uint8Array,

    /**
    * Returns a list of all forks that have been generated by recognizer.
    * 
    * If `PRUNE_FAILED` is set to true, only the root path is returned in 
    * the absence of any other valid recognizer forks.
    * 
    * if `PRUNE_FAILED` is set to fails, ALL forks are returned, valid or
    * otherwise.
    */
    get_fork_pointers: () => ForkData[];

    /**
     * Start the recognizer process. Should be called only after init_data 
     * has been called. 
     * 
     * input_size: number - The actual length of the input string in bytes.
     * 
     * production_id: number - The production index from which to start parsing
     * thee input.
     * 
     * Returns the number of ParserData blocks that where created during the 
     * recognition processing.
     */
    recognize: (input_size: number, production_id: number) => number;
}
