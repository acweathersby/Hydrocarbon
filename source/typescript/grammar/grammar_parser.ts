
import {
    ParserFactory
} from "../runtime/parser_loader_gamma.js";
import URI from "@candlelib/uri";;

const wasm_recognizer = URI.resolveRelative("./grammar_parser.wasm", URI.getEXEURL(import.meta)),

    reduce_functions = [(_, s) => s[s.length - 1], (env, sym, pos) => ({ type: "hc-grammar-3", preamble: sym[0] || [], productions: sym[1].productions, functions: sym[1].functions || [], imported_grammars: [], meta: null, ignore: [], all_symbols: [], bodies: [] }) /*0*/,
    (env, sym, pos) => ({ type: "hc-grammar-3", preamble: null || [], productions: sym[0].productions, functions: sym[0].functions || [], imported_grammars: [], meta: null, ignore: [], all_symbols: [], bodies: [] }) /*1*/,
    (env, sym, pos) => ([sym[0]]) /*2*/,
    (env, sym, pos) => ((sym[0].push(sym[1]), sym[0])) /*3*/,
    (env, sym, pos) => ({ type: "ignore", symbols: sym[2] }) /*4*/,
    (env, sym, pos) => ({ type: "generated", val: sym[1], pos: pos, meta: false }) /*5*/,
    (env, sym, pos) => (sym[0] + sym[1]) /*6*/,
    (env, sym, pos) => ({ type: "exclusive-literal", val: "" + sym[1], pos: pos, meta: false }) /*7*/,
    (env, sym, pos) => ({ type: "literal", val: sym[1], pos: pos, meta: false }) /*8*/,
    (env, sym, pos) => ({ type: "production_token", name: sym[1], production: null, val: -1, pos: pos, meta: false }) /*9*/,
    (env, sym, pos) => ({ type: "import", uri: sym[3], reference: sym[6] }) /*10*/,
    (env, sym, pos) => ({ type: "import", uri: sym[2], reference: sym[5] }) /*11*/,
    (env, sym, pos) => ({ type: "comment", value: sym[1] }) /*12*/,
    (env, sym, pos) => ({ type: "production-section", functions: [], productions: [sym[0]] }) /*13*/,
    (env, sym, pos) => ({ type: "production-section", functions: [sym[0]], productions: [] }) /*14*/,
    (env, sym, pos) => (sym[0].productions.push(sym[1]), sym[0]) /*15*/,
    (env, sym, pos) => (sym[0]) /*16*/,
    (env, sym, pos) => (sym[0].functions.push(sym[1]), sym[0]) /*17*/,
    (env, sym, pos) => ({ type: "production", name: sym[2], bodies: sym[4], id: -1, recovery_handler: sym[5], pos: pos, recursion: 0, ROOT_PRODUCTION: !!sym[1] }) /*18*/,
    (env, sym, pos) => ({ type: "production-merged-import", name: sym[1], bodies: sym[3], id: -1, recovery_handler: sym[4], ROOT_PRODUCTION: false }) /*19*/,
    (env, sym, pos) => ({ type: "production", name: sym[1], bodies: sym[3], id: -1, recovery_handler: sym[4], pos: pos, recursion: 0, ROOT_PRODUCTION: !!null }) /*20*/,
    (env, sym, pos) => ({ type: "production", name: sym[2], bodies: null, id: -1, recovery_handler: sym[4], pos: pos, recursion: 0, ROOT_PRODUCTION: !!sym[1] }) /*21*/,
    (env, sym, pos) => ({ type: "production", name: sym[1], bodies: null, id: -1, recovery_handler: sym[3], pos: pos, recursion: 0, ROOT_PRODUCTION: !!null }) /*22*/,
    (env, sym, pos) => ((sym[0].push(sym[2]), sym[0])) /*23*/,
    (env, sym, pos) => ({ type: "body", sym: sym[3], reduce_function: sym[4], FORCE_FORK: !!sym[2], id: -1, production: null }) /*24*/,
    (env, sym, pos) => ({ type: "body", sym: sym[0], reduce_function: sym[1], FORCE_FORK: !!null, id: -1, production: null }) /*25*/,
    (env, sym, pos) => ({ type: "body", sym: sym[3], reduce_function: null, FORCE_FORK: !!sym[2], id: -1, production: null }) /*26*/,
    (env, sym, pos) => ({ type: "body", sym: sym[0], reduce_function: null, FORCE_FORK: !!null, id: -1, production: null }) /*27*/,
    (env, sym, pos) => (sym[0].concat(sym[1])) /*28*/,
    (env, sym, pos) => ([]) /*29*/,
    (env, sym, pos) => (env.group_id++, sym[1].flat().map(e => (e.IS_OPTIONAL ? e.IS_OPTIONAL |= env.group_id << 8 : 0, e))) /*30*/,
    (env, sym, pos) => (sym[0].IS_OPTIONAL = 1, sym[0]) /*31*/,
    (env, sym, pos) => ({ type: "look-behind", val: sym[1].val, phased: sym[1] }) /*32*/,
    (env, sym, pos) => (sym[1].IS_NON_CAPTURE = true, sym[1]) /*33*/,
    (env, sym, pos) => ({ type: "group-production", val: sym[1], pos: pos, meta: false }) /*34*/,
    (env, sym, pos) => ({ type: "list-production", terminal_symbol: sym[2], IS_OPTIONAL: +(sym[1] == "(*"), val: sym[0], pos: pos, meta: false }) /*35*/,
    (env, sym, pos) => ({ type: "literal", val: sym[0], pos: pos, meta: false }) /*36*/,
    (env, sym, pos) => ({ type: "list-production", terminal_symbol: null, IS_OPTIONAL: +(sym[1] == "(*"), val: sym[0], pos: pos, meta: false }) /*37*/,
    (env, sym, pos) => ({ type: "sym-production", name: sym[0], production: null, val: -1, pos: pos, meta: false }) /*38*/,
    (env, sym, pos) => ({ type: "sym-production-import", module: sym[0], production: sym[2], name: "", pos: pos, meta: false }) /*39*/,
    (env, sym, pos) => ({ type: "eof", val: "END_OF_FILE", pos: pos, meta: false }) /*40*/,
    (env, sym, pos) => ({ type: "meta-exclude", sym: sym[1], meta: true, index: -1 }) /*41*/,
    (env, sym, pos) => ({ type: "meta-error", sym: sym[1], meta: true, index: -1 }) /*42*/,
    (env, sym, pos) => ({ type: "meta-ignore", sym: sym[1], meta: true, index: -1 }) /*43*/,
    (env, sym, pos) => ({ type: "meta-reset", sym: sym[1], meta: true, index: -1 }) /*44*/,
    (env, sym, pos) => ({ type: "meta-reduce", sym: sym[1], meta: true, index: -1 }) /*45*/,
    (env, sym, pos) => ({ type: "empty", val: "", pos: pos, meta: false }) /*46*/,
    (env, sym, pos) => ({ type: "RETURNED", txt: sym[3], name: "", env: false, ref: "", IS_CONDITION: true }) /*47*/,
    (env, sym, pos) => ({ type: "env-function-reference", ref: sym[3] }) /*48*/,
    (env, sym, pos) => ({ type: "local-function-reference", ref: sym[3] }) /*49*/,
    (env, sym, pos) => ("FN:F") /*50*/,
    (env, sym, pos) => ("<--" + sym[0].type + "^^" + sym[0].val + "-->") /*51*/,
    (env, sym, pos) => (sym[0] + sym[1] + sym[2]) /*52*/,
    (env, sym, pos) => ({ type: "ref-function", id: sym[1], txt: sym[3] }) /*53*/,
    (env, sym, pos) => (sym[0] + "") /*54*/,
    (env, sym, pos) => (env.prod_name = sym[0]) /*55*/,
    (env, sym, pos) => (env.prod_name = sym[0].val, sym[0]) /*56*/,
    (env, sym, pos) => (sym[0] + "GG") /*57*/];

export default ParserFactory
    (reduce_functions, wasm_recognizer, undefined, { hydrocarbon: 0 });