
import {
    ParserFrameworkNew as ParserFramework,
    KernelParserCore2,
    fillByteBufferWithUTF8FromString
} from "../entry/runtime.js";


const {
    token_production,
    init_table,
    KernelStateIterator,
    run,
    compare
} = KernelParserCore2;

const token_sequence_lookup = new Uint8Array([
    35, 47, 47, 42, 47, 64, 73, 71, 78, 79, 82, 69, 103, 111, 116, 111, 95, 116, 111, 107, 101, 110, 92,
    36, 101, 109, 112, 116, 121, 58, 58, 60, 62, 33, 43, 62, 124, 94, 91, 93, 63, 61, 40, 69, 88, 67, 41,
    123, 125, 123, 102, 111, 114, 107, 45, 115, 121, 109, 98, 111, 108, 115, 58, 46, 44, 97, 115, 115,
    101, 114, 116, 65, 83, 114, 101, 99, 111, 118, 101, 114, 80, 82, 79, 68, 85, 67, 84, 73, 79, 78, 112,
    101, 101, 107, 67, 79, 68, 69, 80, 79, 73, 78, 84, 79, 75, 69, 78, 66, 89, 84, 69, 98, 97, 99, 107,
    117, 110, 116, 105, 108, 105, 100, 110, 111, 116, 104, 105, 110, 103, 119, 105, 116, 104, 105,
    110, 99, 111, 110, 115, 117, 109, 101, 120, 112, 101, 99, 116, 101, 100, 64, 73, 77, 80, 79, 82,
    84, 103, 58, 116, 104, 101, 110, 36, 101, 111, 102, 60, 61, 40, 73, 71, 78, 102, 97, 105, 108, 115,
    107, 105, 112, 112, 101, 100, 97, 115, 115, 105, 103, 110, 114, 101, 116, 117, 114, 110, 112, 114,
    111, 100, 67, 76, 65, 83, 83, 101, 114, 104, 64, 69, 88, 80, 79, 82, 84, 116, 107, 58, 116, 58, 60,
    91, 40, 82, 83, 84, 40, 42, 40, 43, 102, 58, 115, 99, 111, 112, 101, 115, 116, 97, 116, 101, 115,
    99, 97, 110, 115, 101, 116, 114, 101, 100, 117, 99, 101, 114, 101, 112, 101, 97, 116, 112, 97, 115,
    115
]);

const token_lookup = new Uint32Array([
    641737088, 2621440, 0, 2, 384, 0, 0, 2, 603980162, 2621440, 0, 2, 386, 0, 0, 2, 386, 0, 0, 0, 384,
    0, 0, 0, 3584, 0, 0, 0, 2, 0, 0, 0, 512, 0, 0, 0, 302, 0, 0, 0, 300, 0, 0, 0, 4, 0, 0, 0, 8, 0, 0, 0, 32, 0,
    0, 0, 256, 0, 0, 0, 1024, 0, 0, 0, 2048, 0, 0, 0, 4096, 0, 0, 0, 37757312, 0, 0, 2, 8576, 0, 0, 2, 256,
    0, 0, 2, 1982884, 0, 0, 2, 3827220902, 2629630, 0, 2, 4095656358, 2629630, 25165825, 2, 416,
    0, 0, 0, 3827220866, 2629630, 0, 2, 388, 0, 0, 0, 258, 0, 0, 2, 16768, 0, 0, 2, 33152, 0, 0, 2, 131492,
    0, 0, 2, 131456, 0, 0, 2, 0, 0, 0, 2, 3864977830, 2629630, 0, 2, 3827220646, 2629630, 0, 2, 3827220772,
    2629630, 0, 2, 3827220900, 2629630, 0, 2, 128, 0, 0, 2, 262528, 0, 0, 2, 524672, 0, 0, 2, 1048960,
    0, 0, 2, 4122919334, 2662398, 293601281, 2, 4120822182, 2662398, 293601281, 2, 2130304,
    0, 0, 2, 2097536, 0, 0, 2, 4194688, 0, 0, 2, 25166208, 0, 0, 2, 33554816, 0, 0, 2, 392, 0, 0, 2, 603980160,
    2621440, 0, 2, 603980160, 0, 0, 2, 67109248, 0, 0, 2, 134250880, 0, 0, 2, 268435840, 0, 0, 2, 2887696806,
    2637362, 0, 2, 536871296, 0, 0, 2, 2283717028, 15922, 0, 2, 1982884, 128, 0, 2, 384, 128, 0, 2,
    1679737254, 2629298, 0, 2, 1677721986, 2621568, 0, 2, 134218112, 0, 0, 2, 2149499300, 15922,
    0, 2, 2015652, 15922, 0, 2, 2147484032, 0, 0, 2, 1679737254, 2105010, 0, 2, 2015652, 7730, 0,
    2, 384, 2, 0, 2, 384, 4, 0, 2, 2015652, 560, 0, 2, 384, 16, 0, 2, 384, 32, 0, 2, 1679737254, 2629630,
    0, 2, 384, 512, 0, 2, 384, 7168, 0, 2, 384, 1024, 0, 2, 384, 2048, 0, 2, 384, 4096, 0, 2, 384, 8192,
    0, 2, 384, 278528, 0, 2, 2147484032, 32768, 0, 2, 384, 65536, 0, 2, 384, 131072, 0, 2, 384, 524288,
    0, 2, 2147516800, 0, 0, 2, 384, 32768, 0, 2, 2147484032, 32768, 268435456, 2, 384, 2097152,
    0, 2, 384, 12582912, 0, 2, 268435840, 0, 25165824, 2, 268435840, 0, 16777216, 2, 384, 167772160,
    4776751, 2, 268435842, 128, 25165825, 2, 384, 0, 1077936128, 2, 384, 0, 1073741825, 2, 384,
    0, 1, 0, 384, 0, 1078518572, 2, 384, 0, 1, 2, 384, 0, 4776748, 2, 268435842, 167772160, 25165824,
    2, 384, 167772160, 0, 2, 384, 33554432, 0, 2, 384, 4093640704, 0, 2, 384, 134217728, 0, 2, 384,
    4026531840, 0, 2, 384, 0, 4776751, 2, 384, 0, 2, 2, 384, 0, 582444, 2, 384, 0, 4, 2, 416, 524288,
    0, 2, 416, 0, 0, 2, 384, 0, 8, 2, 384, 0, 16, 2, 384, 0, 32, 2, 384, 0, 262224, 2, 384, 0, 128, 2, 33184,
    0, 0, 2, 384, 0, 4096, 2, 384, 0, 256, 2, 384, 0, 512, 2, 384, 0, 3072, 2, 384, 0, 2048, 2, 384, 0, 8192,
    2, 384, 0, 16384, 2, 384, 0, 32768, 2, 384, 0, 65536, 2, 384, 0, 131072, 2, 384, 0, 524288, 2, 268435842,
    128, 26214401, 2, 384, 0, 2097152, 2, 33152, 8388608, 0, 2, 384, 0, 4194304, 2, 268435842, 0,
    25165824, 2, 268435842, 0, 16777216, 2, 384, 8388608, 0, 2, 384, 0, 33554432, 2, 268435842,
    0, 16777216, 3, 386, 0, 25165824, 2, 386, 0, 16777216, 2, 130, 0, 0, 0, 128, 0, 0, 0, 428, 0, 0, 0,
    4524, 0, 0, 0, 424, 0, 0, 0, 392, 0, 0, 0, 3827220910, 2629630, 0, 2, 4095656366, 2629630, 25165825,
    2, 3827220908, 2629630, 0, 0, 3827220876, 2629630, 0, 2, 420, 0, 0, 0, 430, 0, 0, 2, 396, 0, 0,
    0, 25166220, 0, 0, 2, 2015652, 7734, 0, 2, 384, 0, 268435456, 0, 2147484064, 0, 536870912, 2,
    33184, 4, 0, 2, 268435840, 128, 25165825, 0, 384, 0, 1073741824, 0, 384, 0, 2097152, 0, 384,
    128, 2147483648, 2, 1982852, 0, 0, 2, 1982884, 4, 0, 2, 1982852, 4, 0, 2, 65544, 0, 0, 0, 65536,
    0, 0, 0, 65576, 0, 0, 0, 0, 1, 0, 0, 32768, 0, 0, 0, 430, 1081344, 0, 0, 428, 1212416, 0, 0, 428, 1048576,
    0, 0, 0, 1048576, 0, 0, 0, 32768, 0, 0, 0, 131072, 0, 0, 65576, 16777216, 0, 0, 0, 16777216, 0, 0
]);

const states_buffer = new Uint32Array([
    0, 4026531840, 2164260864, 4026531841, 2852126731, 1, 131079, 2168463385, 2143297549,
    2155880470, 2147483699, 2147483674, 2151677981, 2147483701, 2147483648, 603979859,
    603980669, 0, 2147483648, 2147483655, 603979859, 603980042, 603980029, 603980058, 0,
    4026531840, 2852126733, 131073, 131076, 2147500085, 2143289373, 2147483674, 2147489843,
    603979826, 603980742, 0, 2147483693, 603979829, 603981877, 603981867, 0, 2147483695,
    268435456, 603979832, 603982031, 0, 1073742344, 805306369, 0, 0, 1073746960, 805306394,
    0, 1073747216, 805306394, 0, 1073747472, 805306394, 0, 2852126726, 1, 131079, 2168455193,
    2143289357, 2155872278, 2147489843, 2147489818, 2151684125, 2147489845, 603979853,
    603980058, 0, 603979856, 603980669, 0, 4026531840, 0, 1073742864, 805306375, 0, 1073742096,
    805306369, 0, 2768240650, 0, 131076, 2147502080, 2147495937, 2147483674, 2147489799,
    603979859, 603979802, 0, 603979859, 603979835, 0, 805306368, 3221225487, 0, 0, 4026531840,
    2583691273, 393216, 196612, 4026531840, 0, 0, 0, 2147483650, 603979897, 603979899, 0, 2147483650,
    603979897, 603979980, 0, 2147483650, 603979897, 603980009, 0, 0, 805306370, 0, 2852192260,
    524288, 1, 2147483657, 2147483651, 268435456, 603979909, 0, 4026531840, 0, 2852126726,
    589824, 131076, 2147483656, 2147483653, 2147483650, 2147483651, 2147483711, 603979925,
    603983173, 603983155, 603979928, 0, 805306371, 0, 0, 1073741840, 805306371, 0, 2852126732,
    655360, 131076, 2147502088, 2147495941, 2147483650, 2147489795, 2147483652, 603979948,
    0, 2147483652, 603979956, 0, 2147483652, 603979964, 0, 2147483652, 603979972, 0, 4026531840,
    2852192259, 720896, 1, 2147483650, 268435456, 805306372, 0, 4026531840, 2852192259, 786432,
    1, 2147483651, 268435456, 805306372, 0, 4026531840, 2852192259, 851968, 1, 2147483653,
    268435456, 805306372, 0, 4026531840, 2852192259, 917504, 1, 2147483656, 268435456, 805306372,
    0, 4026531840, 2852192260, 983040, 1, 2147483658, 2147483653, 268435456, 603979990, 0,
    4026531840, 0, 2852126726, 589824, 131076, 2147483656, 2147483653, 2147483650, 2147483651,
    2147483711, 603980006, 603983173, 603983155, 603979928, 0, 805306373, 0, 0, 1073741840,
    805306373, 0, 2852192261, 1048576, 1, 2147483659, 2147483654, 268435456, 603980019, 603983189,
    0, 4026531840, 2852192260, 1114112, 1, 2147483660, 268435456, 1073741848, 805306374,
    0, 4026531840, 0, 1073742600, 805306375, 0, 2852126723, 1, 65539, 2147483670, 2151677965,
    2147483673, 603979853, 603980058, 0, 4026531840, 3087008020, 2499805191, 0, 65539, 4026531840,
    0, 0, 603980042, 603980032, 0, 2499805191, 0, 65537, 4026531840, 0, 0, 2852126732, 1179649,
    65539, 2147491862, 2151677965, 2147500057, 2147483656, 603980078, 603980080, 0, 2147483656,
    603980078, 603980606, 0, 2147483656, 603980078, 603980639, 0, 4026531840, 0, 805306376,
    0, 2852192261, 1245185, 1, 2147483661, 2147483657, 268435456, 603980090, 603980100, 0,
    4026531840, 2852192260, 65556, 1, 2147483655, 268435456, 1073743128, 805306377, 0, 4026531840,
    0, 2852126732, 1376257, 131079, 2147500052, 2164260869, 2155872258, 2147500051, 2155888654,
    2147491857, 2147500050, 2147483658, 603980192, 603983371, 0, 2147483658, 603980192,
    603980340, 0, 2147483658, 603980192, 603980266, 0, 4026531840, 0, 2852126724, 1441812,
    65538, 2147487746, 2147483653, 603980136, 0, 603980161, 0, 1073744136, 805306383, 0, 2785017858,
    1507348, 131076, 2151677980, 2151678016, 2147483736, 2147483735, 603980158, 0, 603980148,
    0, 0, 2852192260, 1572869, 1, 2147483653, 268435456, 1073743632, 805306434, 0, 4026531840,
    0, 1073744136, 805306383, 0, 603980163, 0, 2852192260, 1703941, 1, 2147483650, 268435456,
    1073743632, 805306434, 0, 4026531840, 0, 805306380, 0, 2852126723, 1376276, 131079, 2147483668,
    2164260869, 2155872258, 2147483667, 2155872270, 2147483665, 2147483666, 603980189,
    603980224, 0, 4026531840, 1073742864, 805306378, 0, 3087008186, 2768240656, 0, 131077,
    2147495948, 2147489807, 2155898890, 2139113483, 2147483714, 603980192, 603980124, 0,
    805306380, 3221225486, 0, 805306379, 3221225489, 0, 1073742600, 805306378, 3221225493,
    0, 603980192, 603980175, 0, 4026531840, 2499805194, 0, 65537, 4026531840, 0, 0, 2852126732,
    1376257, 131079, 2147500052, 2164260869, 2155872258, 2147500051, 2155888654, 2147491857,
    2147500050, 2147483659, 603980248, 603983371, 0, 2147483659, 603980248, 603980340, 0,
    2147483659, 603980248, 603980266, 0, 4026531840, 0, 2768240650, 0, 131076, 2147495948,
    2147489807, 2147483714, 2139113483, 603980248, 603980124, 0, 805306380, 3221225484,
    0, 805306379, 3221225487, 0, 0, 4026531840, 2852126748, 1376257, 131079, 2147530772, 2164260869,
    2155872258, 2147520531, 2155888654, 2147491857, 2147510290, 2147483660, 603980306,
    603983371, 0, 2147483660, 603980306, 603980340, 0, 2147483660, 603980306, 603980173,
    603980320, 0, 2147483660, 603980306, 603980173, 603980511, 0, 2147483660, 603980306,
    603980173, 603980527, 0, 2147483660, 603980306, 603980173, 603980537, 0, 4026531840,
    0, 2768240647, 0, 65539, 2155884556, 2147489807, 2147483714, 603980306, 603980124, 0,
    805306380, 3221225483, 0, 0, 4026531840, 2852192260, 1835009, 1, 2147483662, 2147483661,
    268435456, 603980330, 0, 4026531840, 0, 2852192260, 1900545, 1, 2147483663, 268435456,
    1073743376, 805306381, 0, 4026531840, 0, 2852126728, 1966081, 65539, 2147491842, 2151686149,
    2147483665, 2147483663, 603980469, 603980356, 0, 2147483663, 603980469, 603983371, 0,
    4026531840, 0, 2852192260, 2031617, 1, 2147483665, 268435456, 603980366, 603983255, 0,
    4026531840, 0, 2852126724, 1441824, 262172, 2227179538, 2218790929, 2139099138, 2218790931,
    2218790932, 2218790917, 2147487782, 2214592519, 2214596616, 2147487785, 2210402330,
    2147487787, 2147487788, 2147487773, 2155876366, 2155876367, 2147487774, 2147487775,
    2147487777, 2147487778, 2172653603, 2147487780, 2168459301, 2147487783, 2147487784,
    2147487786, 2147487795, 2147487797, 603980406, 0, 603980431, 0, 1610612738, 67109513,
    67109516, 0, 0, 2785017858, 2162708, 65539, 2147483670, 2151677965, 2147483673, 603980422,
    0, 603980416, 0, 603980419, 603980479, 0, 1073743896, 805306383, 0, 1073743888, 805306383,
    0, 603980419, 603980479, 0, 1073743888, 805306383, 0, 2852126726, 2359333, 262171, 2227181586,
    2218792977, 2139101186, 2218792979, 2218792980, 2218792965, 2147489830, 2147489831,
    2210398216, 2147489833, 2206210074, 2147489835, 2147489836, 2147489821, 2155878414,
    2155878415, 2147489822, 2147489823, 2147489825, 2147489826, 2168461347, 2147489828,
    2164267045, 2147489832, 2147489834, 2147489843, 2147489845, 603980419, 603980479, 0,
    1073743888, 805306383, 0, 4026531840, 0, 2768240644, 0, 65538, 2147483714, 2147489807,
    603980469, 603980124, 0, 0, 4026531840, 2583691271, 196640, 131076, 2147483664, 268435457,
    805306384, 0, 2147483664, 603980503, 0, 0, 2147483664, 603980495, 0, 0, 0, 2852192259, 65573,
    1, 2147483656, 268435456, 805306384, 0, 4026531840, 2852192259, 65556, 1, 2147483655,
    268435456, 805306384, 0, 4026531840, 2852192261, 2490369, 1, 2147483666, 2147483665,
    268435456, 603980521, 603983441, 0, 4026531840, 603980524, 603980479, 0, 1073744408,
    805306385, 0, 2852192261, 2555905, 1, 2147483667, 2147483666, 268435456, 1073744648,
    805306386, 0, 4026531840, 2852192261, 2621441, 1, 2147483668, 2147483667, 268435456,
    603980547, 603980550, 0, 4026531840, 1073744912, 805306387, 0, 2852192259, 1900545, 1,
    2147483663, 2147483668, 603980558, 0, 4026531840, 2516582421, 2686996, 65538, 603980566,
    0, 603980578, 0, 0, 2852192261, 2752513, 1, 2147483663, 2147483669, 268435456, 1073745160,
    805306388, 0, 4026531840, 805306388, 0, 2852192261, 2818049, 1, 2147483663, 2147483670,
    268435456, 603980576, 603980588, 0, 4026531840, 2852192259, 2883585, 1, 2147483669, 268435456,
    603980596, 0, 4026531840, 2852192260, 1900545, 1, 2147483663, 268435456, 1073745432,
    805306390, 0, 4026531840, 0, 2852192261, 2949121, 1, 2147483670, 2147483671, 268435456,
    603980616, 603983519, 0, 4026531840, 2852126724, 3014657, 65538, 2147483672, 2147483671,
    268435456, 603980626, 603980629, 0, 4026531840, 1073745696, 805306391, 0, 2852192260,
    1900545, 1, 2147483663, 2147483672, 268435456, 805306392, 0, 4026531840, 0, 2852192261,
    3080193, 1, 2147483673, 2147483673, 268435456, 603980649, 603980550, 0, 4026531840, 2852126723,
    3014657, 65538, 2147483672, 2147483671, 268435456, 603980659, 0, 4026531840, 0, 2852192260,
    3145729, 1, 2147483651, 268435456, 1073745952, 805306393, 0, 4026531840, 0, 2852126737,
    3211265, 131076, 2147508277, 2143289373, 2147483674, 2147493939, 2147483674, 603980726,
    603980695, 603980742, 0, 2147483674, 2147483693, 603980726, 603980698, 603981877, 603981867,
    0, 2147483674, 603980726, 603980701, 603982021, 0, 4026531840, 0, 1073746184, 805306394,
    0, 1073746440, 805306394, 0, 1073746696, 805306394, 0, 2852126733, 131073, 131076, 2147500085,
    2143289373, 2147483674, 2147489843, 603979826, 603980742, 0, 2147483693, 603979829,
    603981877, 603981867, 0, 2147483695, 268435456, 603979832, 603982031, 0, 4026531840,
    0, 3087008704, 2499805210, 0, 65539, 4026531840, 0, 0, 603980726, 603980704, 0, 2499805210,
    0, 65537, 4026531840, 0, 0, 2852126726, 3276801, 65538, 2147483674, 2147489821, 2147483675,
    603980754, 0, 2147483675, 603980854, 0, 4026531840, 2852192259, 3342337, 1, 2147483674,
    268435456, 603980762, 0, 4026531840, 2852126728, 3407873, 65538, 2147483675, 2143297551,
    268435456, 603980776, 603980550, 0, 2147483668, 603980815, 603980558, 0, 4026531840,
    2852192259, 3473409, 1, 2147483676, 268435456, 603980784, 0, 4026531840, 2852126723,
    3538945, 262162, 2147483666, 2172649489, 2139095042, 2147483667, 2164260884, 2193620997,
    2147483679, 2147483681, 2147483684, 2147483689, 2147483690, 2172649499, 2147483692,
    2147483693, 2147483662, 2109734927, 2147483685, 2147483691, 603980812, 603980877, 0,
    1073748512, 805306395, 0, 0, 1073747752, 805306395, 0, 2852192259, 3473409, 1, 2147483676,
    268435456, 603980823, 0, 4026531840, 2852126723, 3538945, 262162, 2147483666, 2172649489,
    2139095042, 2147483667, 2164260884, 2193620997, 2147483679, 2147483681, 2147483684,
    2147483689, 2147483690, 2172649499, 2147483692, 2147483693, 2147483662, 2109734927,
    2147483685, 2147483691, 603980851, 603980877, 0, 1073748760, 805306395, 0, 0, 1073748256,
    805306395, 0, 2852192260, 3604481, 1, 2147483677, 268435456, 603980864, 603980550, 0,
    4026531840, 0, 2852192260, 3473409, 1, 2147483676, 268435456, 603980874, 603980877, 0,
    4026531840, 0, 1073748000, 805306395, 0, 2852126748, 3670017, 262162, 2147532818, 2172674065,
    2139111426, 2147532819, 2164310036, 2193637381, 2147483679, 2147516449, 2147491876,
    2147491881, 2147516458, 2172649499, 2147516460, 2147524653, 2147532814, 2109743119,
    2147491877, 2147516459, 2147483676, 603981023, 603981081, 0, 2147483676, 603981023,
    603981532, 0, 2147483676, 603981023, 603983371, 0, 2147483676, 603981023, 603980340,
    0, 2147483676, 603981023, 603981386, 0, 2147483676, 603981023, 603981271, 0, 2147483676,
    603981023, 603980266, 0, 4026531840, 805306403, 0, 2852126733, 1441793, 131076, 2147504168,
    2147495971, 2147504166, 2139095071, 2147483678, 268435456, 1073751304, 1073752592,
    805306402, 0, 268435456, 1073752848, 805306403, 0, 268435456, 603980951, 0, 805306402,
    0, 2852126727, 3735553, 196616, 2147483666, 2147483665, 2139095042, 2147483667, 2147483668,
    2147483653, 2147483662, 2147489831, 603980971, 603980266, 0, 268435456, 1073753880,
    805306403, 0, 4026531840, 0, 2852192260, 3801089, 1, 2147483687, 268435456, 1073753632,
    805306403, 0, 4026531840, 0, 1073742600, 805306401, 0, 2852126728, 3866625, 262160, 2147493906,
    2168465425, 2139105282, 2189436947, 2160076820, 2160076805, 2147493921, 2147493924,
    2147493925, 2147493929, 2147493930, 2147493931, 2147493932, 2147483699, 2147493902,
    2147493903, 2147483688, 603981014, 603981823, 603981867, 0, 603981017, 603981386, 0,
    1073751048, 805306397, 0, 1073750288, 805306397, 0, 1073751568, 805306400, 0, 1073749016,
    805306396, 0, 3087009043, 2768240676, 0, 196618, 2147518496, 2147510305, 2176862242,
    2147495971, 2155878412, 2147524637, 2155921436, 2147551247, 2147489828, 2147483714,
    603981023, 603980124, 0, 805306403, 3221225491, 0, 603981023, 603980929, 0, 1073742600,
    805306401, 3221225498, 0, 1073751816, 805306400, 3221225502, 0, 603981023, 603980984,
    0, 1073742600, 805306396, 3221225509, 0, 2583691294, 3932161, 65537, 4026531840, 268435456,
    603981023, 603981020, 603981081, 0, 805306380, 3221225521, 0, 4026531840, 0, 2499805212,
    0, 65537, 4026531840, 0, 0, 2852126753, 3670017, 262162, 2147543058, 2172674065, 2139111426,
    2147543059, 2164320276, 2193637381, 2147524639, 2147516449, 2147491876, 2147491881,
    2147516458, 2172649499, 2147516460, 2147534893, 2147543054, 2109743119, 2147491877,
    2147516459, 2147483677, 603981225, 603981137, 0, 2147483677, 603981225, 603981532, 0,
    2147483677, 603981225, 603983371, 0, 2147483677, 603981225, 603980340, 0, 2147483677,
    603981225, 603981386, 0, 2147483677, 603981225, 603981207, 603981261, 0, 2147483677,
    603981225, 603981271, 0, 2147483677, 603981225, 603980266, 0, 4026531840, 0, 2852192259,
    3997697, 1, 2147483675, 268435456, 603981145, 0, 4026531840, 2852126730, 4063233, 262161,
    2147498002, 2172663825, 2139109378, 2147498003, 2164275220, 2193635333, 2147483679,
    2147498017, 2147498020, 2147498025, 2147498026, 2147498027, 2147498028, 2147498029,
    2147497998, 2109749263, 2147498021, 2147483678, 268435456, 1073751304, 805306398, 603981177,
    603981271, 0, 603981192, 603981271, 0, 4026531840, 0, 2852126725, 3932161, 1, 2147483699,
    2147483688, 603981189, 603981823, 603981867, 0, 1073750040, 805306397, 0, 1073749280,
    805306397, 0, 2852126725, 3932161, 1, 2147483699, 2147483688, 603981204, 603981823, 603981867,
    0, 1073750800, 805306397, 0, 1073749784, 805306397, 0, 603981210, 603981271, 0, 2852126725,
    3932161, 1, 2147483699, 2147483688, 603981222, 603981823, 603981867, 0, 1073750544, 805306397,
    0, 1073749528, 805306397, 0, 2768240664, 0, 196616, 2147512352, 2147504161, 2164273186,
    2147489827, 2147524620, 2147530781, 2147483714, 2147518479, 603981225, 603980124, 0,
    603981225, 603980929, 0, 1073742600, 805306401, 3221225492, 0, 1073751816, 805306400,
    3221225496, 0, 603981225, 603980984, 0, 805306380, 3221225502, 0, 805306403, 3221225505,
    0, 0, 4026531840, 2852192261, 4194305, 1, 2147483679, 2147483678, 268435456, 1073751304,
    805306398, 0, 4026531840, 2852126745, 4128769, 262160, 2147526674, 2168471569, 2139103234,
    2147526675, 2160109588, 2160074757, 2147508257, 2147483684, 2147483685, 2147483689,
    2147508266, 2147508267, 2147508268, 2147516461, 2147526670, 2147483663, 2147483680,
    603981344, 603981532, 0, 2147483680, 603981344, 603983371, 0, 2147483680, 603981344,
    603980340, 0, 2147483680, 603981344, 603981386, 0, 2147483680, 603981344, 603981317,
    603981813, 0, 2147483680, 603981344, 603980266, 0, 4026531840, 0, 1073752072, 805306400,
    0, 603981322, 0, 2852126723, 4259841, 196623, 2197815314, 2176843793, 2139095042, 2189426707,
    2168455188, 2168455173, 2147483662, 2147483663, 2160066593, 2168455204, 2147483685,
    2147483689, 2147483690, 2147483691, 2147483692, 603981017, 603981386, 0, 4026531840,
    3087009348, 2768240663, 0, 131079, 2164301836, 2147504161, 2164273186, 2155907087, 2147512352,
    2147489827, 2147483714, 603981344, 603980124, 0, 603981344, 603980929, 0, 1073742600,
    805306401, 3221225492, 0, 1073751816, 805306400, 3221225496, 0, 603981344, 603981320,
    0, 805306380, 3221225502, 0, 805306403, 3221225505, 0, 4026531840, 0, 2499805216, 0, 65537,
    4026531840, 0, 0, 2852126745, 4325377, 196623, 2197848082, 2176860177, 2139103234, 2189459475,
    2168487956, 2168463365, 2147516430, 2147483663, 2160091169, 2168455204, 2147483685,
    2147483689, 2147524650, 2147524651, 2147524652, 2147483681, 603981450, 603981532, 0,
    2147483681, 603981450, 603983371, 0, 2147483681, 603981450, 603980340, 0, 2147483681,
    603981450, 603981430, 0, 2147483681, 603981450, 603980266, 0, 2147483681, 603981450,
    603980981, 603981668, 0, 4026531840, 2852192260, 4390913, 1, 2147483681, 268435456, 603981440,
    603983579, 0, 4026531840, 0, 2852192260, 4456449, 1, 2147483682, 268435456, 1073752344,
    805306401, 0, 4026531840, 0, 2768240657, 0, 131078, 2147510284, 2147516449, 2160078882,
    2151698447, 2147489827, 2147483714, 603981450, 603980124, 0, 603981450, 603980929, 0,
    1073742600, 805306401, 3221225490, 0, 805306380, 3221225493, 0, 805306403, 3221225496,
    0, 0, 4026531840, 0, 2852126736, 4521985, 196619, 2147508242, 2185248785, 2139103234,
    2147508243, 2164285460, 2164269061, 2147508238, 2147483663, 2147483684, 2147483685,
    2147483689, 2147483682, 603981510, 603981532, 0, 2147483682, 603981510, 603983371, 0,
    2147483682, 603981510, 603980340, 0, 2147483682, 603981510, 603980266, 0, 4026531840,
    0, 2768240653, 0, 131077, 2147502092, 2147489827, 2155896866, 2139107343, 2147483714,
    603981510, 603980124, 0, 603981510, 603980929, 0, 805306380, 3221225488, 0, 805306403,
    3221225491, 0, 0, 4026531840, 2852126750, 4521985, 196619, 2147516434, 2185256977, 2139111426,
    2147516435, 2164293652, 2164277253, 2147516430, 2147524623, 2147483684, 2147491877,
    2147534889, 2147483683, 603981620, 603981578, 0, 2147483683, 603981620, 603981591, 0,
    2147483683, 603981620, 603983371, 0, 2147483683, 603981620, 603980340, 0, 2147483683,
    603981620, 603980266, 0, 2147483683, 603981620, 603980927, 603980550, 0, 2147483683,
    603981620, 603980927, 603981648, 0, 4026531840, 0, 2852192260, 4587521, 1, 2147483684,
    268435456, 603981588, 603981532, 0, 4026531840, 0, 1073753104, 805306403, 0, 2852192260,
    4653057, 1, 2147483685, 268435456, 603981601, 603981532, 0, 4026531840, 0, 1073753360,
    805306403, 0, 603981606, 0, 2852126727, 4718593, 65539, 2155880486, 2147483683, 2147491880,
    268435456, 1073752848, 805306403, 0, 268435456, 603980951, 0, 4026531840, 3087009610,
    2768240652, 0, 131076, 2147502092, 2147489827, 2147483714, 2139107343, 603981620, 603980124,
    0, 603981620, 603981604, 0, 805306380, 3221225488, 0, 805306403, 3221225491, 0, 4026531840,
    0, 2499805219, 0, 65537, 4026531840, 0, 0, 2852192261, 4784129, 1, 2147483689, 2147483684,
    268435456, 603981658, 603980877, 0, 4026531840, 2852192260, 3801089, 1, 2147483687, 268435456,
    1073754136, 805306404, 0, 4026531840, 0, 2583691306, 4849665, 196611, 4026531840, 0, 0,
    2147483685, 603981684, 0, 2147483685, 603981704, 0, 2147483685, 603981724, 0, 0, 2852192260,
    4915201, 1, 2147483690, 268435456, 603981694, 603981744, 0, 4026531840, 0, 2852192260,
    3801089, 1, 2147483687, 268435456, 1073754392, 805306405, 0, 4026531840, 0, 2852192260,
    4980737, 1, 2147483691, 268435456, 603981714, 603981744, 0, 4026531840, 0, 2852192260,
    3801089, 1, 2147483687, 268435456, 1073754648, 805306405, 0, 4026531840, 0, 2852192260,
    5046273, 1, 2147483692, 268435456, 603981734, 603981744, 0, 4026531840, 0, 2852192260,
    3801089, 1, 2147483687, 268435456, 1073754904, 805306405, 0, 4026531840, 0, 2852126732,
    1376257, 131079, 2147500052, 2164260869, 2155872258, 2147500051, 2155888654, 2147491857,
    2147500050, 2147483686, 603981785, 603983371, 0, 2147483686, 603981785, 603980340, 0,
    2147483686, 603981785, 603980266, 0, 4026531840, 0, 2852126723, 3735553, 131079, 2147483668,
    2164260869, 2155872258, 2147483667, 2155872270, 2147483665, 2147483666, 603981782,
    603980266, 0, 4026531840, 1073742864, 805306406, 0, 3087009775, 2768240653, 0, 131076,
    2147502092, 2147483714, 2143295526, 2147495951, 603981785, 603980124, 0, 603981785,
    603981768, 0, 805306380, 3221225488, 0, 1073742600, 805306406, 3221225492, 0, 4026531840,
    2499805222, 0, 65537, 4026531840, 0, 0, 2852192261, 5111809, 1, 2147483693, 2147483687,
    268435456, 1073755144, 805306407, 0, 4026531840, 2852126723, 5177345, 65538, 2151677998,
    2147483698, 268435456, 603981833, 0, 4026531840, 0, 2852126729, 5242881, 65538, 2147483695,
    2143295519, 268435456, 603981849, 0, 2147483678, 268435456, 1073751304, 1073755672,
    805306408, 0, 4026531840, 0, 2852192259, 5308417, 1, 2147483696, 268435456, 603981857,
    0, 4026531840, 2852192260, 5373953, 1, 2147483697, 268435456, 1073755432, 805306408,
    0, 4026531840, 0, 2852192260, 5439489, 1, 2147483699, 2147483689, 268435456, 805306409,
    0, 4026531840, 0, 2852126730, 5505025, 65538, 2147483679, 2143301647, 2147483678, 268435456,
    1073751304, 805306398, 603981893, 0, 2147483668, 603981919, 603980558, 0, 4026531840,
    2852192259, 5570561, 1, 2147483695, 268435456, 603981901, 0, 4026531840, 2852192259,
    5308417, 1, 2147483696, 268435456, 603981909, 0, 4026531840, 2852192260, 5373953, 1, 2147483697,
    268435456, 1073755944, 805306413, 0, 4026531840, 0, 2852126735, 5636097, 65539, 2147483740,
    2151696415, 2147495983, 2147483694, 603981941, 603981999, 603981993, 603983686, 0, 268435456,
    603981975, 0, 2147483678, 268435456, 1073751304, 1073756952, 805306413, 0, 4026531840,
    2852126729, 5242881, 65538, 2147483695, 2143295519, 268435456, 603981957, 0, 2147483678,
    268435456, 1073751304, 1073756448, 805306413, 0, 4026531840, 0, 2852192259, 5308417,
    1, 2147483696, 268435456, 603981965, 0, 4026531840, 2852192260, 5373953, 1, 2147483697,
    268435456, 1073756208, 805306413, 0, 4026531840, 0, 2852192259, 5308417, 1, 2147483696,
    268435456, 603981983, 0, 4026531840, 2852192260, 5373953, 1, 2147483697, 268435456, 1073756712,
    805306413, 0, 4026531840, 0, 1073742600, 805306414, 0, 1073742864, 805306414, 0, 3087009983,
    2768240650, 0, 1, 2147483694, 2583691356, 5636097, 65537, 4026531840, 2147483718, 268435456,
    603981999, 603981996, 603983696, 0, 4026531840, 2499805230, 0, 65537, 4026531840, 0, 0,
    2852192260, 5701633, 1, 2147483701, 2147483695, 268435456, 603982031, 0, 4026531840,
    0, 2852126727, 5767169, 65538, 2147483702, 2147491895, 268435456, 603982045, 603980550,
    0, 268435456, 603982113, 0, 4026531840, 0, 2852192260, 4456449, 1, 2147483682, 268435456,
    603982055, 603982181, 0, 4026531840, 0, 2852126734, 5832705, 65539, 2155892764, 2147483735,
    2147493976, 2147483705, 268435456, 603982077, 603983000, 0, 2147483707, 268435456, 603982103,
    603983085, 0, 268435456, 1073758768, 805306415, 0, 4026531840, 0, 2852126729, 5898241,
    65538, 2151688220, 2147483736, 2147483707, 268435456, 603982093, 603983085, 0, 268435456,
    1073758008, 805306415, 0, 4026531840, 0, 2852192260, 3473409, 1, 2147483676, 268435456,
    1073757248, 805306415, 0, 4026531840, 0, 2852192260, 3473409, 1, 2147483676, 268435456,
    1073757752, 805306415, 0, 4026531840, 0, 2852192260, 4456449, 1, 2147483682, 268435456,
    603982123, 603982181, 0, 4026531840, 0, 2852126734, 5832705, 65539, 2155892764, 2147483735,
    2147493976, 2147483705, 268435456, 603982145, 603983000, 0, 2147483707, 268435456, 603982171,
    603983085, 0, 268435456, 1073759016, 805306415, 0, 4026531840, 0, 2852126729, 5898241,
    65538, 2151688220, 2147483736, 2147483707, 268435456, 603982161, 603983085, 0, 268435456,
    1073758512, 805306415, 0, 4026531840, 0, 2852192260, 3473409, 1, 2147483676, 268435456,
    1073757496, 805306415, 0, 4026531840, 0, 2852192260, 3473409, 1, 2147483676, 268435456,
    1073758256, 805306415, 0, 4026531840, 0, 2852126745, 5963777, 196622, 2185232448, 2160074809,
    2147506242, 2168463419, 2172649537, 2172672069, 2176866382, 2147506255, 2164283459,
    2147506248, 2147506249, 2147506253, 2147506259, 2147520598, 2147483697, 603982364,
    603982500, 0, 2147483697, 2147483719, 603982364, 603983727, 603983714, 603982386, 0,
    2147483697, 2147483721, 603982364, 603983828, 603983797, 603982567, 0, 2147483697, 2147483722,
    603982364, 603983861, 603983848, 603982987, 0, 4026531840, 0, 2583691328, 6029313, 65539,
    1073760520, 805306420, 0, 603982235, 0, 0, 0, 2785017860, 6094849, 65538, 2151682134, 2147483742,
    603982245, 0, 603982258, 0, 4026531840, 2852192261, 6160385, 1, 2147483712, 2147483723,
    268435456, 603982255, 603983891, 0, 4026531840, 1073760016, 805306420, 0, 2852192260,
    6225925, 1, 2147483712, 268435456, 603982268, 603982987, 0, 4026531840, 0, 1073749016,
    805306442, 0, 2583691328, 6029313, 65539, 1073760520, 805306420, 0, 603982281, 0, 0, 0,
    2785017860, 6291457, 196619, 2147483720, 2147483721, 2147483714, 2168455235, 2147483725,
    2143289413, 2160066638, 2147483727, 2147483731, 2151678038, 2147487838, 603982301,
    0, 603982245, 0, 4026531840, 0, 2852192259, 6356993, 1, 2147483712, 268435456, 603982309,
    0, 4026531840, 2852126729, 6422529, 196618, 2147496008, 2147496009, 2147496002, 2168467523,
    2147496013, 2143301701, 2160078926, 2147496015, 2147496019, 2147483734, 2147483722,
    603982333, 603983861, 603983848, 603982987, 0, 603982348, 603982567, 0, 4026531840, 0,
    2852126725, 6029313, 1, 2147483712, 2147483723, 268435456, 603982345, 603983891, 0, 1073760280,
    805306420, 0, 1073759776, 805306420, 0, 1073749016, 805306441, 0, 2852126723, 6488065,
    65538, 2147483707, 2143289401, 603982361, 603982386, 0, 805306417, 0, 1073742864, 805306439,
    0, 2768240653, 0, 131077, 2147502132, 2160091185, 2147483722, 2147496007, 2147489865,
    603982364, 603982225, 0, 603982364, 603982271, 0, 603982364, 603982351, 0, 805306417,
    3221225491, 0, 0, 4026531840, 2852126726, 6553601, 65538, 2147489851, 2143289401, 2147483698,
    603982398, 0, 2147483698, 603982456, 0, 4026531840, 2852192259, 6619137, 1, 2147483705,
    268435456, 603982406, 0, 4026531840, 2852126728, 6684673, 131077, 2147491900, 2147491901,
    2155872314, 2147491903, 2147491902, 268435456, 603982424, 603982480, 0, 268435456, 603982424,
    603982925, 0, 4026531840, 0, 2852192260, 4784129, 1, 2147483689, 268435456, 603982434,
    603982500, 0, 4026531840, 0, 2852192260, 3801089, 1, 2147483687, 268435456, 1073759280,
    805306418, 0, 4026531840, 0, 2852192262, 4390913, 1, 2147483681, 2147483702, 268435456,
    603982424, 603982935, 603983967, 0, 4026531840, 0, 2852192259, 6750209, 1, 2147483707,
    268435456, 603982464, 0, 4026531840, 2852126727, 6815745, 131076, 2147483708, 2147491901,
    2147491902, 2147491903, 268435456, 603982424, 603982925, 0, 268435456, 603982444, 0,
    4026531840, 0, 2852192261, 4390913, 1, 2147483681, 2147483699, 268435456, 603982490,
    603983743, 0, 4026531840, 2852192260, 4456449, 1, 2147483682, 268435456, 1073759512,
    805306419, 0, 4026531840, 0, 2852126743, 6881281, 196620, 2164297792, 2176843841, 2147491906,
    2176852035, 2147491912, 2164269125, 2168463438, 2147491919, 2147491913, 2147491917,
    2147491923, 2147506262, 2147483700, 603982553, 603982540, 0, 2147483700, 2147483721,
    603982553, 603983828, 603983797, 603982567, 0, 2147483700, 2147483722, 603982553, 603983861,
    603983848, 603982987, 0, 2147483700, 603982553, 603982550, 603983881, 0, 4026531840,
    0, 2852192260, 6946817, 1, 2147483713, 268435456, 1073752072, 805306420, 0, 4026531840,
    0, 1073742600, 805306420, 0, 2768240647, 0, 65539, 2155884596, 2147489865, 2147483722,
    603982553, 603982225, 0, 603982553, 603982271, 0, 0, 4026531840, 2852126747, 7012353,
    196617, 2147502152, 2147508297, 2147483714, 2168461379, 2147514445, 2143301701, 2147520590,
    2147526735, 2147532883, 2147483701, 603982607, 0, 2147483701, 603982642, 0, 2147483701,
    603982663, 0, 2147483701, 603982765, 0, 2147483701, 603982803, 0, 2147483701, 603982841,
    0, 2147483701, 603982851, 0, 2147483701, 603982861, 0, 2147483701, 603982905, 0, 4026531840,
    2852192259, 7077889, 1, 2147483714, 268435456, 603982615, 0, 4026531840, 2852126728,
    7143425, 65538, 2147489843, 2143289349, 268435456, 603982629, 0, 2147483688, 603982639,
    603981823, 603981867, 0, 4026531840, 2852192260, 7208961, 1, 2147483653, 268435456, 1073760792,
    805306421, 0, 4026531840, 0, 1073761040, 805306421, 0, 2852192259, 7274497, 1, 2147483715,
    268435456, 603982650, 0, 4026531840, 2852192260, 7340033, 1, 2147483716, 268435456, 603982660,
    603982925, 0, 4026531840, 0, 1073761304, 805306421, 0, 2852192259, 7405569, 1, 2147483717,
    268435456, 603982671, 0, 4026531840, 2852126729, 7471105, 65539, 2151684164, 2151678022,
    2147496018, 268435456, 603982687, 0, 268435456, 603982714, 0, 268435456, 603982752, 0,
    4026531840, 2852192259, 7536641, 1, 2147483719, 268435456, 603982695, 0, 4026531840,
    2852126730, 7602177, 65538, 2147483663, 2143297541, 2147483668, 603982711, 603980558,
    0, 2147483724, 268435456, 1073768456, 1073761568, 805306421, 0, 4026531840, 1073761568,
    805306421, 0, 2852192259, 7667713, 1, 2147483724, 268435456, 603982722, 0, 4026531840,
    2852126729, 1376257, 131079, 2147495956, 2164260869, 2155884546, 2147495955, 2155884558,
    2147495953, 2147495954, 2147483726, 268435456, 1073768456, 805306446, 603982742, 0,
    603982742, 603980266, 0, 4026531840, 2852192260, 7208961, 1, 2147483653, 268435456, 1073762344,
    805306421, 0, 4026531840, 0, 2852192260, 7536641, 1, 2147483719, 268435456, 603982762,
    603983909, 0, 4026531840, 0, 1073763360, 805306421, 0, 2852192259, 7733249, 1, 2147483720,
    268435456, 603982773, 0, 4026531840, 2852192259, 7536641, 1, 2147483719, 268435456, 603982781,
    0, 4026531840, 2852192263, 4784129, 1, 2147483689, 268435456, 2147483725, 603982793,
    603983925, 603983919, 603982945, 0, 4026531840, 2852192260, 3801089, 1, 2147483687, 268435456,
    1073761832, 805306421, 0, 4026531840, 0, 2852192259, 7798785, 1, 2147483721, 268435456,
    603982811, 0, 4026531840, 2852126727, 7864321, 65538, 2147483722, 2147489867, 268435456,
    603982825, 0, 268435456, 603982838, 603982925, 0, 4026531840, 0, 2852192260, 7929857,
    1, 2147483723, 268435456, 603982835, 603982925, 0, 4026531840, 0, 1073762080, 805306421,
    0, 1073763864, 805306421, 0, 2852192260, 7995393, 1, 2147483725, 268435456, 1073762568,
    805306421, 0, 4026531840, 0, 2852192260, 8060929, 1, 2147483726, 268435456, 1073762824,
    805306421, 0, 4026531840, 0, 2852192259, 8126465, 1, 2147483727, 268435456, 603982869,
    0, 4026531840, 2852192259, 8192001, 1, 2147483728, 268435456, 603982877, 0, 4026531840,
    2852192259, 8257537, 1, 2147483729, 268435456, 603982885, 0, 4026531840, 2852192260,
    4390913, 1, 2147483681, 268435456, 603982895, 603983743, 0, 4026531840, 0, 2852192260,
    4456449, 1, 2147483682, 268435456, 1073763120, 805306421, 0, 4026531840, 0, 2852192259,
    8323073, 1, 2147483731, 268435456, 603982913, 0, 4026531840, 2583691348, 8388609, 65540,
    1073764104, 805306421, 0, 0, 268435456, 1073763600, 805306421, 0, 0, 2852192261, 4390913,
    1, 2147483681, 2147483702, 268435456, 603982935, 603983967, 0, 4026531840, 2852192260,
    4456449, 1, 2147483682, 268435456, 1073759512, 805306422, 0, 4026531840, 0, 2852192260,
    8454145, 1, 2147483733, 2147483703, 268435456, 603982955, 0, 4026531840, 0, 2852192259,
    4390913, 1, 2147483681, 268435456, 603982963, 0, 4026531840, 2852126727, 8519681, 65538,
    2147491895, 2143289359, 2147483668, 603982977, 603980558, 0, 268435456, 603982977, 0,
    4026531840, 0, 2852192260, 4456449, 1, 2147483682, 268435456, 1073764384, 805306423,
    0, 4026531840, 0, 2852192261, 8585217, 1, 2147483734, 2147483704, 268435456, 603982997,
    603982945, 0, 4026531840, 1073764624, 805306424, 0, 2852192260, 8060929, 1, 2147483726,
    268435456, 603983010, 603983049, 0, 4026531840, 0, 603983013, 603982181, 0, 2583691351,
    8650753, 131077, 1073765664, 805306425, 0, 0, 0, 2147483705, 268435456, 603983031, 603983000,
    0, 2147483707, 268435456, 603983046, 603983085, 0, 2852126725, 8716289, 1, 2147483736,
    2147483707, 268435456, 603983043, 603983085, 0, 1073765416, 805306425, 0, 1073764912,
    805306425, 0, 1073765160, 805306425, 0, 2852192260, 8454145, 1, 2147483733, 2147483706,
    268435456, 603983059, 0, 4026531840, 0, 2852192259, 4390913, 1, 2147483681, 268435456,
    603983067, 0, 4026531840, 2852192259, 8781825, 1, 2147483703, 268435456, 603983075, 0,
    4026531840, 2852192260, 4456449, 1, 2147483682, 268435456, 1073764384, 805306426, 0,
    4026531840, 0, 2852192260, 8847361, 1, 2147483737, 268435456, 603983095, 603982925, 0,
    4026531840, 0, 2852126726, 8912897, 1, 2147483744, 2147483728, 268435456, 603983109,
    603984071, 603982925, 0, 1073766168, 805306427, 0, 0, 1073765920, 805306427, 0, 2147483708,
    603983116, 603983049, 0, 603983119, 603982181, 0, 2583691351, 8978433, 131077, 1073767184,
    805306428, 0, 0, 0, 2147483705, 268435456, 603983137, 603983000, 0, 2147483707, 268435456,
    603983152, 603983085, 0, 2852126725, 9043969, 1, 2147483736, 2147483707, 268435456, 603983149,
    603983085, 0, 1073766936, 805306428, 0, 1073766432, 805306428, 0, 1073766680, 805306428,
    0, 1073742600, 805306431, 0, 2852126723, 589824, 131076, 2147483656, 2147483653, 2147483650,
    2147483651, 603983170, 603979928, 0, 4026531840, 0, 1073742864, 805306431, 0, 3087011151,
    2499805247, 0, 65539, 4026531840, 0, 0, 603983173, 603983158, 0, 2499805247, 0, 65537, 4026531840,
    0, 0, 2852126729, 9240576, 131077, 2147491848, 2147491845, 2147491842, 2151686147, 2147483655,
    2147483712, 603983239, 603983207, 0, 2147483712, 603983239, 603983217, 603979928, 0,
    4026531840, 2852192260, 327694, 1, 2147483655, 268435456, 1073742600, 805306432, 0, 4026531840,
    0, 1073742600, 805306432, 0, 2852126727, 9306112, 131077, 2147483656, 2147483653, 2147483650,
    2151677955, 2147489799, 603983236, 603979928, 0, 268435456, 1073742864, 805306432, 0,
    4026531840, 1073742864, 805306432, 0, 3087011217, 2499805248, 0, 65539, 4026531840, 0,
    0, 603983239, 603983220, 0, 2499805248, 0, 65537, 4026531840, 0, 0, 2852126728, 9371653,
    65538, 2147483653, 2143297539, 2147483713, 603983355, 603983269, 0, 2147483713, 603983355,
    603983279, 0, 4026531840, 2852192260, 1572869, 1, 2147483653, 268435456, 1073767688,
    805306433, 0, 4026531840, 0, 2852192260, 9437189, 1, 2147483651, 268435456, 1073767688,
    805306433, 0, 4026531840, 0, 2852126724, 9502752, 262172, 2231373842, 2222985233, 2139099138,
    2202013699, 2222985236, 2222981125, 2147487782, 2147487783, 2214596616, 2147487785,
    2210402330, 2147487787, 2147487788, 2147487773, 2160070670, 2160070671, 2168459283,
    2147487774, 2147487775, 2147487777, 2147487778, 2168459299, 2147487780, 2164264997,
    2147487784, 2147487786, 2147487795, 2147487797, 603983325, 0, 603983345, 0, 4026531840,
    2785017857, 9568288, 131076, 2151677980, 2151678016, 2147483736, 2147483735, 4026531840,
    603983335, 0, 2852192260, 9633792, 1, 2147483653, 268435456, 1073743632, 805306433, 0,
    4026531840, 0, 2852126724, 9699365, 1, 2147483651, 268435456, 1073743632, 805306433,
    0, 4026531840, 0, 3087011333, 2499805249, 0, 65539, 4026531840, 0, 0, 603983355, 603983289,
    0, 2499805249, 0, 65537, 4026531840, 0, 0, 2852126728, 9764869, 65538, 2147491842, 2147483653,
    2147483714, 603983425, 603983385, 0, 2147483714, 603983425, 603983395, 0, 4026531840,
    2852192260, 1572869, 1, 2147483653, 268435456, 1073767688, 805306434, 0, 4026531840,
    0, 2852192260, 1703941, 1, 2147483650, 268435456, 1073767688, 805306434, 0, 4026531840,
    0, 2852126724, 1441812, 65538, 2147487746, 2147483653, 603983415, 0, 603980161, 0, 4026531840,
    2785017857, 1507348, 131076, 2151677980, 2151678016, 2147483736, 2147483735, 4026531840,
    603980148, 0, 3087011403, 2499805250, 0, 65539, 4026531840, 0, 0, 603983425, 603983405,
    0, 2499805250, 0, 65537, 4026531840, 0, 0, 2852126732, 9240581, 65539, 2147500034, 2151686147,
    2147483653, 2147483715, 603983503, 603983461, 0, 2147483715, 603983503, 603983471, 0,
    2147483715, 603983503, 603983481, 0, 4026531840, 0, 2852192260, 1572869, 1, 2147483653,
    268435456, 1073767688, 805306435, 0, 4026531840, 0, 2852192260, 9437189, 1, 2147483651,
    268435456, 1073767688, 805306435, 0, 4026531840, 0, 2852192260, 1703941, 1, 2147483650,
    268435456, 1073767688, 805306435, 0, 4026531840, 0, 2852126724, 9830432, 65539, 2147483650,
    2151677955, 2147483653, 268435456, 1073743632, 805306435, 0, 4026531840, 0, 3087011481,
    2499805251, 0, 65539, 4026531840, 0, 0, 603983503, 603983491, 0, 2499805251, 0, 65537, 4026531840,
    0, 0, 2852126728, 9895941, 65538, 2147483650, 2147491843, 2147483716, 603983563, 603983533,
    0, 2147483716, 603983563, 603983543, 0, 4026531840, 2852192260, 1703941, 1, 2147483650,
    268435456, 1073767688, 805306436, 0, 4026531840, 0, 2852192260, 9437189, 1, 2147483651,
    268435456, 1073767688, 805306436, 0, 4026531840, 0, 2852126724, 9961473, 65538, 2147483650,
    2147483651, 268435456, 1073743632, 805306436, 0, 4026531840, 3087011541, 2499805252,
    0, 65539, 4026531840, 0, 0, 603983563, 603983553, 0, 2499805252, 0, 65537, 4026531840, 0,
    0, 2852126740, 4325377, 196623, 2197848082, 2176860177, 2139103234, 2189459475, 2168487956,
    2168463365, 2147516430, 2147483663, 2160091169, 2168455204, 2147483685, 2147483689,
    2147508266, 2147508267, 2147508268, 2147483717, 603983644, 603981532, 0, 2147483717,
    603983644, 603983371, 0, 2147483717, 603983644, 603980340, 0, 2147483717, 603983644,
    603981386, 0, 2147483717, 603983644, 603980266, 0, 4026531840, 0, 2852126723, 10027009,
    196623, 2197815314, 2176843793, 2139095042, 2189426707, 2168455188, 2168455173, 2147483662,
    2147483663, 2160066593, 2168455204, 2147483685, 2147483689, 2147483690, 2147483691,
    2147483692, 603983641, 603981386, 0, 4026531840, 1073742864, 805306437, 0, 3087011648,
    2768240663, 0, 131079, 2147524620, 2168481825, 2160085026, 2151712783, 2147495971, 2147489858,
    2147483717, 603983644, 603983619, 0, 603983644, 603980124, 0, 603983644, 603980929, 0,
    1073742600, 805306401, 3221225495, 0, 1073742600, 805306437, 3221225499, 0, 805306380,
    3221225502, 0, 805306403, 3221225505, 0, 4026531840, 0, 2499805253, 0, 65537, 4026531840,
    0, 0, 2852192260, 10092549, 1, 2147483740, 2147483718, 268435456, 603983696, 0, 4026531840,
    0, 2852126730, 10158081, 65539, 2155872287, 2143301637, 2147496029, 2147483678, 268435456,
    1073751304, 1073767952, 805306438, 0, 268435456, 1073767952, 805306438, 0, 4026531840,
    0, 1073742600, 805306439, 0, 2852126723, 6488065, 65538, 2147483707, 2143289401, 603982361,
    603982386, 0, 4026531840, 0, 3087011705, 2499805255, 0, 65539, 4026531840, 0, 0, 603983727,
    603983717, 0, 2499805255, 0, 65537, 4026531840, 0, 0, 2852126730, 7602177, 65538, 2147483663,
    2143299589, 2147483720, 603983781, 603983759, 603980550, 0, 2147483720, 603983781, 603983759,
    603983909, 0, 4026531840, 1073742600, 805306440, 0, 2852126730, 10223617, 65538, 2147483663,
    2143297541, 2147483668, 603983778, 603980558, 0, 2147483724, 268435456, 1073768456,
    1073742864, 805306440, 0, 4026531840, 1073742864, 805306440, 0, 3087011759, 2499805256,
    0, 65539, 4026531840, 0, 0, 603983781, 603983762, 0, 2499805256, 0, 65537, 4026531840, 0,
    0, 1073742600, 805306441, 0, 2785017859, 6291457, 196619, 2147483720, 2147483721, 2147483714,
    2168455235, 2147483725, 2143289413, 2160066638, 2147483727, 2147483731, 2151682134,
    2147487838, 603983818, 0, 4026531840, 4026531840, 2852192260, 10289157, 1, 2147483712,
    268435456, 603982348, 603982567, 0, 4026531840, 0, 3087011810, 2768240647, 0, 1, 2147483721,
    2583691328, 6029313, 65537, 4026531840, 603983828, 603983800, 0, 4026531840, 0, 2499805257,
    0, 65537, 4026531840, 0, 0, 1073742600, 805306442, 0, 2785017859, 6094849, 65538, 2151678038,
    2147487838, 603982258, 0, 4026531840, 4026531840, 0, 3087011843, 2768240647, 0, 1, 2147483722,
    2583691328, 6029313, 65537, 4026531840, 603983861, 603983851, 0, 4026531840, 0, 2499805258,
    0, 65537, 4026531840, 0, 0, 2852192260, 6225925, 1, 2147483712, 2147483723, 268435456,
    603983891, 0, 4026531840, 0, 2852192259, 10354693, 1, 2147483742, 268435456, 603983899,
    0, 4026531840, 2852192260, 10420229, 1, 2147483733, 268435456, 1073768216, 805306443,
    0, 4026531840, 0, 2852192261, 1572869, 1, 2147483653, 2147483724, 268435456, 1073768456,
    805306444, 0, 4026531840, 1073742600, 805306445, 0, 1073749016, 805306445, 0, 3087011919,
    2768240660, 0, 1, 2147483725, 2583691359, 10485761, 65537, 4026531840, 268435456, 2583691349,
    8454145, 65537, 4026531840, 2147483703, 268435456, 2583691297, 4390913, 65537, 4026531840,
    268435456, 603983925, 603983922, 603982963, 0, 4026531840, 2499805261, 0, 65537, 4026531840,
    0, 0, 2852192261, 1572869, 1, 2147483653, 2147483726, 268435456, 1073768456, 805306446,
    0, 4026531840, 2852126729, 1376257, 131079, 2147493908, 2164260869, 2155882498, 2147493907,
    2155882510, 2147493905, 2147493906, 2147483727, 603984043, 603983987, 603983957, 0,
    2147483727, 603984043, 603983990, 0, 4026531840, 1073742600, 805306447, 0, 2852126726,
    10551297, 131078, 2147491860, 2147487761, 2155872258, 2147491859, 2151686158, 2147491858,
    603983371, 0, 603980340, 0, 603980266, 0, 4026531840, 2852126728, 10616833, 196616, 2176856082,
    2147495953, 2139107330, 2147495955, 2147495956, 2147483653, 2147495950, 2147495970,
    2147483726, 268435456, 1073768456, 1073742864, 805306447, 0, 603984029, 0, 4026531840,
    1073742864, 805306447, 0, 2852126723, 10682369, 131078, 2147483668, 2147483665, 2155872258,
    2147483667, 2151677966, 2147483666, 603984026, 603980266, 0, 4026531840, 0, 3087012033,
    2768240653, 0, 131076, 2147502092, 2147483727, 2147489858, 2139107343, 603984043, 603984006,
    0, 603984043, 603980124, 0, 805306380, 3221225488, 0, 1073742600, 805306447, 3221225492,
    0, 4026531840, 2499805263, 0, 65537, 4026531840, 0, 0, 1073759504, 805306448, 0, 2852126728,
    10747904, 65538, 2147483664, 2147491843, 2147483729, 603984116, 603984088, 0, 2147483729,
    603984116, 603984096, 0, 4026531840, 2852192259, 10813440, 1, 2147483664, 268435456,
    805306449, 0, 4026531840, 2852192259, 786432, 1, 2147483651, 268435456, 805306449, 0,
    4026531840, 2852126724, 10878976, 65539, 2147483664, 2151677955, 2147483653, 268435456,
    1073743632, 805306449, 0, 4026531840, 0, 3087012094, 2499805265, 0, 65539, 4026531840,
    0, 0, 603984116, 603984104, 0, 2499805265, 0, 65537, 4026531840, 0, 0, 2852192261, 10944512,
    1, 2147483680, 2147483730, 268435456, 603984142, 603984145, 0, 4026531840, 1073741840,
    805306450, 0, 2852192260, 11010048, 1, 2147483663, 2147483731, 268435456, 805306451,
    0, 4026531840, 0, 2852126730, 11075584, 131079, 2172649480, 2147483653, 2147483650, 2151677955,
    2151677959, 2147493935, 2147483700, 2147483732, 603984204, 603984179, 603984224, 0,
    2147483732, 603984204, 603984179, 603984300, 0, 2147483732, 805306452, 603984204, 0,
    805306452, 0, 2852126729, 11141120, 131079, 2172649480, 2147483653, 2147483650, 2151677955,
    2151677959, 2147489839, 2147483700, 603984201, 603984224, 0, 2147483734, 268435456,
    603984201, 603984310, 603984155, 0, 4026531840, 1073741840, 805306452, 0, 3087012186,
    2768240646, 0, 65538, 2151684180, 2147483734, 805306452, 3221225480, 0, 603984204, 603984181,
    0, 4026531840, 0, 2499805268, 0, 65537, 4026531840, 0, 0, 2852126738, 11206656, 131078,
    2168467464, 2147489797, 2147514370, 2151677955, 2147508231, 2147502132, 2147483733,
    603984252, 0, 2147483733, 603984260, 0, 2147483733, 603984268, 0, 2147483733, 603984276,
    0, 2147483733, 603984284, 0, 2147483733, 603984292, 0, 4026531840, 2852192259, 786432,
    1, 2147483651, 268435456, 805306453, 0, 4026531840, 2852192259, 851968, 1, 2147483653,
    268435456, 805306453, 0, 4026531840, 2852192259, 917504, 1, 2147483656, 268435456, 805306453,
    0, 4026531840, 2852192259, 11272192, 1, 2147483700, 268435456, 805306453, 0, 4026531840,
    2852192259, 9175040, 1, 2147483655, 268435456, 805306453, 0, 4026531840, 2852192259,
    720896, 1, 2147483650, 268435456, 805306453, 0, 4026531840, 2852192261, 11337728, 1, 2147483695,
    2147483734, 268435456, 603984310, 603984155, 0, 4026531840, 2852192260, 11403264, 1,
    2147483697, 268435456, 1073741848, 805306454, 0, 4026531840, 0, 2852126736, 11468800,
    131076, 2155888656, 2147491845, 2147508280, 2147483651, 2147483735, 603984388, 603984344,
    0, 2147483735, 603984388, 603984352, 0, 2147483735, 603984388, 603984360, 0, 2147483735,
    603984388, 603984368, 0, 4026531840, 2852192259, 786432, 1, 2147483651, 268435456, 805306455,
    0, 4026531840, 2852192259, 851968, 1, 2147483653, 268435456, 805306455, 0, 4026531840,
    2852192259, 10813440, 1, 2147483664, 268435456, 805306455, 0, 4026531840, 2852192259,
    11534336, 1, 2147483704, 268435456, 805306455, 0, 4026531840, 2852126724, 11468800, 131076,
    2155872272, 2147483653, 2147483704, 2147483651, 268435456, 1073741840, 805306455, 0,
    4026531840, 3087012366, 2499805271, 0, 65539, 4026531840, 0, 0, 603984388, 603984376,
    0, 2499805271, 0, 65537, 4026531840, 0, 0, 2852126723, 393216, 65539, 2147483658, 2151677961,
    2147483659, 2147483736, 603979877, 0, 4026531840
]);

function isTokenActive(token_id, row) { var index = (row * 4) + (token_id >> 5);; var shift = 1 << (31 & (token_id));; return (token_lookup[index] & shift) != 0; }

function pre_scan(l, token) { var tk_length = l.token_length;; var bt_length = l.byte_length;; var type_cache = l._type;; scan(l, token, 0); var type_out = l._type;; l._type = type_cache; l.token_length = tk_length; l.byte_length = bt_length; return type_out > 0; }

function scan_core(l, tk_row) {
    switch ((l.get_byte_at(l.byte_offset) & 127)) {
        case 33:
            { if (l.get_byte_at(l.byte_offset) == 33) { if (isTokenActive(27, tk_row)) { l.setToken(27, 1, 1); } } } break; case 35:
            { if (l.get_byte_at(l.byte_offset) == 35) { if (isTokenActive(9, tk_row)) { l.setToken(9, 1, 1); }; if (isTokenActive(97, tk_row) && token_production(l, 67113492, 2, 97, 16, states_buffer, scan) && l.byte_length > 1) { l.setToken(97, l.byte_length, l.token_length); } } } break; case 36:
            { if (2 == compare(l, l.byte_offset, 23, 2, token_sequence_lookup)) { if (l.get_byte_at(l.byte_offset + 2) == 109) { if (isTokenActive(45, tk_row) && 3 == compare(l, l.byte_offset + 3, 26, 3, token_sequence_lookup)) { l.setToken(45, 6, 6); } } else if (l.get_byte_at(l.byte_offset + 2) == 111) { if (isTokenActive(19, tk_row) && l.get_byte_at(l.byte_offset + 3) == 102) { l.setToken(19, 4, 4); } } } } break; case 40:
            { if (l.get_byte_at(l.byte_offset) == 40) { if (isTokenActive(41, tk_row)) { l.setToken(41, 1, 1); }; if (l.get_byte_at(l.byte_offset + 1) == 69) { if (isTokenActive(42, tk_row) && 2 == compare(l, l.byte_offset + 2, 44, 2, token_sequence_lookup)) { l.setToken(42, 4, 4); } } else if (l.get_byte_at(l.byte_offset + 1) == 73) { if (isTokenActive(43, tk_row) && 2 == compare(l, l.byte_offset + 2, 170, 2, token_sequence_lookup)) { l.setToken(43, 4, 4); } } else if (l.get_byte_at(l.byte_offset + 1) == 82) { if (isTokenActive(44, tk_row) && 2 == compare(l, l.byte_offset + 2, 223, 2, token_sequence_lookup)) { l.setToken(44, 4, 4); } } else if (l.get_byte_at(l.byte_offset + 1) == 42) { if (isTokenActive(38, tk_row)) { l.setToken(38, 2, 2); } } else if (l.get_byte_at(l.byte_offset + 1) == 43) { if (isTokenActive(40, tk_row)) { l.setToken(40, 2, 2); } } } } break; case 41:
            { if (l.get_byte_at(l.byte_offset) == 41) { if (isTokenActive(39, tk_row)) { l.setToken(39, 1, 1); } } } break; case 42:
            { if (l.get_byte_at(l.byte_offset) == 42) { if (isTokenActive(93, tk_row)) { l.setToken(93, 1, 1); }; if (l.get_byte_at(l.byte_offset + 1) == 47) { if (isTokenActive(12, tk_row)) { l.setToken(12, 2, 2); } } } } break; case 43:
            { if (l.get_byte_at(l.byte_offset) == 43) { if (isTokenActive(29, tk_row) && l.get_byte_at(l.byte_offset + 1) == 62) { l.setToken(29, 2, 2); } } } break; case 44:
            { if (l.get_byte_at(l.byte_offset) == 44) { if (isTokenActive(95, tk_row)) { l.setToken(95, 1, 1); } } } break; case 45:
            { if (l.get_byte_at(l.byte_offset) == 45) { if (isTokenActive(56, tk_row)) { l.setToken(56, 1, 1); }; if (isTokenActive(55, tk_row) && token_production(l, 67113408, 48, 55, 8, states_buffer, scan) && l.byte_length > 1) { l.setToken(55, l.byte_length, l.token_length); } } } break; case 46:
            { if (l.get_byte_at(l.byte_offset) == 46) { if (isTokenActive(92, tk_row)) { l.setToken(92, 1, 1); } } } break; case 47:
            { if (l.get_byte_at(l.byte_offset) == 47) { if (l.get_byte_at(l.byte_offset + 1) == 47) { if (isTokenActive(10, tk_row)) { l.setToken(10, 2, 2); }; if (isTokenActive(97, tk_row) && token_production(l, 67113492, 2, 97, 16, states_buffer, scan) && l.byte_length > 2) { l.setToken(97, l.byte_length, l.token_length); } } else if (l.get_byte_at(l.byte_offset + 1) == 42) { if (isTokenActive(11, tk_row)) { l.setToken(11, 2, 2); }; if (isTokenActive(97, tk_row) && token_production(l, 67113492, 2, 97, 16, states_buffer, scan) && l.byte_length > 2) { l.setToken(97, l.byte_length, l.token_length); } } } } break; case 58:
            { if (l.get_byte_at(l.byte_offset) == 58) { if (isTokenActive(21, tk_row) && l.get_byte_at(l.byte_offset + 1) == 58) { l.setToken(21, 2, 2); } } } break; case 60:
            { if (l.get_byte_at(l.byte_offset) == 60) { if (l.get_byte_at(l.byte_offset + 1) == 62) { if (isTokenActive(26, tk_row)) { l.setToken(26, 2, 2); } } else if (l.get_byte_at(l.byte_offset + 1) == 61) { if (isTokenActive(36, tk_row)) { l.setToken(36, 2, 2); } } else if (l.get_byte_at(l.byte_offset + 1) == 91) { if (isTokenActive(53, tk_row)) { l.setToken(53, 2, 2); } } } } break; case 62:
            { if (l.get_byte_at(l.byte_offset) == 62) { if (isTokenActive(28, tk_row)) { l.setToken(28, 1, 1); } } } break; case 63:
            { if (l.get_byte_at(l.byte_offset) == 63) { if (isTokenActive(35, tk_row)) { l.setToken(35, 1, 1); }; if (l.get_byte_at(l.byte_offset + 1) == 61) { if (isTokenActive(37, tk_row)) { l.setToken(37, 2, 2); } } } } break; case 64:
            { if (l.get_byte_at(l.byte_offset) == 64) { if (l.get_byte_at(l.byte_offset + 1) == 73) { if (l.get_byte_at(l.byte_offset + 2) == 71) { if (isTokenActive(13, tk_row) && 4 == compare(l, l.byte_offset + 3, 8, 4, token_sequence_lookup)) { l.setToken(13, 7, 7); } } else if (l.get_byte_at(l.byte_offset + 2) == 77) { if (isTokenActive(22, tk_row) && 4 == compare(l, l.byte_offset + 3, 152, 4, token_sequence_lookup)) { l.setToken(22, 7, 7); } } } else if (l.get_byte_at(l.byte_offset + 1) == 69) { if (isTokenActive(25, tk_row) && 5 == compare(l, l.byte_offset + 2, 209, 5, token_sequence_lookup)) { l.setToken(25, 7, 7); } } } } break; case 65:
            { if (l.get_byte_at(l.byte_offset) == 65) { if (l.get_byte_at(l.byte_offset + 1) == 83) { if (isTokenActive(24, tk_row)) { l.setToken(24, 2, 2); }; if (isTokenActive(15, tk_row) && token_production(l, 67113162, 14, 15, 1, states_buffer, scan) && l.byte_length > 2) { l.setToken(15, l.byte_length, l.token_length); } else if (isTokenActive(48, tk_row) && token_production(l, 67113243, 42, 48, 4, states_buffer, scan) && l.byte_length > 2) { l.setToken(48, l.byte_length, l.token_length); } else if (isTokenActive(55, tk_row) && token_production(l, 67113408, 48, 55, 8, states_buffer, scan) && l.byte_length > 2) { l.setToken(55, l.byte_length, l.token_length); } else if (isTokenActive(3, tk_row) && l.isUniID() && l.byte_length > 2) { l._type = 3; } } } } break; case 66:
            { if (l.get_byte_at(l.byte_offset) == 66) { if (3 == compare(l, l.byte_offset + 1, 108, 3, token_sequence_lookup)) { if (isTokenActive(62, tk_row)) { l.setToken(62, 4, 4); }; if (isTokenActive(15, tk_row) && token_production(l, 67113162, 14, 15, 1, states_buffer, scan) && l.byte_length > 4) { l.setToken(15, l.byte_length, l.token_length); } else if (isTokenActive(48, tk_row) && token_production(l, 67113243, 42, 48, 4, states_buffer, scan) && l.byte_length > 4) { l.setToken(48, l.byte_length, l.token_length); } else if (isTokenActive(55, tk_row) && token_production(l, 67113408, 48, 55, 8, states_buffer, scan) && l.byte_length > 4) { l.setToken(55, l.byte_length, l.token_length); } else if (isTokenActive(3, tk_row) && l.isUniID() && l.byte_length > 4) { l._type = 3; } } } } break; case 67:
            { if (l.get_byte_at(l.byte_offset) == 67) { if (l.get_byte_at(l.byte_offset + 1) == 79) { if (7 == compare(l, l.byte_offset + 2, 96, 7, token_sequence_lookup)) { if (isTokenActive(63, tk_row)) { l.setToken(63, 9, 9); }; if (isTokenActive(15, tk_row) && token_production(l, 67113162, 14, 15, 1, states_buffer, scan) && l.byte_length > 9) { l.setToken(15, l.byte_length, l.token_length); } else if (isTokenActive(48, tk_row) && token_production(l, 67113243, 42, 48, 4, states_buffer, scan) && l.byte_length > 9) { l.setToken(48, l.byte_length, l.token_length); } else if (isTokenActive(55, tk_row) && token_production(l, 67113408, 48, 55, 8, states_buffer, scan) && l.byte_length > 9) { l.setToken(55, l.byte_length, l.token_length); } else if (isTokenActive(3, tk_row) && l.isUniID() && l.byte_length > 9) { l._type = 3; } } } else if (l.get_byte_at(l.byte_offset + 1) == 76) { if (3 == compare(l, l.byte_offset + 2, 201, 3, token_sequence_lookup)) { if (isTokenActive(60, tk_row)) { l.setToken(60, 5, 5); }; if (isTokenActive(15, tk_row) && token_production(l, 67113162, 14, 15, 1, states_buffer, scan) && l.byte_length > 5) { l.setToken(15, l.byte_length, l.token_length); } else if (isTokenActive(48, tk_row) && token_production(l, 67113243, 42, 48, 4, states_buffer, scan) && l.byte_length > 5) { l.setToken(48, l.byte_length, l.token_length); } else if (isTokenActive(55, tk_row) && token_production(l, 67113408, 48, 55, 8, states_buffer, scan) && l.byte_length > 5) { l.setToken(55, l.byte_length, l.token_length); } else if (isTokenActive(3, tk_row) && l.isUniID() && l.byte_length > 5) { l._type = 3; } } } } } break; case 80:
            { if (l.get_byte_at(l.byte_offset) == 80) { if (9 == compare(l, l.byte_offset + 1, 81, 9, token_sequence_lookup)) { if (isTokenActive(58, tk_row)) { l.setToken(58, 10, 10); }; if (isTokenActive(15, tk_row) && token_production(l, 67113162, 14, 15, 1, states_buffer, scan) && l.byte_length > 10) { l.setToken(15, l.byte_length, l.token_length); } else if (isTokenActive(48, tk_row) && token_production(l, 67113243, 42, 48, 4, states_buffer, scan) && l.byte_length > 10) { l.setToken(48, l.byte_length, l.token_length); } else if (isTokenActive(55, tk_row) && token_production(l, 67113408, 48, 55, 8, states_buffer, scan) && l.byte_length > 10) { l.setToken(55, l.byte_length, l.token_length); } else if (isTokenActive(3, tk_row) && l.isUniID() && l.byte_length > 10) { l._type = 3; } } } } break; case 84:
            { if (l.get_byte_at(l.byte_offset) == 84) { if (4 == compare(l, l.byte_offset + 1, 103, 4, token_sequence_lookup)) { if (isTokenActive(61, tk_row)) { l.setToken(61, 5, 5); }; if (isTokenActive(15, tk_row) && token_production(l, 67113162, 14, 15, 1, states_buffer, scan) && l.byte_length > 5) { l.setToken(15, l.byte_length, l.token_length); } else if (isTokenActive(48, tk_row) && token_production(l, 67113243, 42, 48, 4, states_buffer, scan) && l.byte_length > 5) { l.setToken(48, l.byte_length, l.token_length); } else if (isTokenActive(55, tk_row) && token_production(l, 67113408, 48, 55, 8, states_buffer, scan) && l.byte_length > 5) { l.setToken(55, l.byte_length, l.token_length); } else if (isTokenActive(3, tk_row) && l.isUniID() && l.byte_length > 5) { l._type = 3; } } } } break; case 91:
            { if (l.get_byte_at(l.byte_offset) == 91) { if (isTokenActive(33, tk_row)) { l.setToken(33, 1, 1); } } } break; case 92:
            { if (l.get_byte_at(l.byte_offset) == 92) { if (isTokenActive(18, tk_row)) { l.setToken(18, 1, 1); } } } break; case 93:
            { if (l.get_byte_at(l.byte_offset) == 93) { if (isTokenActive(34, tk_row)) { l.setToken(34, 1, 1); } } } break; case 94:
            { if (l.get_byte_at(l.byte_offset) == 94) { if (isTokenActive(32, tk_row)) { l.setToken(32, 1, 1); }; if (isTokenActive(31, tk_row) && token_production(l, 67113220, 31, 31, 2, states_buffer, scan) && l.byte_length > 1) { l.setToken(31, l.byte_length, l.token_length); } } } break; case 95:
            { if (l.get_byte_at(l.byte_offset) == 95) { if (isTokenActive(16, tk_row)) { l.setToken(16, 1, 1); }; if (isTokenActive(15, tk_row) && token_production(l, 67113162, 14, 15, 1, states_buffer, scan) && l.byte_length > 1) { l.setToken(15, l.byte_length, l.token_length); } else if (isTokenActive(55, tk_row) && token_production(l, 67113408, 48, 55, 8, states_buffer, scan) && l.byte_length > 1) { l.setToken(55, l.byte_length, l.token_length); } } } break; case 97:
            { if (l.get_byte_at(l.byte_offset) == 97) { if (l.get_byte_at(l.byte_offset + 1) == 115) { if (isTokenActive(23, tk_row)) { l.setToken(23, 2, 2); }; if (isTokenActive(15, tk_row) && token_production(l, 67113162, 14, 15, 1, states_buffer, scan) && l.byte_length > 2) { l.setToken(15, l.byte_length, l.token_length); } else if (isTokenActive(48, tk_row) && token_production(l, 67113243, 42, 48, 4, states_buffer, scan) && l.byte_length > 2) { l.setToken(48, l.byte_length, l.token_length); } else if (isTokenActive(55, tk_row) && token_production(l, 67113408, 48, 55, 8, states_buffer, scan) && l.byte_length > 2) { l.setToken(55, l.byte_length, l.token_length); } else if (isTokenActive(3, tk_row) && l.isUniID() && l.byte_length > 2) { l._type = 3; }; if (l.get_byte_at(l.byte_offset + 2) == 115) { if (l.get_byte_at(l.byte_offset + 3) == 101) { if (2 == compare(l, l.byte_offset + 4, 69, 2, token_sequence_lookup)) { if (isTokenActive(57, tk_row)) { l.setToken(57, 6, 6); }; if (isTokenActive(15, tk_row) && token_production(l, 67113162, 14, 15, 1, states_buffer, scan) && l.byte_length > 6) { l.setToken(15, l.byte_length, l.token_length); } else if (isTokenActive(48, tk_row) && token_production(l, 67113243, 42, 48, 4, states_buffer, scan) && l.byte_length > 6) { l.setToken(48, l.byte_length, l.token_length); } else if (isTokenActive(55, tk_row) && token_production(l, 67113408, 48, 55, 8, states_buffer, scan) && l.byte_length > 6) { l.setToken(55, l.byte_length, l.token_length); } else if (isTokenActive(3, tk_row) && l.isUniID() && l.byte_length > 6) { l._type = 3; } } } else if (l.get_byte_at(l.byte_offset + 3) == 105) { if (2 == compare(l, l.byte_offset + 4, 187, 2, token_sequence_lookup)) { if (isTokenActive(67, tk_row)) { l.setToken(67, 6, 6); }; if (isTokenActive(15, tk_row) && token_production(l, 67113162, 14, 15, 1, states_buffer, scan) && l.byte_length > 6) { l.setToken(15, l.byte_length, l.token_length); } else if (isTokenActive(48, tk_row) && token_production(l, 67113243, 42, 48, 4, states_buffer, scan) && l.byte_length > 6) { l.setToken(48, l.byte_length, l.token_length); } else if (isTokenActive(55, tk_row) && token_production(l, 67113408, 48, 55, 8, states_buffer, scan) && l.byte_length > 6) { l.setToken(55, l.byte_length, l.token_length); } else if (isTokenActive(3, tk_row) && l.isUniID() && l.byte_length > 6) { l._type = 3; } } } } } } } break; case 98:
            { if (l.get_byte_at(l.byte_offset) == 98) { if (3 == compare(l, l.byte_offset + 1, 112, 3, token_sequence_lookup)) { if (isTokenActive(74, tk_row)) { l.setToken(74, 4, 4); }; if (isTokenActive(15, tk_row) && token_production(l, 67113162, 14, 15, 1, states_buffer, scan) && l.byte_length > 4) { l.setToken(15, l.byte_length, l.token_length); } else if (isTokenActive(48, tk_row) && token_production(l, 67113243, 42, 48, 4, states_buffer, scan) && l.byte_length > 4) { l.setToken(48, l.byte_length, l.token_length); } else if (isTokenActive(55, tk_row) && token_production(l, 67113408, 48, 55, 8, states_buffer, scan) && l.byte_length > 4) { l.setToken(55, l.byte_length, l.token_length); } else if (isTokenActive(3, tk_row) && l.isUniID() && l.byte_length > 4) { l._type = 3; } } } } break; case 99:
            { if (l.get_byte_at(l.byte_offset) == 99) { if (6 == compare(l, l.byte_offset + 1, 136, 6, token_sequence_lookup)) { if (isTokenActive(83, tk_row)) { l.setToken(83, 7, 7); }; if (isTokenActive(15, tk_row) && token_production(l, 67113162, 14, 15, 1, states_buffer, scan) && l.byte_length > 7) { l.setToken(15, l.byte_length, l.token_length); } else if (isTokenActive(48, tk_row) && token_production(l, 67113243, 42, 48, 4, states_buffer, scan) && l.byte_length > 7) { l.setToken(48, l.byte_length, l.token_length); } else if (isTokenActive(55, tk_row) && token_production(l, 67113408, 48, 55, 8, states_buffer, scan) && l.byte_length > 7) { l.setToken(55, l.byte_length, l.token_length); } else if (isTokenActive(3, tk_row) && l.isUniID() && l.byte_length > 7) { l._type = 3; } } } } break; case 101:
            { if (l.get_byte_at(l.byte_offset) == 101) { if (l.get_byte_at(l.byte_offset + 1) == 120) { if (6 == compare(l, l.byte_offset + 2, 143, 6, token_sequence_lookup)) { if (isTokenActive(89, tk_row)) { l.setToken(89, 8, 8); }; if (isTokenActive(15, tk_row) && token_production(l, 67113162, 14, 15, 1, states_buffer, scan) && l.byte_length > 8) { l.setToken(15, l.byte_length, l.token_length); } else if (isTokenActive(48, tk_row) && token_production(l, 67113243, 42, 48, 4, states_buffer, scan) && l.byte_length > 8) { l.setToken(48, l.byte_length, l.token_length); } else if (isTokenActive(55, tk_row) && token_production(l, 67113408, 48, 55, 8, states_buffer, scan) && l.byte_length > 8) { l.setToken(55, l.byte_length, l.token_length); } else if (isTokenActive(3, tk_row) && l.isUniID() && l.byte_length > 8) { l._type = 3; } } } else if (l.get_byte_at(l.byte_offset + 1) == 114) { if (l.get_byte_at(l.byte_offset + 2) == 104) { if (isTokenActive(90, tk_row)) { l.setToken(90, 3, 3); }; if (isTokenActive(15, tk_row) && token_production(l, 67113162, 14, 15, 1, states_buffer, scan) && l.byte_length > 3) { l.setToken(15, l.byte_length, l.token_length); } else if (isTokenActive(48, tk_row) && token_production(l, 67113243, 42, 48, 4, states_buffer, scan) && l.byte_length > 3) { l.setToken(48, l.byte_length, l.token_length); } else if (isTokenActive(55, tk_row) && token_production(l, 67113408, 48, 55, 8, states_buffer, scan) && l.byte_length > 3) { l.setToken(55, l.byte_length, l.token_length); } else if (isTokenActive(3, tk_row) && l.isUniID() && l.byte_length > 3) { l._type = 3; } } } } } break; case 102:
            { if (l.get_byte_at(l.byte_offset) == 102) { if (l.get_byte_at(l.byte_offset + 1) == 111) { if (2 == compare(l, l.byte_offset + 2, 52, 2, token_sequence_lookup)) { if (isTokenActive(72, tk_row)) { l.setToken(72, 4, 4); }; if (isTokenActive(15, tk_row) && token_production(l, 67113162, 14, 15, 1, states_buffer, scan) && l.byte_length > 4) { l.setToken(15, l.byte_length, l.token_length); } else if (isTokenActive(48, tk_row) && token_production(l, 67113243, 42, 48, 4, states_buffer, scan) && l.byte_length > 4) { l.setToken(48, l.byte_length, l.token_length); } else if (isTokenActive(55, tk_row) && token_production(l, 67113408, 48, 55, 8, states_buffer, scan) && l.byte_length > 4) { l.setToken(55, l.byte_length, l.token_length); } else if (isTokenActive(3, tk_row) && l.isUniID() && l.byte_length > 4) { l._type = 3; } } } else if (l.get_byte_at(l.byte_offset + 1) == 97) { if (2 == compare(l, l.byte_offset + 2, 174, 2, token_sequence_lookup)) { if (isTokenActive(78, tk_row)) { l.setToken(78, 4, 4); }; if (isTokenActive(15, tk_row) && token_production(l, 67113162, 14, 15, 1, states_buffer, scan) && l.byte_length > 4) { l.setToken(15, l.byte_length, l.token_length); } else if (isTokenActive(48, tk_row) && token_production(l, 67113243, 42, 48, 4, states_buffer, scan) && l.byte_length > 4) { l.setToken(48, l.byte_length, l.token_length); } else if (isTokenActive(55, tk_row) && token_production(l, 67113408, 48, 55, 8, states_buffer, scan) && l.byte_length > 4) { l.setToken(55, l.byte_length, l.token_length); } else if (isTokenActive(3, tk_row) && l.isUniID() && l.byte_length > 4) { l._type = 3; } } } else if (l.get_byte_at(l.byte_offset + 1) == 58) { if (isTokenActive(51, tk_row)) { l.setToken(51, 2, 2); } } } } break; case 103:
            { if (l.get_byte_at(l.byte_offset) == 103) { if (l.get_byte_at(l.byte_offset + 1) == 111) { if (2 == compare(l, l.byte_offset + 2, 14, 2, token_sequence_lookup)) { if (isTokenActive(86, tk_row)) { l.setToken(86, 4, 4); }; if (isTokenActive(15, tk_row) && token_production(l, 67113162, 14, 15, 1, states_buffer, scan) && l.byte_length > 4) { l.setToken(15, l.byte_length, l.token_length); } else if (isTokenActive(48, tk_row) && token_production(l, 67113243, 42, 48, 4, states_buffer, scan) && l.byte_length > 4) { l.setToken(48, l.byte_length, l.token_length); } else if (isTokenActive(55, tk_row) && token_production(l, 67113408, 48, 55, 8, states_buffer, scan) && l.byte_length > 4) { l.setToken(55, l.byte_length, l.token_length); } else if (isTokenActive(3, tk_row) && l.isUniID() && l.byte_length > 4) { l._type = 3; } } } else if (l.get_byte_at(l.byte_offset + 1) == 58) { if (isTokenActive(14, tk_row)) { l.setToken(14, 2, 2); } } } } break; case 105:
            { if (l.get_byte_at(l.byte_offset) == 105) { if (l.get_byte_at(l.byte_offset + 1) == 100) { if (isTokenActive(76, tk_row)) { l.setToken(76, 2, 2); }; if (isTokenActive(15, tk_row) && token_production(l, 67113162, 14, 15, 1, states_buffer, scan) && l.byte_length > 2) { l.setToken(15, l.byte_length, l.token_length); } else if (isTokenActive(48, tk_row) && token_production(l, 67113243, 42, 48, 4, states_buffer, scan) && l.byte_length > 2) { l.setToken(48, l.byte_length, l.token_length); } else if (isTokenActive(55, tk_row) && token_production(l, 67113408, 48, 55, 8, states_buffer, scan) && l.byte_length > 2) { l.setToken(55, l.byte_length, l.token_length); } else if (isTokenActive(3, tk_row) && l.isUniID() && l.byte_length > 2) { l._type = 3; } } } } break; case 110:
            { if (l.get_byte_at(l.byte_offset) == 110) { if (2 == compare(l, l.byte_offset + 1, 123, 2, token_sequence_lookup)) { if (isTokenActive(79, tk_row)) { l.setToken(79, 3, 3); }; if (isTokenActive(15, tk_row) && token_production(l, 67113162, 14, 15, 1, states_buffer, scan) && l.byte_length > 3) { l.setToken(15, l.byte_length, l.token_length); } else if (isTokenActive(48, tk_row) && token_production(l, 67113243, 42, 48, 4, states_buffer, scan) && l.byte_length > 3) { l.setToken(48, l.byte_length, l.token_length); } else if (isTokenActive(55, tk_row) && token_production(l, 67113408, 48, 55, 8, states_buffer, scan) && l.byte_length > 3) { l.setToken(55, l.byte_length, l.token_length); } else if (isTokenActive(3, tk_row) && l.isUniID() && l.byte_length > 3) { l._type = 3; }; if (l.get_byte_at(l.byte_offset + 3) == 104) { if (3 == compare(l, l.byte_offset + 4, 126, 3, token_sequence_lookup)) { if (isTokenActive(84, tk_row)) { l.setToken(84, 7, 7); }; if (isTokenActive(15, tk_row) && token_production(l, 67113162, 14, 15, 1, states_buffer, scan) && l.byte_length > 7) { l.setToken(15, l.byte_length, l.token_length); } else if (isTokenActive(48, tk_row) && token_production(l, 67113243, 42, 48, 4, states_buffer, scan) && l.byte_length > 7) { l.setToken(48, l.byte_length, l.token_length); } else if (isTokenActive(55, tk_row) && token_production(l, 67113408, 48, 55, 8, states_buffer, scan) && l.byte_length > 7) { l.setToken(55, l.byte_length, l.token_length); } else if (isTokenActive(3, tk_row) && l.isUniID() && l.byte_length > 7) { l._type = 3; } } } } } } break; case 111:
            { if (l.get_byte_at(l.byte_offset) == 111) { if (l.get_byte_at(l.byte_offset + 1) == 110) { if (isTokenActive(87, tk_row)) { l.setToken(87, 2, 2); }; if (isTokenActive(15, tk_row) && token_production(l, 67113162, 14, 15, 1, states_buffer, scan) && l.byte_length > 2) { l.setToken(15, l.byte_length, l.token_length); } else if (isTokenActive(48, tk_row) && token_production(l, 67113243, 42, 48, 4, states_buffer, scan) && l.byte_length > 2) { l.setToken(48, l.byte_length, l.token_length); } else if (isTokenActive(55, tk_row) && token_production(l, 67113408, 48, 55, 8, states_buffer, scan) && l.byte_length > 2) { l.setToken(55, l.byte_length, l.token_length); } else if (isTokenActive(3, tk_row) && l.isUniID() && l.byte_length > 2) { l._type = 3; } } } } break; case 112:
            { if (l.get_byte_at(l.byte_offset) == 112) { if (l.get_byte_at(l.byte_offset + 1) == 101) { if (2 == compare(l, l.byte_offset + 2, 92, 2, token_sequence_lookup)) { if (isTokenActive(59, tk_row)) { l.setToken(59, 4, 4); }; if (isTokenActive(15, tk_row) && token_production(l, 67113162, 14, 15, 1, states_buffer, scan) && l.byte_length > 4) { l.setToken(15, l.byte_length, l.token_length); } else if (isTokenActive(48, tk_row) && token_production(l, 67113243, 42, 48, 4, states_buffer, scan) && l.byte_length > 4) { l.setToken(48, l.byte_length, l.token_length); } else if (isTokenActive(55, tk_row) && token_production(l, 67113408, 48, 55, 8, states_buffer, scan) && l.byte_length > 4) { l.setToken(55, l.byte_length, l.token_length); } else if (isTokenActive(3, tk_row) && l.isUniID() && l.byte_length > 4) { l._type = 3; } } } else if (l.get_byte_at(l.byte_offset + 1) == 114) { if (2 == compare(l, l.byte_offset + 2, 197, 2, token_sequence_lookup)) { if (isTokenActive(70, tk_row)) { l.setToken(70, 4, 4); }; if (isTokenActive(15, tk_row) && token_production(l, 67113162, 14, 15, 1, states_buffer, scan) && l.byte_length > 4) { l.setToken(15, l.byte_length, l.token_length); } else if (isTokenActive(48, tk_row) && token_production(l, 67113243, 42, 48, 4, states_buffer, scan) && l.byte_length > 4) { l.setToken(48, l.byte_length, l.token_length); } else if (isTokenActive(55, tk_row) && token_production(l, 67113408, 48, 55, 8, states_buffer, scan) && l.byte_length > 4) { l.setToken(55, l.byte_length, l.token_length); } else if (isTokenActive(3, tk_row) && l.isUniID() && l.byte_length > 4) { l._type = 3; } } } else if (l.get_byte_at(l.byte_offset + 1) == 97) { if (2 == compare(l, l.byte_offset + 2, 262, 2, token_sequence_lookup)) { if (isTokenActive(77, tk_row)) { l.setToken(77, 4, 4); }; if (isTokenActive(15, tk_row) && token_production(l, 67113162, 14, 15, 1, states_buffer, scan) && l.byte_length > 4) { l.setToken(15, l.byte_length, l.token_length); } else if (isTokenActive(48, tk_row) && token_production(l, 67113243, 42, 48, 4, states_buffer, scan) && l.byte_length > 4) { l.setToken(48, l.byte_length, l.token_length); } else if (isTokenActive(55, tk_row) && token_production(l, 67113408, 48, 55, 8, states_buffer, scan) && l.byte_length > 4) { l.setToken(55, l.byte_length, l.token_length); } else if (isTokenActive(3, tk_row) && l.isUniID() && l.byte_length > 4) { l._type = 3; } } } } } break; case 114:
            { if (l.get_byte_at(l.byte_offset) == 114) { if (isTokenActive(46, tk_row)) { l.setToken(46, 1, 1); }; if (isTokenActive(15, tk_row) && token_production(l, 67113162, 14, 15, 1, states_buffer, scan) && l.byte_length > 1) { l.setToken(15, l.byte_length, l.token_length); } else if (isTokenActive(48, tk_row) && token_production(l, 67113243, 42, 48, 4, states_buffer, scan) && l.byte_length > 1) { l.setToken(48, l.byte_length, l.token_length); } else if (isTokenActive(55, tk_row) && token_production(l, 67113408, 48, 55, 8, states_buffer, scan) && l.byte_length > 1) { l.setToken(55, l.byte_length, l.token_length); } else if (isTokenActive(3, tk_row) && l.isUniID() && l.byte_length > 1) { l._type = 3; }; if (l.get_byte_at(l.byte_offset + 1) == 101) { if (l.get_byte_at(l.byte_offset + 2) == 99) { if (4 == compare(l, l.byte_offset + 3, 76, 4, token_sequence_lookup)) { if (isTokenActive(54, tk_row)) { l.setToken(54, 7, 7); }; if (isTokenActive(15, tk_row) && token_production(l, 67113162, 14, 15, 1, states_buffer, scan) && l.byte_length > 7) { l.setToken(15, l.byte_length, l.token_length); } else if (isTokenActive(48, tk_row) && token_production(l, 67113243, 42, 48, 4, states_buffer, scan) && l.byte_length > 7) { l.setToken(48, l.byte_length, l.token_length); } else if (isTokenActive(55, tk_row) && token_production(l, 67113408, 48, 55, 8, states_buffer, scan) && l.byte_length > 7) { l.setToken(55, l.byte_length, l.token_length); } else if (isTokenActive(3, tk_row) && l.isUniID() && l.byte_length > 7) { l._type = 3; } } } else if (l.get_byte_at(l.byte_offset + 2) == 116) { if (3 == compare(l, l.byte_offset + 3, 192, 3, token_sequence_lookup)) { if (isTokenActive(50, tk_row)) { l.setToken(50, 6, 6); }; if (isTokenActive(15, tk_row) && token_production(l, 67113162, 14, 15, 1, states_buffer, scan) && l.byte_length > 6) { l.setToken(15, l.byte_length, l.token_length); } else if (isTokenActive(48, tk_row) && token_production(l, 67113243, 42, 48, 4, states_buffer, scan) && l.byte_length > 6) { l.setToken(48, l.byte_length, l.token_length); } else if (isTokenActive(55, tk_row) && token_production(l, 67113408, 48, 55, 8, states_buffer, scan) && l.byte_length > 6) { l.setToken(55, l.byte_length, l.token_length); } else if (isTokenActive(3, tk_row) && l.isUniID() && l.byte_length > 6) { l._type = 3; } } } else if (l.get_byte_at(l.byte_offset + 2) == 100) { if (3 == compare(l, l.byte_offset + 3, 251, 3, token_sequence_lookup)) { if (isTokenActive(66, tk_row)) { l.setToken(66, 6, 6); }; if (isTokenActive(15, tk_row) && token_production(l, 67113162, 14, 15, 1, states_buffer, scan) && l.byte_length > 6) { l.setToken(15, l.byte_length, l.token_length); } else if (isTokenActive(48, tk_row) && token_production(l, 67113243, 42, 48, 4, states_buffer, scan) && l.byte_length > 6) { l.setToken(48, l.byte_length, l.token_length); } else if (isTokenActive(55, tk_row) && token_production(l, 67113408, 48, 55, 8, states_buffer, scan) && l.byte_length > 6) { l.setToken(55, l.byte_length, l.token_length); } else if (isTokenActive(3, tk_row) && l.isUniID() && l.byte_length > 6) { l._type = 3; } } } else if (l.get_byte_at(l.byte_offset + 2) == 112) { if (3 == compare(l, l.byte_offset + 3, 257, 3, token_sequence_lookup)) { if (isTokenActive(94, tk_row)) { l.setToken(94, 6, 6); }; if (isTokenActive(15, tk_row) && token_production(l, 67113162, 14, 15, 1, states_buffer, scan) && l.byte_length > 6) { l.setToken(15, l.byte_length, l.token_length); } else if (isTokenActive(48, tk_row) && token_production(l, 67113243, 42, 48, 4, states_buffer, scan) && l.byte_length > 6) { l.setToken(48, l.byte_length, l.token_length); } else if (isTokenActive(55, tk_row) && token_production(l, 67113408, 48, 55, 8, states_buffer, scan) && l.byte_length > 6) { l.setToken(55, l.byte_length, l.token_length); } else if (isTokenActive(3, tk_row) && l.isUniID() && l.byte_length > 6) { l._type = 3; } } } } } } break; case 115:
            { if (l.get_byte_at(l.byte_offset) == 115) { if (l.get_byte_at(l.byte_offset + 1) == 121) { if (6 == compare(l, l.byte_offset + 2, 57, 6, token_sequence_lookup)) { if (isTokenActive(88, tk_row)) { l.setToken(88, 8, 8); } } } else if (l.get_byte_at(l.byte_offset + 1) == 107) { if (5 == compare(l, l.byte_offset + 2, 178, 5, token_sequence_lookup)) { if (isTokenActive(96, tk_row)) { l.setToken(96, 7, 7); }; if (isTokenActive(15, tk_row) && token_production(l, 67113162, 14, 15, 1, states_buffer, scan) && l.byte_length > 7) { l.setToken(15, l.byte_length, l.token_length); } else if (isTokenActive(48, tk_row) && token_production(l, 67113243, 42, 48, 4, states_buffer, scan) && l.byte_length > 7) { l.setToken(48, l.byte_length, l.token_length); } else if (isTokenActive(55, tk_row) && token_production(l, 67113408, 48, 55, 8, states_buffer, scan) && l.byte_length > 7) { l.setToken(55, l.byte_length, l.token_length); } else if (isTokenActive(3, tk_row) && l.isUniID() && l.byte_length > 7) { l._type = 3; } } } else if (l.get_byte_at(l.byte_offset + 1) == 99) { if (l.get_byte_at(l.byte_offset + 2) == 111) { if (2 == compare(l, l.byte_offset + 3, 234, 2, token_sequence_lookup)) { if (isTokenActive(82, tk_row)) { l.setToken(82, 5, 5); }; if (isTokenActive(15, tk_row) && token_production(l, 67113162, 14, 15, 1, states_buffer, scan) && l.byte_length > 5) { l.setToken(15, l.byte_length, l.token_length); } else if (isTokenActive(48, tk_row) && token_production(l, 67113243, 42, 48, 4, states_buffer, scan) && l.byte_length > 5) { l.setToken(48, l.byte_length, l.token_length); } else if (isTokenActive(55, tk_row) && token_production(l, 67113408, 48, 55, 8, states_buffer, scan) && l.byte_length > 5) { l.setToken(55, l.byte_length, l.token_length); } else if (isTokenActive(3, tk_row) && l.isUniID() && l.byte_length > 5) { l._type = 3; }; if (l.get_byte_at(l.byte_offset + 5) == 115) { if (isTokenActive(81, tk_row)) { l.setToken(81, 6, 6); }; if (isTokenActive(15, tk_row) && token_production(l, 67113162, 14, 15, 1, states_buffer, scan) && l.byte_length > 6) { l.setToken(15, l.byte_length, l.token_length); } else if (isTokenActive(48, tk_row) && token_production(l, 67113243, 42, 48, 4, states_buffer, scan) && l.byte_length > 6) { l.setToken(48, l.byte_length, l.token_length); } else if (isTokenActive(55, tk_row) && token_production(l, 67113408, 48, 55, 8, states_buffer, scan) && l.byte_length > 6) { l.setToken(55, l.byte_length, l.token_length); } else if (isTokenActive(3, tk_row) && l.isUniID() && l.byte_length > 6) { l._type = 3; } } } } else if (l.get_byte_at(l.byte_offset + 2) == 97) { if (l.get_byte_at(l.byte_offset + 3) == 110) { if (isTokenActive(73, tk_row)) { l.setToken(73, 4, 4); }; if (isTokenActive(15, tk_row) && token_production(l, 67113162, 14, 15, 1, states_buffer, scan) && l.byte_length > 4) { l.setToken(15, l.byte_length, l.token_length); } else if (isTokenActive(48, tk_row) && token_production(l, 67113243, 42, 48, 4, states_buffer, scan) && l.byte_length > 4) { l.setToken(48, l.byte_length, l.token_length); } else if (isTokenActive(55, tk_row) && token_production(l, 67113408, 48, 55, 8, states_buffer, scan) && l.byte_length > 4) { l.setToken(55, l.byte_length, l.token_length); } else if (isTokenActive(3, tk_row) && l.isUniID() && l.byte_length > 4) { l._type = 3; } } } } else if (l.get_byte_at(l.byte_offset + 1) == 116) { if (3 == compare(l, l.byte_offset + 2, 238, 3, token_sequence_lookup)) { if (isTokenActive(85, tk_row)) { l.setToken(85, 5, 5); }; if (isTokenActive(15, tk_row) && token_production(l, 67113162, 14, 15, 1, states_buffer, scan) && l.byte_length > 5) { l.setToken(15, l.byte_length, l.token_length); } else if (isTokenActive(48, tk_row) && token_production(l, 67113243, 42, 48, 4, states_buffer, scan) && l.byte_length > 5) { l.setToken(48, l.byte_length, l.token_length); } else if (isTokenActive(55, tk_row) && token_production(l, 67113408, 48, 55, 8, states_buffer, scan) && l.byte_length > 5) { l.setToken(55, l.byte_length, l.token_length); } else if (isTokenActive(3, tk_row) && l.isUniID() && l.byte_length > 5) { l._type = 3; } } } else if (l.get_byte_at(l.byte_offset + 1) == 101) { if (l.get_byte_at(l.byte_offset + 2) == 116) { if (isTokenActive(69, tk_row)) { l.setToken(69, 3, 3); }; if (isTokenActive(15, tk_row) && token_production(l, 67113162, 14, 15, 1, states_buffer, scan) && l.byte_length > 3) { l.setToken(15, l.byte_length, l.token_length); } else if (isTokenActive(48, tk_row) && token_production(l, 67113243, 42, 48, 4, states_buffer, scan) && l.byte_length > 3) { l.setToken(48, l.byte_length, l.token_length); } else if (isTokenActive(55, tk_row) && token_production(l, 67113408, 48, 55, 8, states_buffer, scan) && l.byte_length > 3) { l.setToken(55, l.byte_length, l.token_length); } else if (isTokenActive(3, tk_row) && l.isUniID() && l.byte_length > 3) { l._type = 3; } } } } } break; case 116:
            { if (l.get_byte_at(l.byte_offset) == 116) { if (l.get_byte_at(l.byte_offset + 1) == 111) { if (isTokenActive(71, tk_row)) { l.setToken(71, 2, 2); }; if (isTokenActive(15, tk_row) && token_production(l, 67113162, 14, 15, 1, states_buffer, scan) && l.byte_length > 2) { l.setToken(15, l.byte_length, l.token_length); } else if (isTokenActive(48, tk_row) && token_production(l, 67113243, 42, 48, 4, states_buffer, scan) && l.byte_length > 2) { l.setToken(48, l.byte_length, l.token_length); } else if (isTokenActive(55, tk_row) && token_production(l, 67113408, 48, 55, 8, states_buffer, scan) && l.byte_length > 2) { l.setToken(55, l.byte_length, l.token_length); } else if (isTokenActive(3, tk_row) && l.isUniID() && l.byte_length > 2) { l._type = 3; }; if (l.get_byte_at(l.byte_offset + 2) == 107) { if (2 == compare(l, l.byte_offset + 3, 20, 2, token_sequence_lookup)) { if (isTokenActive(68, tk_row)) { l.setToken(68, 5, 5); }; if (isTokenActive(15, tk_row) && token_production(l, 67113162, 14, 15, 1, states_buffer, scan) && l.byte_length > 5) { l.setToken(15, l.byte_length, l.token_length); } else if (isTokenActive(48, tk_row) && token_production(l, 67113243, 42, 48, 4, states_buffer, scan) && l.byte_length > 5) { l.setToken(48, l.byte_length, l.token_length); } else if (isTokenActive(55, tk_row) && token_production(l, 67113408, 48, 55, 8, states_buffer, scan) && l.byte_length > 5) { l.setToken(55, l.byte_length, l.token_length); } else if (isTokenActive(3, tk_row) && l.isUniID() && l.byte_length > 5) { l._type = 3; } } } } else if (l.get_byte_at(l.byte_offset + 1) == 104) { if (2 == compare(l, l.byte_offset + 2, 160, 2, token_sequence_lookup)) { if (isTokenActive(64, tk_row)) { l.setToken(64, 4, 4); }; if (isTokenActive(15, tk_row) && token_production(l, 67113162, 14, 15, 1, states_buffer, scan) && l.byte_length > 4) { l.setToken(15, l.byte_length, l.token_length); } else if (isTokenActive(48, tk_row) && token_production(l, 67113243, 42, 48, 4, states_buffer, scan) && l.byte_length > 4) { l.setToken(48, l.byte_length, l.token_length); } else if (isTokenActive(55, tk_row) && token_production(l, 67113408, 48, 55, 8, states_buffer, scan) && l.byte_length > 4) { l.setToken(55, l.byte_length, l.token_length); } else if (isTokenActive(3, tk_row) && l.isUniID() && l.byte_length > 4) { l._type = 3; } } } else if (l.get_byte_at(l.byte_offset + 1) == 107) { if (l.get_byte_at(l.byte_offset + 2) == 58) { if (isTokenActive(20, tk_row)) { l.setToken(20, 3, 3); } } } else if (l.get_byte_at(l.byte_offset + 1) == 58) { if (isTokenActive(17, tk_row)) { l.setToken(17, 2, 2); } } } } break; case 117:
            { if (l.get_byte_at(l.byte_offset) == 117) { if (4 == compare(l, l.byte_offset + 1, 116, 4, token_sequence_lookup)) { if (isTokenActive(75, tk_row)) { l.setToken(75, 5, 5); }; if (isTokenActive(15, tk_row) && token_production(l, 67113162, 14, 15, 1, states_buffer, scan) && l.byte_length > 5) { l.setToken(15, l.byte_length, l.token_length); } else if (isTokenActive(48, tk_row) && token_production(l, 67113243, 42, 48, 4, states_buffer, scan) && l.byte_length > 5) { l.setToken(48, l.byte_length, l.token_length); } else if (isTokenActive(55, tk_row) && token_production(l, 67113408, 48, 55, 8, states_buffer, scan) && l.byte_length > 5) { l.setToken(55, l.byte_length, l.token_length); } else if (isTokenActive(3, tk_row) && l.isUniID() && l.byte_length > 5) { l._type = 3; } } } } break; case 119:
            { if (l.get_byte_at(l.byte_offset) == 119) { if (5 == compare(l, l.byte_offset + 1, 130, 5, token_sequence_lookup)) { if (isTokenActive(80, tk_row)) { l.setToken(80, 6, 6); }; if (isTokenActive(15, tk_row) && token_production(l, 67113162, 14, 15, 1, states_buffer, scan) && l.byte_length > 6) { l.setToken(15, l.byte_length, l.token_length); } else if (isTokenActive(48, tk_row) && token_production(l, 67113243, 42, 48, 4, states_buffer, scan) && l.byte_length > 6) { l.setToken(48, l.byte_length, l.token_length); } else if (isTokenActive(55, tk_row) && token_production(l, 67113408, 48, 55, 8, states_buffer, scan) && l.byte_length > 6) { l.setToken(55, l.byte_length, l.token_length); } else if (isTokenActive(3, tk_row) && l.isUniID() && l.byte_length > 6) { l._type = 3; } } } } break; case 123:
            { if (l.get_byte_at(l.byte_offset) == 123) { if (isTokenActive(47, tk_row)) { l.setToken(47, 1, 1); }; if (isTokenActive(48, tk_row) && token_production(l, 67113243, 42, 48, 4, states_buffer, scan) && l.byte_length > 1) { l.setToken(48, l.byte_length, l.token_length); } } } break; case 124:
            { if (l.get_byte_at(l.byte_offset) == 124) { if (isTokenActive(30, tk_row)) { l.setToken(30, 1, 1); } } } break; case 125:
            { if (l.get_byte_at(l.byte_offset) == 125) { if (isTokenActive(49, tk_row)) { l.setToken(49, 1, 1); }; if (l.get_byte_at(l.byte_offset + 1) == 123) { if (isTokenActive(91, tk_row)) { l.setToken(91, 2, 2); } } } } break; default:
            break;
    }; if (((l._type) > 0)) return;; if (isTokenActive(15, tk_row) && pre_scan(l, 164) && token_production(l, 67113162, 14, 15, 1, states_buffer, scan)) { l.setToken(15, l.byte_length, l.token_length); return; } else if (isTokenActive(31, tk_row) && pre_scan(l, 167) && token_production(l, 67113220, 31, 31, 2, states_buffer, scan)) { l.setToken(31, l.byte_length, l.token_length); return; } else if (isTokenActive(48, tk_row) && pre_scan(l, 169) && token_production(l, 67113243, 42, 48, 4, states_buffer, scan)) { l.setToken(48, l.byte_length, l.token_length); return; } else if (isTokenActive(55, tk_row) && pre_scan(l, 175) && token_production(l, 67113408, 48, 55, 8, states_buffer, scan)) { l.setToken(55, l.byte_length, l.token_length); return; } else if (isTokenActive(97, tk_row) && pre_scan(l, 6) && token_production(l, 67113492, 2, 97, 16, states_buffer, scan)) { l.setToken(97, l.byte_length, l.token_length); return; } else if (isTokenActive(0, tk_row) && false) { l._type = 0; return; } else if (isTokenActive(8, tk_row) && l.isSP(true)) { l._type = 8; return; } else if (isTokenActive(3, tk_row) && l.isUniID()) { l._type = 3; return; } else if (isTokenActive(2, tk_row) && l.isSym(true)) { l._type = 2; return; } else if (isTokenActive(7, tk_row) && l.isNL()) { l._type = 7; return; } else if (isTokenActive(5, tk_row) && l.isNum()) { l._type = 5; return; } else if (isTokenActive(52, tk_row) && false) { l._type = 52; return; }
}

function scan(l, token, skip) {

    if (((l._type) <= 0)) scan_core(l, token);;

    if ((skip > 0 && isTokenActive(l._type, skip))) {

        while ((isTokenActive(l._type, skip))) {
            l.next(); scan_core(l, token);
        }
    }
}

const js_parser_pack = {

    init_table: () => {
        const table = new Uint8Array(382976);
        init_table(table);
        return table;
    },

    create_iterator: (data) => {
        return new KernelStateIterator(data);
    },

    recognize: (string, entry_index) => {

        const temp_buffer = new Uint8Array((string.length + 1) * 4);

        const actual_length = fillByteBufferWithUTF8FromString(string, temp_buffer, temp_buffer.length);

        const input_buffer = new Uint8Array(temp_buffer.buffer, 0, actual_length);

        let entry_pointer = 0;

        switch (entry_index) {

            case 0: default: entry_pointer = 67108868; break;

            case 1: entry_pointer = 67109830; break;

            case 2: entry_pointer = 67110566; break;

            case 3: entry_pointer = 67112200; break;
        }

        return run(
            states_buffer,
            input_buffer,
            input_buffer.length,
            entry_pointer,
            scan,
            false
        );
    }
};


const reduce_functions = [(_, s) => s[s.length - 1], (env, sym, tok) => ({ type: "hc-grammar-5", preamble: sym[0] || [], ir_states: sym[1].ir || [], productions: sym[1].productions, functions: sym[1].functions || [], imported_grammars: [], meta: null, ignore: [], all_symbols: [], bodies: [], tok }) /*0*/,
(env, sym, tok) => ({ type: "hc-grammar-5", preamble: null || [], ir_states: sym[0].ir || [], productions: sym[0].productions, functions: sym[0].functions || [], imported_grammars: [], meta: null, ignore: [], all_symbols: [], bodies: [], tok }) /*1*/,
(env, sym, tok) => ([sym[0]]) /*2*/,
(env, sym, tok) => ((sym[0].push(sym[1]), sym[0])) /*3*/,
(env, sym, tok) => ({ type: "ignore", symbols: sym[1], tok }) /*4*/,
(env, sym, tok) => ({ type: "generated", val: sym[1].toString(), tok, meta: false, annotation: null }) /*5*/,
(env, sym, tok) => (sym[0] + "" + sym[1]) /*6*/,
(env, sym, tok) => ({ type: "exclusive-literal", val: sym[1].toString(), tok, meta: false, annotation: null }) /*7*/,
(env, sym, tok) => ({ type: "literal", val: sym[0].toString(), tok, meta: false, annotation: null }) /*8*/,
(env, sym, tok) => ({ type: "literal", val: sym[1].toString(), tok, meta: false, annotation: null }) /*9*/,
(env, sym, tok) => ({ type: "eof", val: "END_OF_FILE", tok, meta: false, annotation: null }) /*10*/,
(env, sym, tok) => ({ type: "production_token", name: sym[1].name, production: sym[1], val: -1, tok, meta: false, annotation: null }) /*11*/,
(env, sym, tok) => ({ type: "sym-production", name: sym[0].toString(), production: null, val: -1, tok, meta: false, annotation: null }) /*12*/,
(env, sym, tok) => ({ type: "sym-production-import", module: sym[0].toString(), name: sym[2].toString(), production: null, tok, meta: false, annotation: null }) /*13*/,
(env, sym, tok) => ({ type: "import", uri: sym[1], reference: sym[3], tok }) /*14*/,
(env, sym, tok) => ({ type: "export", production: sym[1], reference: sym[3], tok }) /*15*/,
(env, sym, tok) => ({ type: "production-section", functions: [], productions: [sym[0]], ir: [], tok }) /*16*/,
(env, sym, tok) => ({ type: "production-section", functions: [sym[0]], productions: [], ir: [], tok }) /*17*/,
(env, sym, tok) => ({ type: "production-section", functions: [], productions: [], ir: [sym[0]], tok }) /*18*/,
(env, sym, tok) => (sym[0].productions.push(sym[1]), sym[0]) /*19*/,
(env, sym, tok) => (sym[0].functions.push(sym[1]), sym[0]) /*20*/,
(env, sym, tok) => (sym[0].ir.push(sym[1]), sym[0]) /*21*/,
(env, sym, tok) => ({ type: "production", priority: sym[1] ? 1000 : 0, symbol: sym[2], bodies: sym[4], id: -1, tok }) /*22*/,
(env, sym, tok) => ({ type: "production-merged", symbol: sym[1], bodies: sym[3], id: -1, tok }) /*23*/,
(env, sym, tok) => ({ type: "production", priority: null ? 1000 : 0, symbol: sym[1], bodies: sym[3], id: -1, tok }) /*24*/,
(env, sym, tok) => ({ type: "production", priority: sym[1] ? 1000 : 0, symbol: sym[2], bodies: null, id: -1, tok }) /*25*/,
(env, sym, tok) => ({ type: "production", priority: null ? 1000 : 0, symbol: sym[1], bodies: null, id: -1, tok }) /*26*/,
(env, sym, tok) => ((sym[0].push(sym[2]), sym[0])) /*27*/,
(env, sym, tok) => ({ type: "body", priority: !!sym[0] ? 1000 : 0, sym: sym[2], ref: sym[1], reduce_function: sym[3], FORCE_FORK: false, id: -1, production: null, tok }) /*28*/,
(env, sym, tok) => ({ type: "body", sym: sym[1], ref: sym[0], reduce_function: sym[2], FORCE_FORK: false, id: -1, production: null, tok }) /*29*/,
(env, sym, tok) => ({ type: "body", priority: !!sym[0] ? 1000 : 0, sym: sym[1], ref: null, reduce_function: sym[2], FORCE_FORK: false, id: -1, production: null, tok }) /*30*/,
(env, sym, tok) => ({ type: "body", priority: !!sym[0] ? 1000 : 0, sym: sym[2], ref: sym[1], reduce_function: null, FORCE_FORK: false, id: -1, production: null, tok }) /*31*/,
(env, sym, tok) => ({ type: "body", sym: sym[0], ref: null, reduce_function: sym[1], FORCE_FORK: false, id: -1, production: null, tok }) /*32*/,
(env, sym, tok) => ({ type: "body", sym: sym[1], ref: sym[0], reduce_function: null, FORCE_FORK: false, id: -1, production: null, tok }) /*33*/,
(env, sym, tok) => ({ type: "body", priority: !!sym[0] ? 1000 : 0, sym: sym[1], ref: null, reduce_function: null, FORCE_FORK: false, id: -1, production: null, tok }) /*34*/,
(env, sym, tok) => ({ type: "body", sym: sym[0], ref: null, reduce_function: null, FORCE_FORK: false, id: -1, production: null, tok }) /*35*/,
(env, sym, tok) => ({ type: "reference", val: tok.slice(1), tok }) /*36*/,
(env, sym, tok) => (sym[0].concat(sym[1])) /*37*/,
(env, sym, tok) => (sym[0]) /*38*/,
(env, sym, tok) => ([]) /*39*/,
(env, sym, tok) => (env.group_id++, sym[1].flat().map(e => (e.IS_OPTIONAL ? e.IS_OPTIONAL |= env.group_id << 8 : 0, e))) /*40*/,
(env, sym, tok) => ((sym[0].annotation = sym[1], sym[0])) /*41*/,
(env, sym, tok) => (sym[0].IS_OPTIONAL = 1, sym[0]) /*42*/,
(env, sym, tok) => ({ type: "look-behind", val: sym[1].val, phased: sym[1], tok }) /*43*/,
(env, sym, tok) => (sym[1].IS_NON_CAPTURE = true, sym[1]) /*44*/,
(env, sym, tok) => ({ type: "list-production", terminal_symbol: sym[2], IS_OPTIONAL: +(sym[1] == "(*"), val: sym[0], tok, meta: false, annotation: null }) /*45*/,
(env, sym, tok) => ({ type: "list-production", terminal_symbol: null, IS_OPTIONAL: +(sym[1] == "(*"), val: sym[0], tok, meta: false, annotation: null }) /*46*/,
(env, sym, tok) => ({ type: "group-production", val: sym[1], tok, meta: false, annotation: null }) /*47*/,
(env, sym, tok) => ({ type: "meta-exclude", sym: sym[1], meta: true, index: -1, tok, annotation: null }) /*48*/,
(env, sym, tok) => ({ type: "meta-ignore", sym: sym[1], meta: true, index: -1, tok, annotation: null }) /*49*/,
(env, sym, tok) => ({ type: "meta-reset", sym: sym[1], meta: true, index: -1, tok, annotation: null }) /*50*/,
(env, sym, tok) => ({ type: "empty", val: "", tok, meta: false, annotation: null }) /*51*/,
(env, sym, tok) => ({ type: "RETURNED", txt: sym[3].toString(), name: "", env: false, ref: "", IS_CONDITION: true, tok }) /*52*/,
(env, sym, tok) => ({ type: "referenced-function", ref: sym[2], tok }) /*53*/,
(env, sym, tok) => ({ type: "out_of_band", reference: sym[1], txt: sym[3].toString(), tok }) /*54*/,
(env, sym, tok) => ({ type: "out_of_band", production: sym[1], index: sym[2] || [0], txt: sym[4].toString(), tok }) /*55*/,
(env, sym, tok) => ({ type: "out_of_band", production: sym[1], index: sym[2] || [0], reference: sym[3], tok }) /*56*/,
(env, sym, tok) => ({ type: "out_of_band", production: sym[1], index: [0], txt: sym[3].toString(), tok }) /*57*/,
(env, sym, tok) => ({ type: "out_of_band", production: sym[1], index: [0], reference: sym[2], tok }) /*58*/,
(env, sym, tok) => ({ type: "state", id: sym[2], instructions: sym[4], fail: sym[5], symbol_meta: sym[6], tok }) /*59*/,
(env, sym, tok) => ({ type: "state", id: sym[1], instructions: sym[3], fail: sym[4], symbol_meta: sym[5], tok }) /*60*/,
(env, sym, tok) => ({ type: "state", id: sym[2], instructions: sym[4], symbol_meta: sym[5], tok }) /*61*/,
(env, sym, tok) => ({ type: "state", id: sym[2], instructions: sym[4], fail: sym[5], tok }) /*62*/,
(env, sym, tok) => ({ type: "state", id: sym[1], instructions: sym[3], symbol_meta: sym[4], tok }) /*63*/,
(env, sym, tok) => ({ type: "state", id: sym[1], instructions: sym[3], fail: sym[4], tok }) /*64*/,
(env, sym, tok) => ({ type: "state", id: sym[2], instructions: sym[4], tok }) /*65*/,
(env, sym, tok) => ({ type: "state", id: sym[1], instructions: sym[3], tok }) /*66*/,
(env, sym, tok) => ({ type: sym[0] + "", mode: sym[1] + "", ids: sym[2], instructions: sym[4], tok }) /*67*/,
(env, sym, tok) => (sym[1]) /*68*/,
(env, sym, tok) => ([...sym[0], ...sym[2], sym[3]]) /*69*/,
(env, sym, tok) => ([...sym[0], sym[1]]) /*70*/,
(env, sym, tok) => ([...sym[0], ...sym[2]]) /*71*/,
(env, sym, tok) => ([...sym[0]]) /*72*/,
(env, sym, tok) => ({ type: "reduce", len: parseInt(sym[1]), reduce_fn: parseInt(sym[2]), tok }) /*73*/,
(env, sym, tok) => ({ type: "reduce", len: -1, reduce_fn: sym[1], tok }) /*74*/,
(env, sym, tok) => ({ type: "token-assign", ids: sym[2], tok }) /*75*/,
(env, sym, tok) => ({ type: "set-prod", id: sym[3], tok }) /*76*/,
(env, sym, tok) => ({ type: "fork-to", states: sym[3], tok }) /*77*/,
(env, sym, tok) => ({ type: sym[1] ? "scan-back-until" : "scan-until", ids: sym[3], tok }) /*78*/,
(env, sym, tok) => ({ type: "token-id", id: sym[3], tok }) /*79*/,
(env, sym, tok) => ({ type: "pass", tok }) /*80*/,
(env, sym, tok) => ({ type: "fail", tok }) /*81*/,
(env, sym, tok) => ({ type: "not-in-scopes", ids: sym[4], tok }) /*82*/,
(env, sym, tok) => ({ type: "set-scope", scope: sym[3], tok }) /*83*/,
(env, sym, tok) => ({ type: "consume", EMPTY: !!sym[1], tok }) /*84*/,
(env, sym, tok) => ({ type: null ? "scan-back-until" : "scan-until", ids: sym[2], tok }) /*85*/,
(env, sym, tok) => ({ type: "consume", tok }) /*86*/,
(env, sym, tok) => (sym[2]) /*87*/,
(env, sym, tok) => ({ type: "goto", state: sym[1], tok }) /*88*/,
(env, sym, tok) => ({ type: "on-fail-state", id: sym[2], instructions: sym[3], symbol_meta: sym[5], fail: sym[4], tok }) /*89*/,
(env, sym, tok) => ({ type: "on-fail-state", id: sym[2], instructions: sym[3], symbol_meta: sym[4], tok }) /*90*/,
(env, sym, tok) => ({ type: "on-fail-state", id: sym[2], instructions: sym[3], fail: sym[4], tok }) /*91*/,
(env, sym, tok) => ({ type: "on-fail-state", id: sym[2], instructions: sym[3], tok }) /*92*/,
(env, sym, tok) => ({ type: "symbols", expected: sym[2], skipped: sym[3] || [], tok }) /*93*/,
(env, sym, tok) => ({ type: "symbols", expected: sym[2], skipped: null || [], tok }) /*94*/,
(env, sym, tok) => ({ type: "state", id: sym[0], instructions: sym[1], fail: sym[2], symbol_meta: sym[3], tok }) /*95*/,
(env, sym, tok) => ({ type: "state", id: sym[0], instructions: sym[1], symbol_meta: sym[2], tok }) /*96*/,
(env, sym, tok) => ({ type: "state", id: sym[0], instructions: sym[1], fail: sym[2], tok }) /*97*/,
(env, sym, tok) => ({ type: "state", id: sym[0], instructions: sym[1], tok }) /*98*/,
(env, sym, tok) => ({ type: "ERROR_RECOVERY", lexer_text: sym[3], body_text: sym[6], tok }) /*99*/,
(env, sym, tok) => (sym[0] + "") /*100*/,
(env, sym, tok) => (sym[1].toString() == "*" ? Infinity : typeof sym[1] == "object" ? sym[1] : parseInt(sym[1])) /*101*/,
(env, sym, tok) => ({ type: "repeat-state", tok }) /*102*/,
(env, sym, tok) => (parseInt(sym[0])) /*103*/];

export default ParserFramework(
    reduce_functions,
    {
        hc: 0,
        prd: 1,
        sym: 2,
        ir: 3,
    },
    js_parser_pack,

);

