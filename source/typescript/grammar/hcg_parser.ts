
import {
    ParserFramework,
    KernelParserCore,
    fillByteBufferWithUTF8FromString
} from "@candlelib/hydrocarbon";


const {
    token_production,
    init_table,
    KernelStateIterator,
    run,
    compare
} = KernelParserCore;

const token_sequence_lookup = new Uint8Array([
    47, 42, 47, 64, 73, 71, 78, 79, 82, 69, 103, 111, 116, 111, 95, 116, 111, 107, 101, 110, 92, 58, 58,
    35, 60, 62, 43, 62, 124, 91, 93, 63, 61, 40, 69, 88, 67, 41, 36, 101, 109, 112, 116, 121, 123, 125,
    94, 61, 62, 102, 111, 114, 107, 45, 115, 121, 109, 98, 111, 108, 115, 58, 44, 97, 115, 115, 101,
    114, 116, 65, 83, 114, 101, 116, 117, 114, 110, 111, 110, 112, 114, 111, 100, 98, 97, 99, 107, 117,
    110, 116, 105, 108, 105, 100, 110, 111, 116, 104, 105, 110, 103, 119, 105, 116, 104, 105, 110,
    99, 111, 110, 115, 117, 109, 101, 120, 112, 101, 99, 116, 101, 100, 64, 73, 77, 80, 79, 82, 84, 103,
    58, 116, 104, 101, 110, 60, 61, 40, 69, 82, 82, 36, 101, 111, 102, 97, 105, 108, 115, 107, 105, 112,
    112, 101, 100, 114, 101, 100, 117, 99, 101, 112, 97, 115, 115, 101, 114, 104, 64, 69, 88, 80, 79,
    82, 84, 116, 107, 58, 116, 58, 60, 91, 40, 73, 71, 78, 40, 82, 83, 84, 40, 82, 69, 68, 40, 42, 40, 43,
    102, 58, 115, 99, 111, 112, 101, 115, 116, 97, 116, 101, 115, 99, 97, 110, 115, 101, 116, 114, 101,
    112, 101, 97, 116, 112, 101, 101, 107
]);

const token_lookup = new Uint32Array([
    94636416, 1572864, 0, 384, 0, 0, 386, 0, 0, 94636416, 1572864, 4194304, 384, 0, 4194304, 10750336,
    0, 0, 83886464, 1572864, 0, 896, 0, 0, 1452, 0, 4194304, 0, 0, 4194304, 428, 0, 4194304, 1408,
    0, 4194304, 386, 0, 4194304, 94636418, 1572864, 4194304, 94636418, 1572864, 0, 2432, 0, 0,
    262528, 0, 0, 2097536, 0, 0, 8388992, 0, 0, 233860, 0, 0, 256, 0, 0, 233862, 0, 0, 4480, 0, 0, 33156,
    0, 0, 65920, 0, 0, 131456, 0, 0, 8576, 0, 0, 4119048614, 1576959, 0, 16776, 0, 0, 16768, 0, 0, 16810,
    0, 0, 392, 0, 0, 16426, 0, 0, 33152, 0, 0, 424, 0, 0, 4121409958, 1576959, 4194304, 256, 0, 4194304,
    4119048614, 1576959, 4194304, 388, 0, 0, 128, 0, 0, 428, 0, 0, 4119048582, 1576959, 0, 396,
    0, 0, 1573248, 0, 0, 524672, 0, 0, 1048960, 0, 0, 497289602, 43532296, 65536, 5767552, 0, 0,
    1581440, 0, 0, 4202880, 0, 0, 4194688, 0, 0, 4254839206, 43519999, 65536, 363071874, 1572872,
    4194304, 430, 0, 0, 416, 0, 0, 363071874, 1572872, 0, 83886464, 1572864, 4194304, 83886464,
    0, 0, 92275074, 1572864, 4194304, 384, 524288, 0, 384, 1048576, 0, 92275074, 1572864, 0, 16777600,
    0, 0, 33563008, 0, 0, 33554816, 0, 0, 134218112, 0, 0, 629387654, 1580999, 4194304, 545501572,
    8135, 0, 67109248, 0, 0, 134218114, 0, 0, 629387654, 1580999, 0, 360710530, 1572872, 0, 537112964,
    8135, 0, 4119048582, 1576959, 4194304, 1971564934, 1576911, 0, 102788, 72, 0, 102788, 64,
    0, 384, 8, 0, 897823110, 1576911, 0, 897823110, 1576911, 4194304, 360710530, 1572872, 4194304,
    537112964, 4039, 0, 384, 4096, 0, 536871296, 0, 0, 1073742208, 0, 0, 242052, 71, 0, 384, 3968,
    0, 4123242886, 1576959, 4194304, 233860, 71, 0, 384, 1, 0, 384, 2, 0, 384, 4, 0, 384, 64, 0, 1073844646,
    72, 0, 384, 128, 0, 384, 256, 0, 384, 512, 0, 384, 1024, 0, 384, 2048, 0, 102790, 72, 0, 384, 270336,
    0, 384, 8192, 0, 384, 212992, 0, 384, 16384, 0, 430, 16384, 0, 384, 32768, 0, 494928258, 43515912,
    65536, 384, 65536, 0, 384, 131072, 0, 384, 262144, 0, 8578, 352256, 262144, 430, 49152, 0, 428,
    49152, 0, 226492802, 43515912, 4259840, 384, 1048576, 4194304, 384, 2097152, 4194304, 1073742208,
    0, 4194304, 384, 3732930560, 4252784, 134218112, 8388608, 4259840, 384, 8388608, 4194304,
    134218112, 0, 4259840, 384, 0, 4259840, 134218112, 0, 4194304, 16808, 4194304, 4194304,
    392, 0, 4194304, 16810, 4194304, 4194304, 416, 0, 4194304, 16768, 0, 4194304, 384, 4194304,
    4194304, 16426, 4194304, 4194304, 134218114, 8388608, 4259840, 384, 0, 4243456, 384, 3724541952,
    4203632, 384, 16777216, 4194304, 536871296, 0, 4194304, 384, 4, 4194304, 384, 8, 4194304,
    8608, 0, 4194304, 386, 4, 4194304, 384, 67108864, 4194304, 134218114, 8388616, 4259840,
    384, 3623878656, 4195440, 134218114, 41943048, 4259840, 384, 33554432, 4194304, 384, 0,
    4726784, 384, 0, 4202496, 384, 33554432, 4718592, 384, 134217728, 4194304, 416, 524288,
    4194304, 134218114, 42467336, 4259840, 384, 268435456, 4194304, 384, 16777216, 4194820,
    384, 536870912, 4194304, 138412418, 41943048, 4259840, 4202880, 0, 4194304, 134226306,
    41943048, 4259840, 384, 0, 4194308, 384, 0, 4194312, 102820, 64, 0, 102788, 64, 4194304, 384,
    0, 4194816, 384, 1073741824, 4194304, 384, 0, 4198400, 384, 2147483648, 4194304, 384, 0,
    4194307, 384, 0, 4194305, 384, 0, 4194306, 384, 0, 4194320, 384, 0, 4194336, 384, 0, 4194368,
    384, 0, 4194432, 384, 0, 4194560, 384, 0, 4195328, 134218114, 41943048, 4261888, 384, 0, 4196352,
    8576, 2097152, 4194304, 1077936512, 0, 4194304, 134218114, 41943048, 5308416, 1073750400,
    0, 4194304, 102820, 64, 4194304, 134218114, 41943052, 6356992, 384, 0, 4210688, 134218114,
    8388608, 4308992, 384, 0, 4227072, 134218114, 0, 4259840, 386, 3732930560, 4252784, 384,
    0, 4325376, 134218114, 0, 6356992, 384, 0, 6291456, 386, 8388608, 4259840, 386, 0, 4259840,
    1454, 0, 0, 1454, 0, 4194304, 4119048622, 1576959, 0, 4119048622, 1576959, 4194304, 4253266350,
    43519999, 4259840, 1573262, 0, 0, 1610854790, 4039, 0, 537112966, 4039, 0, 8578, 0, 0, 384,
    8388608, 0, 134218114, 25165824, 4259872, 134218114, 25165824, 65536, 384, 0, 49152, 134218114,
    8388608, 114688, 8608, 0, 0, 1077944736, 0, 4194304, 1073750434, 0, 0, 1073750432, 0, 0, 1073750434,
    0, 4194304, 4259033510, 43519999, 4259840, 1077944738, 0, 0, 1073742240, 0, 4194304, 384,
    3623878656, 1136, 134218114, 3632267272, 4793456, 134218114, 41943048, 65536, 384, 0,
    8192, 134218114, 8388616, 4792320, 384, 33554432, 0, 384, 0, 524288, 384, 0, 4096, 1208070566,
    41943112, 65536, 386, 8, 1048576, 386, 8, 5242880, 1073742242, 0, 0, 1073844646, 64, 0, 1073844644,
    64, 4194304, 384, 0, 2097152, 134218114, 0, 65536, 16392, 0, 0, 16424, 4194304, 0, 512, 0, 0
]);

const states_buffer = new Uint32Array([
    0, 4026531840, 2164260864, 4026531841, 2147483648, 603979787, 603979785, 603979788,
    0, 805306368, 0, 0, 2852126728, 196612, 196616, 2147491864, 2147491866, 2143289362, 2160066571,
    2147491892, 2147483669, 2147491891, 2147483671, 2147483649, 603979823, 603979808, 0,
    2147483649, 603979823, 603979817, 0, 4026531840, 603979811, 603979874, 0, 603979814,
    603980728, 0, 1073742096, 805306369, 0, 603979820, 603980728, 0, 1073742344, 805306369,
    0, 0, 2852192261, 458753, 1, 2147483657, 2147483650, 268435456, 603979873, 603979834,
    0, 4026531840, 2852126724, 524297, 131078, 2147483656, 2147483653, 2160066562, 2151677955,
    2147483655, 2147487754, 603979848, 0, 603979862, 0, 4026531840, 603979851, 603983610,
    0, 2852192259, 720900, 1, 2147483658, 268435456, 603979859, 0, 4026531840, 1073741848,
    805306370, 0, 2852192259, 720900, 1, 2147483658, 268435456, 603979870, 0, 4026531840,
    1073741840, 805306370, 0, 0, 2147483651, 603979904, 603979879, 603979920, 0, 1073742600,
    805306371, 0, 2852126723, 196612, 196616, 2147487768, 2147487770, 2143289362, 2160066571,
    2147487796, 2147483669, 2147487795, 2147483671, 603979898, 0, 4026531840, 4026531840,
    0, 603979901, 603979920, 0, 1073742864, 805306371, 0, 3087007882, 2499805187, 0, 65539,
    4026531840, 0, 0, 603979904, 603979882, 0, 2499805187, 0, 65537, 4026531840, 0, 0, 2852126736,
    327681, 131076, 2147508247, 2147500053, 2147491858, 2134900747, 2147483652, 603979958,
    603979944, 0, 2147483652, 603979958, 603979949, 0, 2147483652, 603979958, 603979952,
    0, 2147483652, 603979958, 603979955, 0, 4026531840, 603979947, 603979959, 0, 805306372,
    0, 603979947, 603980451, 0, 603979947, 603980510, 0, 603979947, 603980628, 0, 0, 2852192261,
    983041, 1, 2147483659, 2147483653, 268435456, 603979983, 603979969, 0, 4026531840, 603979972,
    603979984, 0, 2852192259, 65556, 1, 2147483655, 268435456, 603979980, 0, 4026531840, 1073743128,
    805306373, 0, 0, 2147483654, 603980012, 603979989, 603980028, 0, 1073742600, 805306374,
    0, 2852126723, 1245204, 131078, 2168455180, 2147483665, 2147483650, 2151682055, 2147483663,
    2147483664, 603980006, 0, 4026531840, 4026531840, 0, 603980009, 603980028, 0, 1073742864,
    805306374, 0, 3087007990, 2499805190, 0, 65539, 4026531840, 0, 0, 603980012, 603979992,
    0, 2499805190, 0, 65537, 4026531840, 0, 0, 2852126736, 1245185, 131077, 2164260876, 2147508241,
    2147491842, 2147491855, 2147500048, 2147483655, 603980068, 603980054, 0, 2147483655,
    603980068, 603980059, 0, 2147483655, 603980068, 603980062, 0, 2147483655, 603980068,
    603980065, 0, 4026531840, 0, 603980057, 603980069, 0, 805306375, 0, 603980057, 603980180,
    0, 603980057, 603980409, 0, 603980057, 603980429, 0, 0, 2852192261, 1441793, 1, 2147483660,
    2147483656, 268435456, 603980090, 603980079, 0, 4026531840, 2852192259, 1703937, 1, 2147483661,
    268435456, 603980087, 0, 4026531840, 1073743376, 805306376, 0, 0, 2852126728, 1835009,
    65538, 2147483662, 2147491843, 2147483657, 603980164, 603980105, 0, 2147483657, 603980164,
    603980115, 0, 4026531840, 2852192259, 1900545, 1, 2147483662, 268435456, 603980113, 0,
    4026531840, 805306377, 0, 2852192259, 2031617, 1, 2147483651, 268435456, 603980113, 0,
    4026531840, 2852126726, 2097152, 65539, 2147487758, 2151677955, 2147491845, 603980137,
    0, 603980148, 0, 603980156, 0, 4026531840, 0, 2852192259, 2097152, 1, 2147483651, 268435456,
    603980145, 0, 4026531840, 1073743632, 805306377, 0, 2852192259, 2097152, 1, 2147483662,
    268435456, 603980145, 0, 4026531840, 2852192259, 2097152, 1, 2147483653, 268435456, 603980145,
    0, 4026531840, 3087008142, 2499805193, 0, 65539, 4026531840, 0, 0, 603980164, 603980123,
    0, 2499805193, 0, 65537, 4026531840, 0, 0, 2852126728, 1507329, 65538, 2147491842, 2147483663,
    2147483658, 603980367, 603980194, 0, 2147483658, 603980367, 603980356, 0, 4026531840,
    2852192259, 2162689, 1, 2147483663, 268435456, 603980202, 0, 4026531840, 603980205, 603983764,
    0, 2852126726, 1769472, 262175, 2239766544, 2210398209, 2239766530, 2256543779, 2256543780,
    2231377925, 2147491878, 2189430791, 2189434888, 2147491881, 2222989338, 2147491883,
    2176851980, 2176851981, 2147491870, 2172657679, 2176851985, 2185240599, 2185240600,
    2147491868, 2147491869, 2147491871, 2147491872, 2147491873, 2147491874, 2147491877,
    2147491879, 2147491880, 2147491882, 2147491891, 2147491892, 603980247, 0, 603980262,
    0, 603980315, 0, 4026531840, 0, 1610612738, 67109339, 67109345, 0, 603980254, 603980368,
    0, 1073743896, 805306378, 0, 603980259, 0, 1073743888, 805306378, 0, 2583756807, 65556,
    65538, 4026531840, 0, 603980270, 0, 0, 2785017860, 2293796, 327713, 2147483680, 2202009601,
    2231369730, 2147483683, 2147483684, 2231369733, 2147483686, 2231369735, 2147483688,
    2147483689, 2147483690, 2235568139, 2147483660, 2147483661, 2147483681, 2147483663,
    2147483664, 2147483665, 2147487762, 2147483699, 2147483700, 2147487765, 2147483682,
    2147483671, 2147483672, 2147483685, 2147483674, 2147483687, 2147483676, 2147483677,
    2147483678, 2147483679, 2147483691, 603980312, 0, 603980259, 0, 4026531840, 0, 603980254,
    603980368, 0, 2852126724, 2424841, 262173, 2231373840, 2231373841, 2231373826, 2248151075,
    2248151076, 2222985221, 2147487782, 2218790935, 2181038088, 2147487785, 2214596634,
    2147487787, 2168459276, 2168459277, 2147487774, 2164264975, 2185236504, 2147487772,
    2147487773, 2147487775, 2147487776, 2147487777, 2147487778, 2147487781, 2147487783,
    2147487784, 2147487786, 2147487795, 2147487796, 603980353, 0, 603980259, 0, 4026531840,
    0, 603980254, 603980368, 0, 2852192259, 2490369, 1, 2147483650, 268435456, 603980364,
    0, 4026531840, 1073744136, 805306378, 0, 0, 2852126732, 131072, 65539, 2147483656, 2151686145,
    2147500039, 2147483659, 603980408, 603980388, 0, 2147483659, 603980408, 603980398, 0,
    2147483659, 603980408, 603980400, 0, 4026531840, 0, 2852192259, 65575, 1, 2147483656,
    268435456, 603980396, 0, 4026531840, 805306379, 0, 603980396, 0, 2852192259, 65556, 1,
    2147483655, 268435456, 603980396, 0, 4026531840, 0, 2852192261, 1572865, 1, 2147483664,
    2147483660, 268435456, 603980428, 603980419, 0, 4026531840, 603980422, 603984014, 0,
    603980425, 603980368, 0, 1073744408, 805306380, 0, 0, 2852192261, 1638401, 1, 2147483665,
    2147483661, 268435456, 603980450, 603980439, 0, 4026531840, 2852192259, 1703937, 1, 2147483661,
    268435456, 603980447, 0, 4026531840, 1073744656, 805306381, 0, 0, 2852192261, 1048577,
    1, 2147483666, 2147483662, 268435456, 603980496, 603980461, 0, 4026531840, 603980464,
    603984122, 0, 2583691283, 2818049, 131074, 4026531840, 0, 603980474, 0, 603980488, 0, 0,
    2852192259, 2883585, 1, 2147483667, 268435456, 603980482, 0, 4026531840, 603980485, 603980497,
    0, 1073744928, 805306382, 0, 2852192259, 2949121, 1, 2147483668, 268435456, 603980482,
    0, 4026531840, 0, 2852192261, 1703937, 1, 2147483661, 2147483663, 268435456, 603980509,
    603980507, 0, 4026531840, 805306383, 0, 0, 2852192261, 1114113, 1, 2147483669, 2147483664,
    268435456, 603980583, 603980520, 0, 4026531840, 2583756813, 1703937, 65538, 4026531840,
    0, 603980528, 0, 0, 2785017860, 3080193, 65539, 2155872276, 2147483667, 2147487766, 603980540,
    0, 603980580, 0, 4026531840, 0, 603980543, 603980614, 0, 2583691283, 2818049, 131074, 4026531840,
    0, 603980553, 0, 603980572, 0, 0, 2852192259, 2883585, 1, 2147483667, 268435456, 603980561,
    0, 4026531840, 2852192259, 2031617, 1, 2147483651, 268435456, 603980569, 0, 4026531840,
    1073745184, 805306384, 0, 2852192259, 2949121, 1, 2147483668, 268435456, 603980561, 0,
    4026531840, 603980543, 603980584, 0, 0, 2852192261, 1703937, 1, 2147483661, 2147483665,
    268435456, 603980613, 603980594, 0, 4026531840, 2852192259, 3276801, 1, 2147483670, 268435456,
    603980602, 0, 4026531840, 2852192259, 1703937, 1, 2147483661, 268435456, 603980610, 0,
    4026531840, 1073745432, 805306385, 0, 0, 2852192261, 1703937, 1, 2147483661, 2147483666,
    268435456, 603980627, 603980624, 0, 4026531840, 1073745672, 805306386, 0, 0, 2147483667,
    603980635, 603980633, 603980636, 0, 805306387, 0, 0, 2852192261, 1179649, 1, 2147483671,
    2147483668, 268435456, 603980655, 603980646, 0, 4026531840, 603980649, 603984204, 0,
    603980652, 603980715, 0, 1073745944, 805306388, 0, 0, 2852126736, 2621479, 131076, 2147508232,
    2147500037, 2147483650, 2147491843, 2147483669, 603980714, 603980680, 0, 2147483669,
    603980714, 603980690, 0, 2147483669, 603980714, 603980698, 0, 2147483669, 603980714,
    603980706, 0, 4026531840, 2852192259, 2490369, 1, 2147483650, 268435456, 603980688, 0,
    4026531840, 805306389, 0, 2852192259, 2031617, 1, 2147483651, 268435456, 603980688, 0,
    4026531840, 2852192259, 3538945, 1, 2147483653, 268435456, 603980688, 0, 4026531840,
    2852192259, 65575, 1, 2147483656, 268435456, 603980688, 0, 4026531840, 0, 2852192261,
    65556, 1, 2147483655, 2147483670, 268435456, 603980727, 603980725, 0, 4026531840, 805306390,
    0, 0, 2852126732, 3670020, 131076, 2151677976, 2147500084, 2147483674, 2147491891, 2147483671,
    603980810, 603980748, 0, 2147483671, 603980810, 603980754, 0, 2147483671, 603980810,
    603980760, 0, 4026531840, 603980751, 603980826, 0, 1073746184, 805306391, 0, 603980757,
    603982212, 0, 1073746440, 805306391, 0, 603980763, 603982243, 0, 1073746696, 805306391,
    0, 2852126729, 3801092, 131078, 2168455192, 2147500033, 2147483674, 2151690263, 2147487795,
    2147491892, 603980786, 0, 603980792, 0, 603980798, 0, 603980804, 0, 4026531840, 4026531840,
    0, 603980789, 603980826, 0, 1073746960, 805306391, 0, 603980795, 603982212, 0, 1073747216,
    805306391, 0, 603980801, 603982243, 0, 1073747472, 805306391, 0, 603980807, 603980628,
    0, 1073747728, 805306391, 0, 3087008788, 2499805207, 0, 65539, 4026531840, 0, 0, 603980810,
    603980766, 0, 2499805207, 0, 65537, 4026531840, 0, 0, 2852126728, 3735553, 65538, 2151677976,
    2147491866, 2147483672, 603980980, 603980840, 0, 2147483672, 603980980, 603980960, 0,
    4026531840, 2852192259, 4063233, 1, 2147483672, 268435456, 603980848, 0, 4026531840,
    2852126724, 4128769, 65538, 2147483673, 2143293453, 603980858, 0, 603980913, 0, 4026531840,
    2852192259, 4194305, 1, 2147483673, 268435456, 603980866, 0, 4026531840, 603980869, 603984246,
    0, 603980872, 603980994, 0, 2852126724, 4325380, 262167, 2214592528, 2164264961, 2214592514,
    2147487795, 2147487796, 2197815313, 2147483686, 2197815319, 2197819416, 2147483689,
    2193625114, 2147483691, 2189426700, 2151677965, 2147483677, 2147483663, 2147483680,
    2147483681, 2147483682, 2147483687, 2147483688, 2147483690, 2147483692, 603980904,
    0, 603980910, 0, 4026531840, 0, 603980907, 603981007, 0, 1073748008, 805306392, 0, 1073748768,
    805306392, 0, 603980916, 603984246, 0, 603980919, 603980994, 0, 2852126724, 4325380, 262167,
    2214592528, 2164264961, 2214592514, 2147487795, 2147487796, 2197815313, 2147483686,
    2197815319, 2197819416, 2147483689, 2193625114, 2147483691, 2189426700, 2151677965,
    2147483677, 2147483663, 2147483680, 2147483681, 2147483682, 2147483687, 2147483688,
    2147483690, 2147483692, 603980951, 0, 603980957, 0, 4026531840, 0, 603980954, 603981007,
    0, 1073748512, 805306392, 0, 1073749016, 805306392, 0, 2852192259, 4456449, 1, 2147483674,
    268435456, 603980968, 0, 4026531840, 603980971, 603984255, 0, 603980974, 603980994, 0,
    603980977, 603981007, 0, 1073748256, 805306392, 0, 0, 2852192261, 1703937, 1, 2147483661,
    2147483673, 268435456, 603980993, 603980991, 0, 4026531840, 805306393, 0, 0, 2852192261,
    4259841, 1, 2147483675, 2147483674, 268435456, 603981006, 603981004, 0, 4026531840, 805306394,
    0, 0, 2852126728, 4390913, 262162, 2164269072, 2164269073, 2197823490, 2147491869, 2147491872,
    2147491873, 2147491878, 2185232407, 2147491880, 2147491881, 2147491882, 2147491883,
    2168463372, 2105548813, 2147491874, 2147491855, 2147491879, 2147491884, 2147483675,
    603981266, 603981037, 0, 2147483675, 603981266, 603981043, 0, 4026531840, 603981040,
    603980628, 0, 1073742600, 805306395, 0, 603981040, 603981294, 0, 2852126728, 4784132,
    262172, 2231369744, 2210398209, 2231369730, 2243952675, 2243960868, 2147495973, 2147483686,
    2214592535, 2214592536, 2147483689, 2210398234, 2147483691, 2168455180, 2168455181,
    2147483678, 2164260879, 2168455185, 2147483676, 2147483677, 2147487775, 2147483680,
    2147483681, 2147483682, 2147483687, 2147483688, 2147483690, 2147483699, 2147483700,
    603981086, 0, 603981089, 0, 603981100, 0, 603981147, 0, 4026531840, 1073742600, 805306398,
    0, 2852192259, 2686977, 1, 2147483679, 268435456, 603981097, 0, 4026531840, 1073750800,
    805306399, 0, 2852192259, 2686977, 1, 2147483684, 268435456, 603981108, 0, 4026531840,
    2852126724, 4915201, 131078, 2151677964, 2147483664, 2160066562, 2151677967, 2147487779,
    2147483686, 603981122, 0, 603981136, 0, 4026531840, 603981125, 603981703, 0, 2852192259,
    5046273, 1, 2147483683, 268435456, 603981133, 0, 4026531840, 1073751840, 805306399, 0,
    2852192259, 5046273, 1, 2147483683, 268435456, 603981144, 0, 4026531840, 1073752088,
    805306399, 0, 2852192259, 2686977, 1, 2147483685, 268435456, 603981108, 0, 4026531840,
    1073747720, 805306397, 0, 2852126726, 5177348, 262168, 2218795024, 2164264961, 2218795010,
    2231373859, 2147487796, 2202017809, 2147491878, 2202013719, 2202013720, 2147491881,
    2197819418, 2147491883, 2155880460, 2160074765, 2147487772, 2147491855, 2147491869,
    2147491872, 2147491873, 2147491874, 2147491879, 2147491880, 2147491882, 2147483699,
    603981192, 0, 603981198, 0, 603981201, 0, 4026531840, 603981195, 603981941, 0, 1073749520,
    805306396, 0, 1073749768, 805306396, 0, 603981204, 603981403, 0, 1073750032, 805306397,
    0, 2852126724, 5242884, 196616, 2147487768, 2147487745, 2147487770, 2155878435, 2155872284,
    2147487795, 2147487796, 2147487767, 603981223, 0, 4026531840, 4026531840, 4026531840,
    2852192259, 4653057, 1, 2147483676, 268435456, 603981231, 0, 4026531840, 2852126724,
    4390913, 262162, 2164264976, 2164264977, 2197819394, 2147487773, 2147487776, 2147487777,
    2147487782, 2185232407, 2147487784, 2147487785, 2147487786, 2147487787, 2168459276,
    2105544717, 2147487778, 2147487759, 2147487783, 2147487788, 603981257, 0, 603981263,
    0, 4026531840, 603981260, 603980628, 0, 1073749272, 805306395, 0, 603981260, 603981294,
    0, 3087009256, 2499805211, 0, 327683, 4026531840, 0, 0, 603981266, 603981207, 0, 603981266,
    603981040, 0, 603981266, 603981158, 0, 603981266, 603981155, 0, 603981266, 603981046,
    0, 2499805211, 0, 65537, 4026531840, 0, 0, 2147483676, 603981315, 603981299, 603981316,
    0, 2852126724, 5242884, 196616, 2147487768, 2147487745, 2147487770, 2155876387, 2155876380,
    2147483699, 2147487796, 2147487767, 603981192, 0, 603981198, 0, 4026531840, 0, 2852126728,
    4718593, 262161, 2164260880, 2164260881, 2197815298, 2147483677, 2147483680, 2147483681,
    2147483686, 2147483687, 2147483688, 2147483689, 2147483690, 2147483691, 2164260876,
    2105540621, 2147483682, 2147483663, 2147491884, 2147483677, 603981387, 603981346, 0,
    2147483677, 603981387, 603981349, 0, 4026531840, 0, 603981155, 603981403, 0, 603981352,
    603981927, 0, 1073750280, 805306397, 0, 2852126724, 5177348, 262168, 2218786832, 2164267009,
    2218786818, 2231375907, 2147489844, 2202009617, 2147483686, 2202015767, 2202015768,
    2147483689, 2197821466, 2147483691, 2155872268, 2160066573, 2147489820, 2147483663,
    2147483677, 2147483680, 2147483681, 2147483682, 2147483687, 2147483688, 2147483690,
    2147487795, 603981201, 0, 4026531840, 4026531840, 4026531840, 3087009365, 2499805213,
    0, 65539, 4026531840, 0, 0, 603981387, 603981355, 0, 2499805213, 0, 65537, 4026531840, 0,
    0, 2852126732, 5308417, 262160, 2164269072, 2164269073, 2197823490, 2147483677, 2147491872,
    2147491873, 2147491878, 2147500071, 2147500072, 2147500073, 2147500074, 2147500075,
    2147491852, 2105548813, 2147491874, 2147491855, 2147483678, 603981463, 603981435, 0,
    2147483678, 603981463, 603981457, 0, 2147483678, 603981463, 603981460, 0, 4026531840,
    2852192259, 5439489, 1, 2147483677, 268435456, 603981443, 0, 4026531840, 603981446, 603984264,
    0, 2852192259, 5505025, 1, 2147483678, 268435456, 603981454, 0, 4026531840, 1073750552,
    805306398, 0, 603981086, 603981464, 0, 603981086, 603981744, 0, 0, 2852126728, 5570561,
    196618, 2160074768, 2176851985, 2176851970, 2147491872, 2147491852, 2147483661, 2147491878,
    2147491855, 2147491873, 2147491874, 2147483679, 603981673, 603981486, 0, 2147483679,
    603981673, 603981540, 0, 4026531840, 2583756813, 1703937, 65538, 4026531840, 0, 603981494,
    0, 0, 2785017860, 5701636, 262173, 2231369744, 2210398209, 2231369730, 2248146979, 2248146980,
    2147483685, 2218790934, 2218786839, 2218786840, 2147483689, 2214592538, 2147483691,
    2168455180, 2168455181, 2147483678, 2164260879, 2168455185, 2147483676, 2147483677,
    2147483679, 2147483680, 2147483681, 2147483682, 2147483686, 2147483687, 2147483688,
    2147483690, 2147483699, 2147483700, 603981532, 0, 603981537, 0, 4026531840, 0, 603981535,
    603980614, 0, 805306399, 0, 603981535, 603980584, 0, 2852126736, 5767169, 196617, 2160091152,
    2164277265, 2172669954, 2147483680, 2147495948, 2147487777, 2147512358, 2147504143,
    2147491874, 603981570, 0, 603981584, 0, 603981598, 0, 603981620, 0, 603981623, 0, 603981626,
    0, 603981629, 0, 603981632, 0, 4026531840, 0, 2852192259, 5832705, 1, 2147483680, 268435456,
    603981578, 0, 4026531840, 603981581, 603981464, 0, 1073751056, 805306399, 0, 2852192259,
    5898241, 1, 2147483681, 268435456, 603981592, 0, 4026531840, 603981595, 603981464, 0,
    1073751312, 805306399, 0, 2852192259, 5963777, 1, 2147483682, 268435456, 603981606, 0,
    4026531840, 603981609, 603981007, 0, 2852192259, 5046273, 1, 2147483683, 268435456, 603981617,
    0, 4026531840, 1073751576, 805306399, 0, 603981535, 603980069, 0, 603981535, 603980429,
    0, 603981535, 603980180, 0, 603981535, 603980409, 0, 603981535, 603981689, 0, 2852126728,
    4784132, 262169, 2147495952, 2210410497, 2147495938, 2231384099, 2231373860, 2147491877,
    2147495974, 2202021911, 2202021912, 2147495977, 2197827610, 2147495979, 2168467468,
    2168467469, 2147495966, 2164273167, 2147495953, 2147495964, 2147495965, 2147483679,
    2147495975, 2147495976, 2147495978, 2147495987, 2147495988, 603981089, 0, 603981100,
    0, 603981147, 0, 4026531840, 4026531840, 4026531840, 0, 3087009651, 2499805215, 0, 65539,
    4026531840, 0, 0, 603981673, 603981635, 0, 2499805215, 0, 65537, 4026531840, 0, 0, 2852192261,
    6029313, 1, 2147483686, 2147483680, 268435456, 603981702, 603981699, 0, 4026531840, 1073752328,
    805306400, 0, 0, 2852126736, 4980737, 131077, 2151677964, 2147500048, 2155880450, 2147491855,
    2147508262, 2147483681, 603981743, 603981729, 0, 2147483681, 603981743, 603981734, 0,
    2147483681, 603981743, 603981737, 0, 2147483681, 603981743, 603981740, 0, 4026531840,
    0, 603981732, 603980069, 0, 805306401, 0, 603981732, 603980180, 0, 603981732, 603980409,
    0, 603981732, 603981689, 0, 0, 2583691303, 5636097, 327684, 4026531840, 0, 0, 0, 2147483682,
    603981882, 603981772, 0, 2147483682, 603981882, 603981794, 0, 2147483682, 603981882,
    603981816, 0, 2147483682, 603981882, 603981838, 0, 2147483682, 603981882, 603981860,
    0, 0, 2852192259, 6160385, 1, 2147483687, 268435456, 603981780, 0, 4026531840, 603981783,
    603981883, 0, 2852192259, 5046273, 1, 2147483683, 268435456, 603981791, 0, 4026531840,
    1073752600, 805306402, 0, 2852192259, 6225921, 1, 2147483688, 268435456, 603981802, 0,
    4026531840, 603981805, 603981883, 0, 2852192259, 5046273, 1, 2147483683, 268435456, 603981813,
    0, 4026531840, 1073752856, 805306402, 0, 2852192259, 6291457, 1, 2147483689, 268435456,
    603981824, 0, 4026531840, 603981827, 603981883, 0, 2852192259, 5046273, 1, 2147483683,
    268435456, 603981835, 0, 4026531840, 1073753112, 805306402, 0, 2852192259, 6356993, 1,
    2147483690, 268435456, 603981846, 0, 4026531840, 603981849, 603981883, 0, 2852192259,
    5046273, 1, 2147483683, 268435456, 603981857, 0, 4026531840, 1073753368, 805306402, 0,
    2852192259, 6422529, 1, 2147483691, 268435456, 603981868, 0, 4026531840, 603981871, 603981464,
    0, 2852192259, 5046273, 1, 2147483683, 268435456, 603981879, 0, 4026531840, 1073753624,
    805306402, 0, 0, 2147483683, 603981911, 603981888, 603981703, 0, 1073742600, 805306403,
    0, 2852126723, 4915201, 131078, 2151677964, 2147483664, 2160066562, 2151677967, 2147487779,
    2147483686, 603981905, 0, 4026531840, 4026531840, 0, 603981908, 603981703, 0, 1073742864,
    805306403, 0, 3087009889, 2499805219, 0, 65539, 4026531840, 0, 0, 603981911, 603981891,
    0, 2499805219, 0, 65537, 4026531840, 0, 0, 2852192261, 5373953, 1, 2147483692, 2147483684,
    268435456, 603981940, 603981937, 0, 4026531840, 1073753864, 805306404, 0, 0, 2147483685,
    603982036, 603981946, 603982037, 0, 2852126724, 6553601, 65538, 2147487794, 2147483693,
    603981956, 0, 603982028, 0, 4026531840, 2852192259, 6619137, 1, 2147483693, 268435456,
    603981964, 0, 4026531840, 2852126726, 6684673, 65539, 2155872302, 2147491889, 2147487792,
    603981978, 0, 603982000, 0, 603982014, 0, 4026531840, 0, 2852192259, 6750209, 1, 2147483694,
    268435456, 603981986, 0, 4026531840, 603981989, 603982051, 0, 2852192259, 6881281, 1,
    2147483695, 268435456, 603981997, 0, 4026531840, 1073754152, 805306405, 0, 2852192259,
    7012353, 1, 2147483696, 268435456, 603982008, 0, 4026531840, 603982011, 603980497, 0,
    1073754400, 805306405, 0, 2852192259, 7077889, 1, 2147483697, 268435456, 603982022, 0,
    4026531840, 603982025, 603980497, 0, 1073754656, 805306405, 0, 2852192259, 7143425, 1,
    2147483698, 268435456, 603981964, 0, 4026531840, 0, 2852192261, 3866625, 1, 2147483699,
    2147483686, 268435456, 603982050, 603982047, 0, 4026531840, 1073754888, 805306406, 0,
    0, 2852126732, 6815783, 131078, 2147491848, 2160066561, 2160074754, 2147491843, 2147491845,
    2147500078, 2147483687, 603982108, 603982073, 0, 2147483687, 603982108, 603982077, 0,
    2147483687, 603982108, 603982080, 0, 4026531840, 603982075, 0, 805306407, 0, 603982075,
    603982128, 0, 603982075, 603982187, 0, 2852126725, 7340071, 131078, 2147483656, 2147483653,
    2155872258, 2155872259, 2147487790, 2147491887, 603982099, 0, 603982105, 0, 4026531840,
    4026531840, 0, 603982102, 603982128, 0, 1073743632, 805306407, 0, 603982102, 603982187,
    0, 3087010090, 2768240646, 0, 65538, 2147483689, 2143295527, 603982108, 603982075, 0,
    603982108, 603982083, 0, 4026531840, 0, 2499805223, 0, 65537, 4026531840, 0, 0, 2852126736,
    2621479, 131076, 2147500040, 2147491845, 2147508226, 2147483651, 2147483688, 603982186,
    603982152, 0, 2147483688, 603982186, 603982162, 0, 2147483688, 603982186, 603982170,
    0, 2147483688, 603982186, 603982178, 0, 4026531840, 2852192259, 2031617, 1, 2147483651,
    268435456, 603982160, 0, 4026531840, 805306408, 0, 2852192259, 3538945, 1, 2147483653,
    268435456, 603982160, 0, 4026531840, 2852192259, 65575, 1, 2147483656, 268435456, 603982160,
    0, 4026531840, 2852192259, 2490369, 1, 2147483650, 268435456, 603982160, 0, 4026531840,
    0, 2852192261, 6750209, 1, 2147483694, 2147483689, 268435456, 603982211, 603982197, 0,
    4026531840, 603982200, 603982051, 0, 2852192259, 6881281, 1, 2147483695, 268435456, 603982208,
    0, 4026531840, 1073755160, 805306409, 0, 0, 2147483690, 603982242, 603982217, 603984322,
    0, 603982220, 603980497, 0, 2852192259, 6750209, 1, 2147483694, 268435456, 603982228,
    0, 4026531840, 603982231, 603982051, 0, 2852192259, 6881281, 1, 2147483695, 268435456,
    603982239, 0, 4026531840, 1073755432, 805306410, 0, 0, 2852192261, 7471108, 1, 2147483700,
    2147483691, 268435456, 603982349, 603982253, 0, 4026531840, 2852192259, 7536644, 1, 2147483701,
    268435456, 603982261, 0, 4026531840, 2852192259, 7602180, 1, 2147483678, 268435456, 603982269,
    0, 4026531840, 603982272, 603982475, 0, 2852126726, 7733252, 65539, 2147487824, 2151686171,
    2147483703, 603982286, 0, 603982324, 0, 603982338, 0, 4026531840, 0, 603982289, 603983403,
    0, 2852126724, 7864324, 65538, 2147483728, 2147487771, 603982299, 0, 603982313, 0, 4026531840,
    603982302, 603983513, 0, 2852192259, 7995396, 1, 2147483675, 268435456, 603982310, 0,
    4026531840, 1073755704, 805306411, 0, 2852192259, 7995396, 1, 2147483675, 268435456,
    603982321, 0, 4026531840, 1073756208, 805306411, 0, 603982327, 603983513, 0, 2852192259,
    7995396, 1, 2147483675, 268435456, 603982335, 0, 4026531840, 1073755952, 805306411, 0,
    2852192259, 7995396, 1, 2147483675, 268435456, 603982346, 0, 4026531840, 1073756456,
    805306411, 0, 0, 2852126736, 8060932, 131076, 2147508278, 2147491845, 2139111438, 2147483651,
    2147483692, 603982459, 603982374, 0, 2147483692, 603982459, 603982384, 0, 2147483692,
    603982459, 603982392, 0, 2147483692, 603982459, 603982400, 0, 4026531840, 2852192259,
    8126468, 1, 2147483651, 268435456, 603982382, 0, 4026531840, 805306412, 0, 2852192259,
    8257540, 1, 2147483653, 268435456, 603982382, 0, 4026531840, 2852192259, 8323076, 1, 2147483662,
    268435456, 603982382, 0, 4026531840, 2852192259, 8388612, 1, 2147483702, 268435456, 603982382,
    0, 4026531840, 2852126728, 8454153, 131076, 2147491894, 2147483653, 2139099150, 2147495939,
    603982424, 0, 603982435, 0, 603982443, 0, 603982451, 0, 4026531840, 2852192259, 8454153,
    1, 2147483653, 268435456, 603982432, 0, 4026531840, 1073741840, 805306412, 0, 2852192259,
    8454153, 1, 2147483662, 268435456, 603982432, 0, 4026531840, 2852192259, 8454153, 1, 2147483702,
    268435456, 603982432, 0, 4026531840, 2852192259, 8454153, 1, 2147483651, 268435456, 603982432,
    0, 4026531840, 3087010437, 2499805228, 0, 65539, 4026531840, 0, 0, 603982459, 603982408,
    0, 2499805228, 0, 65537, 4026531840, 0, 0, 2852126732, 7667716, 196622, 2202026047, 2147500089,
    2181054522, 2147500091, 2164277308, 2172665925, 2160083006, 2118123575, 2147500100,
    2160083014, 2147500106, 2147500109, 2147491918, 2147491919, 2147483693, 603982516,
    603982505, 0, 2147483693, 603982516, 603982510, 0, 2147483693, 603982516, 603982513,
    0, 4026531840, 603982508, 603984331, 0, 805306413, 0, 603982508, 603984399, 0, 603982508,
    603982586, 0, 0, 2852192261, 7798788, 1, 2147483703, 2147483694, 268435456, 603982560,
    603982527, 0, 4026531840, 2852192259, 8716292, 1, 2147483704, 268435456, 603982535, 0,
    4026531840, 603982538, 603982561, 0, 2852192259, 8847364, 1, 2147483682, 268435456, 603982546,
    0, 4026531840, 603982549, 603982586, 0, 2852192259, 8912900, 1, 2147483683, 268435456,
    603982557, 0, 4026531840, 1073756720, 805306414, 0, 0, 2852192261, 8781828, 1, 2147483677,
    2147483695, 268435456, 603982585, 603982571, 0, 4026531840, 603982574, 603984443, 0,
    2852192259, 7602180, 1, 2147483678, 268435456, 603982582, 0, 4026531840, 1073756952,
    805306415, 0, 0, 2852126736, 8650756, 196619, 2147491908, 2147508281, 2176843834, 2147491899,
    2130714684, 2168463429, 2155880510, 2147491903, 2147491910, 2147491914, 2147500109,
    2147483696, 603982745, 603982618, 0, 2147483696, 603982745, 603982629, 0, 2147483696,
    603982745, 603982719, 0, 2147483696, 603982745, 603982739, 0, 4026531840, 0, 2852192259,
    9109508, 1, 2147483706, 268435456, 603982626, 0, 4026531840, 1073750280, 805306416, 0,
    603982632, 603984559, 0, 2852126724, 9306116, 131078, 2147487824, 2164264961, 2155876387,
    2143293467, 2147487799, 2147483705, 603982646, 0, 603982704, 0, 4026531840, 2583756857,
    9371652, 65538, 4026531840, 0, 603982654, 0, 0, 2785017860, 9437188, 65538, 2147487827,
    2143289421, 603982664, 0, 603982698, 0, 4026531840, 2852192259, 9371652, 1, 2147483705,
    268435456, 603982672, 0, 4026531840, 603982675, 603984647, 0, 2852126724, 9306116, 131078,
    2147487824, 2164264961, 2155876387, 2143293467, 2147487799, 2147483705, 603982689,
    0, 603982695, 0, 4026531840, 603982692, 603984717, 0, 1073757216, 805306416, 0, 1073757720,
    805306416, 0, 603982701, 603984717, 0, 1073757456, 805306416, 0, 2852192258, 9175044,
    131077, 2147483728, 2147483649, 2155872291, 2143289371, 2147483703, 603982716, 0, 4026531840,
    0, 1073757960, 805306416, 0, 603982722, 603984647, 0, 2852126724, 9306116, 131078, 2147487824,
    2164264961, 2155876387, 2143293467, 2147487799, 2147483705, 603982736, 0, 603982716,
    0, 4026531840, 603982701, 603984717, 0, 603982742, 603984717, 0, 1073742600, 805306416,
    0, 0, 2852126752, 9240580, 196616, 2147516484, 2147532870, 2147541066, 2147483707, 2130714684,
    2147524677, 2126528574, 2147508287, 2147483697, 603983199, 603982790, 0, 2147483697,
    603983199, 603982848, 0, 2147483697, 603983199, 603983001, 0, 2147483697, 603983199,
    603983039, 0, 2147483697, 603983199, 603983093, 0, 2147483697, 603983199, 603983104,
    0, 2147483697, 603983199, 603983115, 0, 2147483697, 603983199, 603983161, 0, 4026531840,
    2852192259, 9633796, 1, 2147483707, 268435456, 603982798, 0, 4026531840, 2852126724,
    9699332, 65538, 2147483699, 2143293445, 603982808, 0, 603982821, 0, 4026531840, 1610612738,
    67111900, 67111906, 0, 603982815, 603981941, 0, 1073758480, 805306417, 0, 603982815, 603982212,
    0, 2583756805, 8257540, 65538, 4026531840, 0, 603982829, 0, 0, 2852192259, 8257540, 1, 2147483653,
    268435456, 603982837, 0, 4026531840, 2852192259, 8257540, 1, 2147483653, 268435456, 603982845,
    0, 4026531840, 1073758232, 805306417, 0, 2852192259, 9830404, 1, 2147483708, 268435456,
    603982856, 0, 4026531840, 2852126726, 9895940, 65539, 2155872312, 2147491913, 2147487810,
    603982870, 0, 603982932, 0, 603982979, 0, 4026531840, 0, 2852192259, 8716292, 1, 2147483704,
    268435456, 603982878, 0, 4026531840, 2852192259, 9961476, 1, 2147483709, 268435456, 603982886,
    0, 4026531840, 2852126724, 8978436, 65538, 2147483661, 2143293445, 603982896, 0, 603982929,
    0, 4026531840, 2583756813, 1703937, 65538, 4026531840, 0, 603982904, 0, 0, 2785017860,
    10027012, 131079, 2147487824, 2168459265, 2147483670, 2151682075, 2151682083, 2147487799,
    2147487801, 603982920, 0, 603982926, 0, 4026531840, 0, 603982923, 603980584, 0, 1073758752,
    805306417, 0, 603982923, 603980614, 0, 603982923, 603984747, 0, 2852192259, 10223620,
    1, 2147483714, 268435456, 603982940, 0, 4026531840, 2852192259, 10289156, 1, 2147483715,
    268435456, 603982948, 0, 4026531840, 2852126724, 10354689, 131078, 2164260876, 2147487749,
    2160066562, 2147483663, 2147483664, 2147483686, 603982962, 0, 603982976, 0, 4026531840,
    603982965, 603981703, 0, 2852192259, 8257540, 1, 2147483653, 268435456, 603982973, 0,
    4026531840, 1073759528, 805306417, 0, 603982965, 603984747, 0, 2852192259, 10485764,
    1, 2147483721, 268435456, 603982987, 0, 4026531840, 2852192259, 9961476, 1, 2147483709,
    268435456, 603982995, 0, 4026531840, 603982998, 603984747, 0, 1073760544, 805306417,
    0, 2852192259, 10551300, 1, 2147483710, 268435456, 603983009, 0, 4026531840, 2852192259,
    9961476, 1, 2147483709, 268435456, 603983017, 0, 4026531840, 2852192259, 8847364, 1, 2147483682,
    268435456, 603983025, 0, 4026531840, 603983028, 603984761, 0, 2852192259, 8912900, 1,
    2147483683, 268435456, 603983036, 0, 4026531840, 1073759016, 805306417, 0, 2852192259,
    10682372, 1, 2147483711, 268435456, 603983047, 0, 4026531840, 2583691328, 10747908, 131074,
    4026531840, 0, 603983057, 0, 603983079, 0, 0, 2852192259, 10813444, 1, 2147483712, 268435456,
    603983065, 0, 4026531840, 2852192259, 10878980, 1, 2147483713, 268435456, 603983073,
    0, 4026531840, 603983076, 603983280, 0, 1073759264, 805306417, 0, 2852192259, 10878980,
    1, 2147483713, 268435456, 603983087, 0, 4026531840, 603983090, 603983280, 0, 1073761048,
    805306417, 0, 2852192259, 10944516, 1, 2147483716, 268435456, 603983101, 0, 4026531840,
    1073759752, 805306417, 0, 2852192259, 11010052, 1, 2147483717, 268435456, 603983112,
    0, 4026531840, 1073760008, 805306417, 0, 2852192259, 11075588, 1, 2147483718, 268435456,
    603983123, 0, 4026531840, 2852192259, 11141124, 1, 2147483719, 268435456, 603983131,
    0, 4026531840, 2852192259, 11206660, 1, 2147483720, 268435456, 603983139, 0, 4026531840,
    2852192259, 8781828, 1, 2147483677, 268435456, 603983147, 0, 4026531840, 603983150, 603984809,
    0, 2852192259, 7602180, 1, 2147483678, 268435456, 603983158, 0, 4026531840, 1073760304,
    805306417, 0, 2852192259, 11272196, 1, 2147483722, 268435456, 603983169, 0, 4026531840,
    2852126724, 11337732, 131079, 2147487824, 2164264961, 2155876387, 2143293467, 2155876407,
    2147487801, 2147483723, 603983185, 0, 603983196, 0, 4026531840, 0, 2852192259, 11403268,
    1, 2147483723, 268435456, 603983193, 0, 4026531840, 1073760784, 805306417, 0, 1073761288,
    805306417, 0, 0, 2852192261, 10616836, 1, 2147483724, 2147483698, 268435456, 603983279,
    603983210, 0, 4026531840, 2852192259, 8781828, 1, 2147483677, 268435456, 603983218, 0,
    4026531840, 2852126724, 11468804, 65538, 2147487797, 2143289357, 603983228, 0, 603983263,
    0, 4026531840, 2583756813, 1703937, 65538, 4026531840, 0, 603983236, 0, 0, 2785017860,
    11534340, 65538, 2151677974, 2147487774, 603983246, 0, 603983260, 0, 4026531840, 603983249,
    603980584, 0, 2852192259, 7602180, 1, 2147483678, 268435456, 603983257, 0, 4026531840,
    1073761568, 805306418, 0, 603983249, 603980614, 0, 2583756853, 7536644, 65538, 4026531840,
    0, 603983271, 0, 0, 2852192259, 7536644, 1, 2147483701, 268435456, 603983249, 0, 4026531840,
    0, 2852192261, 8781828, 1, 2147483677, 2147483699, 268435456, 603983304, 603983290, 0,
    4026531840, 603983293, 603984849, 0, 2852192259, 7602180, 1, 2147483678, 268435456, 603983301,
    0, 4026531840, 1073756952, 805306419, 0, 0, 2852192261, 9502724, 1, 2147483725, 2147483700,
    268435456, 603983321, 603983315, 0, 4026531840, 603983318, 603983200, 0, 1073761808,
    805306420, 0, 0, 2852126728, 8585220, 65538, 2147483726, 2147491919, 2147483701, 603983402,
    603983336, 0, 2147483701, 603983402, 603983369, 0, 4026531840, 2852192259, 11862020,
    1, 2147483726, 268435456, 603983344, 0, 4026531840, 603983347, 603983280, 0, 2852192259,
    8847364, 1, 2147483682, 268435456, 603983355, 0, 4026531840, 603983358, 603982586, 0,
    2852192259, 8912900, 1, 2147483683, 268435456, 603983366, 0, 4026531840, 1073762088,
    805306421, 0, 2852192259, 11993092, 1, 2147483727, 268435456, 603983377, 0, 4026531840,
    603983380, 603983280, 0, 2852192259, 8847364, 1, 2147483682, 268435456, 603983388, 0,
    4026531840, 603983391, 603982586, 0, 2852192259, 8912900, 1, 2147483683, 268435456, 603983399,
    0, 4026531840, 1073762344, 805306421, 0, 0, 2852192261, 7798788, 1, 2147483703, 2147483702,
    268435456, 603983474, 603983413, 0, 4026531840, 2852192259, 11010052, 1, 2147483717,
    268435456, 603983421, 0, 4026531840, 603983424, 603983475, 0, 603983427, 603982475, 0,
    2852126726, 8519684, 131076, 2147487824, 2147491841, 2147483703, 2143297563, 603983441,
    0, 603983465, 0, 603983471, 0, 4026531840, 603983444, 603983403, 0, 2852126724, 12058628,
    65539, 2147483728, 2151682049, 2147487771, 603983456, 0, 603983462, 0, 4026531840, 0,
    603983459, 603983513, 0, 1073762608, 805306422, 0, 1073763112, 805306422, 0, 603983468,
    603983513, 0, 1073762856, 805306422, 0, 1073763360, 805306422, 0, 0, 2852192261, 10616836,
    1, 2147483724, 2147483703, 268435456, 603983512, 603983485, 0, 4026531840, 2852192259,
    8781828, 1, 2147483677, 268435456, 603983493, 0, 4026531840, 2852192259, 7536644, 1, 2147483701,
    268435456, 603983501, 0, 4026531840, 2852192259, 7602180, 1, 2147483678, 268435456, 603983509,
    0, 4026531840, 1073761568, 805306423, 0, 0, 2852192261, 7929860, 1, 2147483728, 2147483704,
    268435456, 603983555, 603983523, 0, 4026531840, 2852192259, 12189700, 1, 2147483729,
    268435456, 603983531, 0, 4026531840, 603983534, 603983280, 0, 2852126724, 12255236, 131076,
    2147487824, 2151682049, 2147483733, 2147487771, 603983546, 0, 603983552, 0, 4026531840,
    603983549, 603984917, 0, 1073763616, 805306424, 0, 1073763864, 805306424, 0, 0, 2147483705,
    603983609, 603983561, 603983475, 0, 603983564, 603982475, 0, 2852126726, 12386308, 65539,
    2147487824, 2151686145, 2147483703, 603983578, 0, 603983600, 0, 603983606, 0, 4026531840,
    0, 603983581, 603983403, 0, 2852126724, 12451844, 65538, 2147483728, 2147487745, 603983591,
    0, 603983597, 0, 4026531840, 603983594, 603983513, 0, 1073764128, 805306425, 0, 1073764632,
    805306425, 0, 603983603, 603983513, 0, 1073764376, 805306425, 0, 1073764880, 805306425,
    0, 0, 2852126740, 2621440, 131077, 2147491848, 2147516421, 2147483650, 2151702531, 2147500039,
    2147483711, 603983748, 603983640, 0, 2147483711, 603983748, 603983651, 0, 2147483711,
    603983748, 603983659, 0, 2147483711, 603983748, 603983667, 0, 2147483711, 603983748,
    603983675, 0, 4026531840, 0, 2852192259, 2490369, 1, 2147483650, 268435456, 603983648,
    0, 4026531840, 1073742600, 805306431, 0, 2852192259, 65575, 1, 2147483656, 268435456,
    603983648, 0, 4026531840, 2852192259, 65556, 1, 2147483655, 268435456, 603983648, 0, 4026531840,
    2852192259, 2031617, 1, 2147483651, 268435456, 603983648, 0, 4026531840, 2852192259,
    3538945, 1, 2147483653, 268435456, 603983648, 0, 4026531840, 2852126731, 12582921, 131078,
    2147487752, 2147500037, 2160066562, 2151690243, 2147491847, 2147504138, 603983705,
    0, 603983716, 0, 603983724, 0, 603983732, 0, 603983740, 0, 4026531840, 4026531840, 0, 2852192259,
    12517376, 1, 2147483650, 268435456, 603983713, 0, 4026531840, 1073742864, 805306431,
    0, 2852192259, 12517376, 1, 2147483656, 268435456, 603983713, 0, 4026531840, 2852192259,
    12517376, 1, 2147483655, 268435456, 603983713, 0, 4026531840, 2852192259, 12517376, 1,
    2147483651, 268435456, 603983713, 0, 4026531840, 2852192259, 12517376, 1, 2147483653,
    268435456, 603983713, 0, 4026531840, 3087011726, 2499805247, 0, 65539, 4026531840, 0,
    0, 603983748, 603983683, 0, 2499805247, 0, 65537, 4026531840, 0, 0, 2852126728, 2228225,
    65538, 2147483653, 2143297539, 2147483712, 603983998, 603983778, 0, 2147483712, 603983998,
    603983789, 0, 4026531840, 2852192259, 3538945, 1, 2147483653, 268435456, 603983786, 0,
    4026531840, 1073766152, 805306432, 0, 2852192259, 2031617, 1, 2147483651, 268435456,
    603983786, 0, 4026531840, 2852126727, 12648448, 327712, 2147493920, 2202013697, 2214602754,
    2222991363, 2147493924, 2218786821, 2147493926, 2222987271, 2227185672, 2147493929,
    2147493930, 2147493931, 2147493900, 2147493901, 2147493921, 2147493903, 2147493904,
    2147493905, 2147493922, 2147493939, 2147493940, 2147493923, 2147493925, 2147493911,
    2147493912, 2147493927, 2147493914, 2147493928, 2147493916, 2147493917, 2147493918,
    2147493919, 603983841, 0, 4026531840, 603983904, 0, 603983952, 0, 4026531840, 0, 2583756805,
    12713993, 65538, 4026531840, 0, 603983849, 0, 0, 2785017859, 12779529, 327716, 2147483680,
    2202009601, 2214592514, 2222981123, 2147483684, 2218786821, 2147483686, 2252341255,
    2252341256, 2147483689, 2147483690, 2147483691, 2147483660, 2147483661, 2147483681,
    2147483663, 2227175440, 2147483665, 2147483682, 2147483699, 2147483700, 2147483683,
    2147483685, 2193621015, 2147483672, 2147487801, 2147483674, 2147487771, 2147483676,
    2147483677, 2147483678, 2147483679, 2147483687, 2147483688, 2147487799, 2147487824,
    603983893, 0, 4026531840, 4026531840, 0, 2852192259, 12648448, 1, 2147483653, 268435456,
    603983901, 0, 4026531840, 1073743632, 805306432, 0, 2583756807, 65556, 65538, 4026531840,
    0, 603983912, 0, 0, 2785017858, 2293796, 327713, 2147483680, 2202009601, 2231369730, 2147483683,
    2147483684, 2231369733, 2147483686, 2231369735, 2147483688, 2147483689, 2147483690,
    2235566091, 2147483660, 2147483661, 2147483681, 2147483663, 2147483664, 2147483665,
    2147485714, 2147483699, 2147483700, 2147485717, 2147483682, 2147483671, 2147483672,
    2147483685, 2147483674, 2147483687, 2147483676, 2147483677, 2147483678, 2147483679,
    2147483691, 4026531840, 4026531840, 4026531840, 0, 2852126724, 12713993, 262173, 2231375888,
    2231375889, 2231375874, 2231369731, 2248153124, 2147489829, 2147489830, 2218792983,
    2181042184, 2147489833, 2214598682, 2147489835, 2168461324, 2168461325, 2147489822,
    2164267023, 2185238552, 2147489820, 2147489821, 2147489823, 2147489824, 2147489825,
    2147489826, 2164267043, 2147489831, 2147489832, 2147489834, 2147489843, 2147489844,
    603983990, 0, 4026531840, 4026531840, 4026531840, 0, 2852192259, 12648448, 1, 2147483651,
    268435456, 603983901, 0, 4026531840, 3087011976, 2499805248, 0, 65539, 4026531840, 0,
    0, 603983998, 603983797, 0, 2499805248, 0, 65537, 4026531840, 0, 0, 2852126732, 2621441,
    65539, 2147500034, 2151686147, 2147483653, 2147483713, 603984106, 603984034, 0, 2147483713,
    603984106, 603984045, 0, 2147483713, 603984106, 603984053, 0, 4026531840, 0, 2852192259,
    3538945, 1, 2147483653, 268435456, 603984042, 0, 4026531840, 1073766152, 805306433, 0,
    2852192259, 2031617, 1, 2147483651, 268435456, 603984042, 0, 4026531840, 2852192259,
    2490369, 1, 2147483650, 268435456, 603984042, 0, 4026531840, 2852126727, 3473408, 131078,
    2147495944, 2160078849, 2147491842, 2155876355, 2147483653, 2147495943, 603984079,
    0, 603984090, 0, 603984098, 0, 4026531840, 4026531840, 0, 2852192259, 3473408, 1, 2147483653,
    268435456, 603984087, 0, 4026531840, 1073743632, 805306433, 0, 2852192259, 3473408, 1,
    2147483651, 268435456, 603984087, 0, 4026531840, 2852192259, 3473408, 1, 2147483650,
    268435456, 603984087, 0, 4026531840, 3087012084, 2499805249, 0, 65539, 4026531840, 0,
    0, 603984106, 603984061, 0, 2499805249, 0, 65537, 4026531840, 0, 0, 2852126728, 2752513,
    65538, 2147483650, 2147491843, 2147483714, 603984188, 603984136, 0, 2147483714, 603984188,
    603984147, 0, 4026531840, 2852192259, 2490369, 1, 2147483650, 268435456, 603984144, 0,
    4026531840, 1073766152, 805306434, 0, 2852192259, 2031617, 1, 2147483651, 268435456,
    603984144, 0, 4026531840, 2852126726, 12845057, 131076, 2147493908, 2147491859, 2147483650,
    2139099139, 603984169, 0, 603984180, 0, 4026531840, 4026531840, 4026531840, 2852192259,
    12845057, 1, 2147483650, 268435456, 603984177, 0, 4026531840, 1073743632, 805306434,
    0, 2852192259, 12845057, 1, 2147483651, 268435456, 603984177, 0, 4026531840, 3087012166,
    2499805250, 0, 65539, 4026531840, 0, 0, 603984188, 603984155, 0, 2499805250, 0, 65537, 4026531840,
    0, 0, 2147483715, 603984230, 603984209, 603980656, 0, 1073766152, 805306435, 0, 2852126723,
    2621440, 131077, 2147483656, 2147483653, 2147483650, 2151677955, 2147487751, 603984224,
    0, 4026531840, 4026531840, 603984227, 603980656, 0, 1073743632, 805306435, 0, 3087012208,
    2499805251, 0, 65539, 4026531840, 0, 0, 603984230, 603984212, 0, 2499805251, 0, 65537, 4026531840,
    0, 0, 2147483716, 603984254, 603984251, 603980981, 0, 1073766408, 805306436, 0, 0, 2147483717,
    603984263, 603984260, 603980584, 0, 1073766664, 805306437, 0, 0, 2147483718, 603984302,
    603984269, 603981403, 0, 1073742600, 805306438, 0, 2852126723, 12976129, 262161, 2168455184,
    2155876353, 2206203906, 2193621009, 2147483677, 2147483680, 2147483686, 2147483687,
    2147483688, 2147483689, 2147483690, 2147483691, 2147483660, 2109734925, 2147483681,
    2147483663, 2147483682, 603984296, 0, 4026531840, 4026531840, 603984299, 603981403,
    0, 1073742864, 805306438, 0, 3087012284, 2768240646, 0, 65538, 2151684126, 2147483718,
    603984302, 603984272, 0, 603984302, 603984269, 0, 4026531840, 0, 2499805254, 0, 65537,
    4026531840, 0, 0, 2147483719, 603984330, 603984327, 603982037, 0, 1073766920, 805306439,
    0, 0, 2147483720, 603984383, 603984336, 603982517, 0, 1073742600, 805306440, 0, 2852126724,
    8519684, 131076, 2147487824, 2147487745, 2147483703, 2143293467, 603984351, 0, 603984375,
    0, 4026531840, 2583756855, 7798788, 65538, 4026531840, 0, 603984359, 0, 0, 2785017859,
    13172740, 65538, 2147483704, 2147487813, 603984369, 0, 4026531840, 4026531840, 0, 603984372,
    603982517, 0, 1073742864, 805306440, 0, 2852192257, 8519684, 65539, 2147483728, 2151677953,
    2147483675, 4026531840, 4026531840, 3087012361, 2499805256, 0, 65539, 4026531840, 0,
    0, 603984383, 603984339, 0, 2499805256, 0, 65537, 4026531840, 0, 0, 2147483721, 603984427,
    603984404, 603983322, 0, 1073742600, 805306441, 0, 2852126723, 11927556, 131078, 2147487824,
    2147487745, 2147483726, 2151682075, 2151682103, 2147483727, 603984421, 0, 4026531840,
    4026531840, 0, 603984424, 603983322, 0, 1073742864, 805306441, 0, 3087012405, 2499805257,
    0, 65539, 4026531840, 0, 0, 603984427, 603984407, 0, 2499805257, 0, 65537, 4026531840, 0,
    0, 2852126728, 13434881, 65538, 2147483661, 2143297541, 2147483722, 603984543, 603984457,
    0, 2147483722, 603984543, 603984486, 0, 4026531840, 2583756813, 1703937, 65538, 4026531840,
    0, 603984465, 0, 0, 2785017860, 13500420, 131076, 2147487757, 2143293445, 2151677974,
    2147487774, 603984477, 0, 603984483, 0, 4026531840, 603984480, 603980584, 0, 1073742600,
    805306442, 0, 603984480, 603980614, 0, 603984480, 603984747, 0, 2852126724, 13697028,
    65539, 2147487774, 2151682053, 2147483661, 603984501, 0, 603984530, 0, 4026531840, 0,
    2583756813, 1703937, 65538, 4026531840, 0, 603984509, 0, 0, 2785017860, 13762564, 131076,
    2147487757, 2143293445, 2151677974, 2147487774, 603984521, 0, 603984527, 0, 4026531840,
    603984524, 603980584, 0, 1073742864, 805306442, 0, 603984524, 603980614, 0, 2852126723,
    13893636, 65538, 2147487774, 2147483653, 603984540, 0, 4026531840, 4026531840, 0, 603984524,
    603984747, 0, 3087012521, 2499805258, 0, 65539, 4026531840, 0, 0, 603984543, 603984489,
    0, 2499805258, 0, 65537, 4026531840, 0, 0, 2147483723, 603984631, 603984564, 603982746,
    0, 1073742600, 805306443, 0, 2852126724, 9306116, 131078, 2147487824, 2164264961, 2155876387,
    2143293467, 2147487799, 2147483705, 603984581, 0, 603984621, 0, 4026531840, 2583756857,
    9306116, 65538, 4026531840, 0, 603984589, 0, 0, 2785017860, 14024708, 196618, 2147483716,
    2147483718, 2147483722, 2172649531, 2130706492, 2160066629, 2126512190, 2147483711,
    2147487821, 2147489875, 603984607, 0, 4026531840, 4026531840, 4026531840, 2852192259,
    14090241, 1, 2147483705, 268435456, 603984615, 0, 4026531840, 603984618, 603982746, 0,
    1073749272, 805306443, 0, 2852192257, 9175044, 131077, 2147483728, 2147483649, 2155872291,
    2143289371, 2147483703, 4026531840, 4026531840, 3087012609, 2499805259, 0, 65539, 4026531840,
    0, 0, 603984631, 603984567, 0, 2499805259, 0, 65537, 4026531840, 0, 0, 2147483724, 603984701,
    603984652, 603983305, 0, 1073742600, 805306444, 0, 2852126724, 9306116, 131078, 2147487824,
    2164264961, 2155876387, 2143293467, 2147487799, 2147483705, 603984669, 0, 603984621,
    0, 4026531840, 2583756857, 14090241, 65538, 4026531840, 0, 603984677, 0, 0, 2785017859,
    14221316, 65538, 2147487827, 2143289421, 603984687, 0, 4026531840, 4026531840, 0, 2852192259,
    14090241, 1, 2147483705, 268435456, 603984695, 0, 4026531840, 603984698, 603983305, 0,
    1073749272, 805306444, 0, 3087012679, 2499805260, 0, 65539, 4026531840, 0, 0, 603984701,
    603984655, 0, 2499805260, 0, 65537, 4026531840, 0, 0, 2852192261, 14286849, 1, 2147483705,
    2147483725, 268435456, 603984746, 603984727, 0, 4026531840, 2852192259, 14352385, 1,
    2147483731, 268435456, 603984735, 0, 4026531840, 2852192259, 14417921, 1, 2147483724,
    268435456, 603984743, 0, 4026531840, 1073767192, 805306445, 0, 0, 2852192261, 3538945,
    1, 2147483653, 2147483726, 268435456, 603984760, 603984757, 0, 4026531840, 1073767432,
    805306446, 0, 0, 2147483727, 603984793, 603984766, 603983200, 0, 1073742600, 805306447,
    0, 2852126723, 14614532, 65538, 2147483732, 2147487779, 603984779, 0, 4026531840, 4026531840,
    0, 2852192259, 14548993, 1, 2147483732, 268435456, 603984787, 0, 4026531840, 603984790,
    603983200, 0, 1073749272, 805306447, 0, 3087012771, 2499805263, 0, 65539, 4026531840,
    0, 0, 603984793, 603984769, 0, 2499805263, 0, 65537, 4026531840, 0, 0, 2147483728, 603984833,
    603984814, 603984747, 0, 1073742600, 805306448, 0, 2852126723, 13893636, 65538, 2147487774,
    2147483653, 603984827, 0, 4026531840, 4026531840, 0, 603984830, 603984747, 0, 1073742864,
    805306448, 0, 3087012811, 2499805264, 0, 65539, 4026531840, 0, 0, 603984833, 603984817,
    0, 2499805264, 0, 65537, 4026531840, 0, 0, 2852126728, 10354689, 131078, 2164260876, 2147491845,
    2160066562, 2147483663, 2147483664, 2147483686, 2147483729, 603984901, 603984867, 0,
    2147483729, 603984901, 603984873, 0, 4026531840, 603984870, 603981703, 0, 1073742600,
    805306449, 0, 603984870, 603984747, 0, 2852126725, 14811140, 131079, 2164260876, 2147487749,
    2160066562, 2147483663, 2147483664, 2151686174, 2147483686, 603984892, 0, 603984898,
    0, 4026531840, 4026531840, 603984895, 603981703, 0, 1073742864, 805306449, 0, 603984895,
    603984747, 0, 3087012879, 2499805265, 0, 65539, 4026531840, 0, 0, 603984901, 603984876,
    0, 2499805265, 0, 65537, 4026531840, 0, 0, 2852192261, 14876673, 1, 2147483733, 2147483730,
    268435456, 603984933, 603984927, 0, 4026531840, 603984930, 603983280, 0, 1073756944,
    805306450, 0, 0
]);

function isTokenActive(token_id, row) {
    var index = (row * 3) + (token_id >> 5);;
    var shift = 1 << (31 & (token_id));;
    return (token_lookup[index] & shift) != 0;
}

function pre_scan(l, token) {
    var tk_length = l.token_length;;
    var bt_length = l.byte_length;;
    var type_cache = l._type;;
    scan(l, token, 0);
    var type_out = l._type;;
    l._type = type_cache;
    l.token_length = tk_length;
    l.byte_length = bt_length;
    return type_out > 0;
}

function scan_core(l, tk_row) {
    switch ((l.get_byte_at(l.byte_offset) & 127)) {
        case 35:
            {
                if (l.get_byte_at(l.byte_offset) == 35) {
                    if (isTokenActive(23, tk_row)) {
                        l.setToken(23, 1, 1);
                        return;
                    }
                }
            }
            break;
        case 36:
            {
                if (2 == compare(l, l.byte_offset, 38, 2, token_sequence_lookup)) {
                    if (l.get_byte_at(l.byte_offset + 2) == 109) {
                        if (isTokenActive(44, tk_row) && 3 == compare(l, l.byte_offset + 3, 41, 3, token_sequence_lookup)) {
                            l.setToken(44, 6, 6);
                            return;
                        }
                    } else if (l.get_byte_at(l.byte_offset + 2) == 111) {
                        if (isTokenActive(38, tk_row) && l.get_byte_at(l.byte_offset + 3) == 102) {
                            l.setToken(38, 4, 4);
                            return;
                        }
                    }
                }
            }
            break;
        case 40:
            {
                if (l.get_byte_at(l.byte_offset) == 40) {
                    if (l.get_byte_at(l.byte_offset + 1) == 69) {
                        if (l.get_byte_at(l.byte_offset + 2) == 88) {
                            if (isTokenActive(39, tk_row) && l.get_byte_at(l.byte_offset + 3) == 67) {
                                l.setToken(39, 4, 4);
                                return;
                            }
                        } else if (l.get_byte_at(l.byte_offset + 2) == 82) {
                            if (isTokenActive(40, tk_row) && l.get_byte_at(l.byte_offset + 3) == 82) {
                                l.setToken(40, 4, 4);
                                return;
                            }
                        }
                    } else if (l.get_byte_at(l.byte_offset + 1) == 73) {
                        if (isTokenActive(41, tk_row) && 2 == compare(l, l.byte_offset + 2, 183, 2, token_sequence_lookup)) {
                            l.setToken(41, 4, 4);
                            return;
                        }
                    } else if (l.get_byte_at(l.byte_offset + 1) == 82) {
                        if (l.get_byte_at(l.byte_offset + 2) == 83) {
                            if (isTokenActive(42, tk_row) && l.get_byte_at(l.byte_offset + 3) == 84) {
                                l.setToken(42, 4, 4);
                                return;
                            }
                        } else if (l.get_byte_at(l.byte_offset + 2) == 69) {
                            if (isTokenActive(43, tk_row) && l.get_byte_at(l.byte_offset + 3) == 68) {
                                l.setToken(43, 4, 4);
                                return;
                            }
                        }
                    } else if (l.get_byte_at(l.byte_offset + 1) == 42) {
                        if (isTokenActive(36, tk_row)) {
                            l.setToken(36, 2, 2);
                            return;
                        }
                    } else if (l.get_byte_at(l.byte_offset + 1) == 43) {
                        if (isTokenActive(37, tk_row)) {
                            l.setToken(37, 2, 2);
                            return;
                        }
                    } else if (isTokenActive(34, tk_row)) {
                        l.setToken(34, 1, 1);
                        return;
                    }
                }
            }
            break;
        case 41:
            {
                if (l.get_byte_at(l.byte_offset) == 41) {
                    if (isTokenActive(35, tk_row)) {
                        l.setToken(35, 1, 1);
                        return;
                    }
                }
            }
            break;
        case 42:
            {
                if (l.get_byte_at(l.byte_offset) == 42) {
                    if (l.get_byte_at(l.byte_offset + 1) == 47) {
                        if (isTokenActive(10, tk_row)) {
                            l.setToken(10, 2, 2);
                            return;
                        }
                    } else if (isTokenActive(25, tk_row)) {
                        l.setToken(25, 1, 1);
                        return;
                    }
                }
            }
            break;
        case 43:
            {
                if (l.get_byte_at(l.byte_offset) == 43) {
                    if (isTokenActive(26, tk_row) && l.get_byte_at(l.byte_offset + 1) == 62) {
                        l.setToken(26, 2, 2);
                        return;
                    }
                }
            }
            break;
        case 44:
            {
                if (l.get_byte_at(l.byte_offset) == 44) {
                    if (isTokenActive(84, tk_row)) {
                        l.setToken(84, 1, 1);
                        return;
                    }
                }
            }
            break;
        case 45:
            {
                if (l.get_byte_at(l.byte_offset) == 45) {
                    if (isTokenActive(53, tk_row) && token_production(l, 67111438, 44, 53, 2, states_buffer, scan) && l.byte_length > 1) {
                        return;
                    } else if (isTokenActive(54, tk_row)) {
                        l.setToken(54, 1, 1);
                        return;
                    }
                }
            }
            break;
        case 47:
            {
                if (l.get_byte_at(l.byte_offset) == 47) {
                    if (l.get_byte_at(l.byte_offset + 1) == 42) {
                        if (isTokenActive(86, tk_row) && token_production(l, 67108912, 2, 86, 4, states_buffer, scan) && l.byte_length > 2) {
                            return;
                        } else if (isTokenActive(9, tk_row)) {
                            l.setToken(9, 2, 2);
                            return;
                        }
                    }
                }
            }
            break;
        case 58:
            {
                if (l.get_byte_at(l.byte_offset) == 58) {
                    if (isTokenActive(22, tk_row) && l.get_byte_at(l.byte_offset + 1) == 58) {
                        l.setToken(22, 2, 2);
                        return;
                    }
                }
            }
            break;
        case 60:
            {
                if (l.get_byte_at(l.byte_offset) == 60) {
                    if (l.get_byte_at(l.byte_offset + 1) == 62) {
                        if (isTokenActive(24, tk_row)) {
                            l.setToken(24, 2, 2);
                            return;
                        }
                    } else if (l.get_byte_at(l.byte_offset + 1) == 61) {
                        if (isTokenActive(32, tk_row)) {
                            l.setToken(32, 2, 2);
                            return;
                        }
                    } else if (l.get_byte_at(l.byte_offset + 1) == 91) {
                        if (isTokenActive(52, tk_row)) {
                            l.setToken(52, 2, 2);
                            return;
                        }
                    }
                }
            }
            break;
        case 61:
            {
                if (l.get_byte_at(l.byte_offset) == 61) {
                    if (isTokenActive(49, tk_row) && l.get_byte_at(l.byte_offset + 1) == 62) {
                        l.setToken(49, 2, 2);
                        return;
                    }
                }
            }
            break;
        case 62:
            {
                if (l.get_byte_at(l.byte_offset) == 62) {
                    if (isTokenActive(27, tk_row)) {
                        l.setToken(27, 1, 1);
                        return;
                    }
                }
            }
            break;
        case 63:
            {
                if (l.get_byte_at(l.byte_offset) == 63) {
                    if (l.get_byte_at(l.byte_offset + 1) == 61) {
                        if (isTokenActive(33, tk_row)) {
                            l.setToken(33, 2, 2);
                            return;
                        }
                    } else if (isTokenActive(31, tk_row)) {
                        l.setToken(31, 1, 1);
                        return;
                    }
                }
            }
            break;
        case 64:
            {
                if (l.get_byte_at(l.byte_offset) == 64) {
                    if (l.get_byte_at(l.byte_offset + 1) == 73) {
                        if (l.get_byte_at(l.byte_offset + 2) == 71) {
                            if (isTokenActive(11, tk_row) && 4 == compare(l, l.byte_offset + 3, 6, 4, token_sequence_lookup)) {
                                l.setToken(11, 7, 7);
                                return;
                            }
                        } else if (l.get_byte_at(l.byte_offset + 2) == 77) {
                            if (isTokenActive(18, tk_row) && 4 == compare(l, l.byte_offset + 3, 124, 4, token_sequence_lookup)) {
                                l.setToken(18, 7, 7);
                                return;
                            }
                        }
                    } else if (l.get_byte_at(l.byte_offset + 1) == 69) {
                        if (isTokenActive(21, tk_row) && 5 == compare(l, l.byte_offset + 2, 169, 5, token_sequence_lookup)) {
                            l.setToken(21, 7, 7);
                            return;
                        }
                    }
                }
            }
            break;
        case 65:
            {
                if (l.get_byte_at(l.byte_offset) == 65) {
                    if (l.get_byte_at(l.byte_offset + 1) == 83) {
                        if (isTokenActive(13, tk_row) && token_production(l, 67109179, 9, 13, 1, states_buffer, scan) && l.byte_length > 2) {
                            return;
                        } else if (isTokenActive(53, tk_row) && token_production(l, 67111438, 44, 53, 2, states_buffer, scan) && l.byte_length > 2) {
                            return;
                        } else if (isTokenActive(3, tk_row) && l.isUniID() && l.byte_length > 2) {
                            l._type = 3;
                            return;
                        } else if (isTokenActive(20, tk_row)) {
                            l.setToken(20, 2, 2);
                            return;
                        }
                    }
                }
            }
            break;
        case 91:
            {
                if (l.get_byte_at(l.byte_offset) == 91) {
                    if (isTokenActive(29, tk_row)) {
                        l.setToken(29, 1, 1);
                        return;
                    }
                }
            }
            break;
        case 92:
            {
                if (l.get_byte_at(l.byte_offset) == 92) {
                    if (isTokenActive(16, tk_row)) {
                        l.setToken(16, 1, 1);
                        return;
                    }
                }
            }
            break;
        case 93:
            {
                if (l.get_byte_at(l.byte_offset) == 93) {
                    if (isTokenActive(30, tk_row)) {
                        l.setToken(30, 1, 1);
                        return;
                    }
                }
            }
            break;
        case 94:
            {
                if (l.get_byte_at(l.byte_offset) == 94) {
                    if (isTokenActive(48, tk_row)) {
                        l.setToken(48, 1, 1);
                        return;
                    }
                }
            }
            break;
        case 95:
            {
                if (l.get_byte_at(l.byte_offset) == 95) {
                    if (isTokenActive(13, tk_row) && token_production(l, 67109179, 9, 13, 1, states_buffer, scan) && l.byte_length > 1) {
                        return;
                    } else if (isTokenActive(53, tk_row) && token_production(l, 67111438, 44, 53, 2, states_buffer, scan) && l.byte_length > 1) {
                        return;
                    } else if (isTokenActive(14, tk_row)) {
                        l.setToken(14, 1, 1);
                        return;
                    }
                }
            }
            break;
        case 97:
            {
                if (l.get_byte_at(l.byte_offset) == 97) {
                    if (l.get_byte_at(l.byte_offset + 1) == 115) {
                        if (l.get_byte_at(l.byte_offset + 2) == 115) {
                            if (3 == compare(l, l.byte_offset + 3, 66, 3, token_sequence_lookup)) {
                                if (isTokenActive(13, tk_row) && token_production(l, 67109179, 9, 13, 1, states_buffer, scan) && l.byte_length > 6) {
                                    return;
                                } else if (isTokenActive(53, tk_row) && token_production(l, 67111438, 44, 53, 2, states_buffer, scan) && l.byte_length > 6) {
                                    return;
                                } else if (isTokenActive(3, tk_row) && l.isUniID() && l.byte_length > 6) {
                                    l._type = 3;
                                    return;
                                } else if (isTokenActive(79, tk_row)) {
                                    l.setToken(79, 6, 6);
                                    return;
                                }
                            }
                        } else if (isTokenActive(13, tk_row) && token_production(l, 67109179, 9, 13, 1, states_buffer, scan) && l.byte_length > 2) {
                            return;
                        } else if (isTokenActive(53, tk_row) && token_production(l, 67111438, 44, 53, 2, states_buffer, scan) && l.byte_length > 2) {
                            return;
                        } else if (isTokenActive(3, tk_row) && l.isUniID() && l.byte_length > 2) {
                            l._type = 3;
                            return;
                        } else if (isTokenActive(19, tk_row)) {
                            l.setToken(19, 2, 2);
                            return;
                        }
                    }
                }
            }
            break;
        case 98:
            {
                if (l.get_byte_at(l.byte_offset) == 98) {
                    if (3 == compare(l, l.byte_offset + 1, 84, 3, token_sequence_lookup)) {
                        if (isTokenActive(13, tk_row) && token_production(l, 67109179, 9, 13, 1, states_buffer, scan) && l.byte_length > 4) {
                            return;
                        } else if (isTokenActive(53, tk_row) && token_production(l, 67111438, 44, 53, 2, states_buffer, scan) && l.byte_length > 4) {
                            return;
                        } else if (isTokenActive(3, tk_row) && l.isUniID() && l.byte_length > 4) {
                            l._type = 3;
                            return;
                        } else if (isTokenActive(64, tk_row)) {
                            l.setToken(64, 4, 4);
                            return;
                        }
                    }
                }
            }
            break;
        case 99:
            {
                if (l.get_byte_at(l.byte_offset) == 99) {
                    if (6 == compare(l, l.byte_offset + 1, 108, 6, token_sequence_lookup)) {
                        if (isTokenActive(13, tk_row) && token_production(l, 67109179, 9, 13, 1, states_buffer, scan) && l.byte_length > 7) {
                            return;
                        } else if (isTokenActive(53, tk_row) && token_production(l, 67111438, 44, 53, 2, states_buffer, scan) && l.byte_length > 7) {
                            return;
                        } else if (isTokenActive(3, tk_row) && l.isUniID() && l.byte_length > 7) {
                            l._type = 3;
                            return;
                        } else if (isTokenActive(74, tk_row)) {
                            l.setToken(74, 7, 7);
                            return;
                        }
                    }
                }
            }
            break;
        case 101:
            {
                if (l.get_byte_at(l.byte_offset) == 101) {
                    if (l.get_byte_at(l.byte_offset + 1) == 120) {
                        if (6 == compare(l, l.byte_offset + 2, 115, 6, token_sequence_lookup)) {
                            if (isTokenActive(13, tk_row) && token_production(l, 67109179, 9, 13, 1, states_buffer, scan) && l.byte_length > 8) {
                                return;
                            } else if (isTokenActive(53, tk_row) && token_production(l, 67111438, 44, 53, 2, states_buffer, scan) && l.byte_length > 8) {
                                return;
                            } else if (isTokenActive(3, tk_row) && l.isUniID() && l.byte_length > 8) {
                                l._type = 3;
                                return;
                            } else if (isTokenActive(81, tk_row)) {
                                l.setToken(81, 8, 8);
                                return;
                            }
                        }
                    } else if (l.get_byte_at(l.byte_offset + 1) == 114) {
                        if (l.get_byte_at(l.byte_offset + 2) == 104) {
                            if (isTokenActive(13, tk_row) && token_production(l, 67109179, 9, 13, 1, states_buffer, scan) && l.byte_length > 3) {
                                return;
                            } else if (isTokenActive(53, tk_row) && token_production(l, 67111438, 44, 53, 2, states_buffer, scan) && l.byte_length > 3) {
                                return;
                            } else if (isTokenActive(3, tk_row) && l.isUniID() && l.byte_length > 3) {
                                l._type = 3;
                                return;
                            } else if (isTokenActive(82, tk_row)) {
                                l.setToken(82, 3, 3);
                                return;
                            }
                        }
                    }
                }
            }
            break;
        case 102:
            {
                if (l.get_byte_at(l.byte_offset) == 102) {
                    if (l.get_byte_at(l.byte_offset + 1) == 111) {
                        if (2 == compare(l, l.byte_offset + 2, 51, 2, token_sequence_lookup)) {
                            if (isTokenActive(13, tk_row) && token_production(l, 67109179, 9, 13, 1, states_buffer, scan) && l.byte_length > 4) {
                                return;
                            } else if (isTokenActive(53, tk_row) && token_production(l, 67111438, 44, 53, 2, states_buffer, scan) && l.byte_length > 4) {
                                return;
                            } else if (isTokenActive(3, tk_row) && l.isUniID() && l.byte_length > 4) {
                                l._type = 3;
                                return;
                            } else if (isTokenActive(62, tk_row)) {
                                l.setToken(62, 4, 4);
                                return;
                            }
                        }
                    } else if (l.get_byte_at(l.byte_offset + 1) == 97) {
                        if (2 == compare(l, l.byte_offset + 2, 145, 2, token_sequence_lookup)) {
                            if (isTokenActive(13, tk_row) && token_production(l, 67109179, 9, 13, 1, states_buffer, scan) && l.byte_length > 4) {
                                return;
                            } else if (isTokenActive(53, tk_row) && token_production(l, 67111438, 44, 53, 2, states_buffer, scan) && l.byte_length > 4) {
                                return;
                            } else if (isTokenActive(3, tk_row) && l.isUniID() && l.byte_length > 4) {
                                l._type = 3;
                                return;
                            } else if (isTokenActive(69, tk_row)) {
                                l.setToken(69, 4, 4);
                                return;
                            }
                        }
                    } else if (l.get_byte_at(l.byte_offset + 1) == 58) {
                        if (isTokenActive(51, tk_row)) {
                            l.setToken(51, 2, 2);
                            return;
                        }
                    }
                }
            }
            break;
        case 103:
            {
                if (l.get_byte_at(l.byte_offset) == 103) {
                    if (l.get_byte_at(l.byte_offset + 1) == 111) {
                        if (2 == compare(l, l.byte_offset + 2, 12, 2, token_sequence_lookup)) {
                            if (isTokenActive(13, tk_row) && token_production(l, 67109179, 9, 13, 1, states_buffer, scan) && l.byte_length > 4) {
                                return;
                            } else if (isTokenActive(53, tk_row) && token_production(l, 67111438, 44, 53, 2, states_buffer, scan) && l.byte_length > 4) {
                                return;
                            } else if (isTokenActive(3, tk_row) && l.isUniID() && l.byte_length > 4) {
                                l._type = 3;
                                return;
                            } else if (isTokenActive(77, tk_row)) {
                                l.setToken(77, 4, 4);
                                return;
                            }
                        }
                    } else if (l.get_byte_at(l.byte_offset + 1) == 58) {
                        if (isTokenActive(12, tk_row)) {
                            l.setToken(12, 2, 2);
                            return;
                        }
                    }
                }
            }
            break;
        case 105:
            {
                if (l.get_byte_at(l.byte_offset) == 105) {
                    if (l.get_byte_at(l.byte_offset + 1) == 100) {
                        if (isTokenActive(13, tk_row) && token_production(l, 67109179, 9, 13, 1, states_buffer, scan) && l.byte_length > 2) {
                            return;
                        } else if (isTokenActive(53, tk_row) && token_production(l, 67111438, 44, 53, 2, states_buffer, scan) && l.byte_length > 2) {
                            return;
                        } else if (isTokenActive(3, tk_row) && l.isUniID() && l.byte_length > 2) {
                            l._type = 3;
                            return;
                        } else if (isTokenActive(67, tk_row)) {
                            l.setToken(67, 2, 2);
                            return;
                        }
                    }
                }
            }
            break;
        case 110:
            {
                if (l.get_byte_at(l.byte_offset) == 110) {
                    if (2 == compare(l, l.byte_offset + 1, 95, 2, token_sequence_lookup)) {
                        if (l.get_byte_at(l.byte_offset + 3) == 104) {
                            if (3 == compare(l, l.byte_offset + 4, 98, 3, token_sequence_lookup)) {
                                if (isTokenActive(13, tk_row) && token_production(l, 67109179, 9, 13, 1, states_buffer, scan) && l.byte_length > 7) {
                                    return;
                                } else if (isTokenActive(53, tk_row) && token_production(l, 67111438, 44, 53, 2, states_buffer, scan) && l.byte_length > 7) {
                                    return;
                                } else if (isTokenActive(3, tk_row) && l.isUniID() && l.byte_length > 7) {
                                    l._type = 3;
                                    return;
                                } else if (isTokenActive(75, tk_row)) {
                                    l.setToken(75, 7, 7);
                                    return;
                                }
                            }
                        } else if (isTokenActive(13, tk_row) && token_production(l, 67109179, 9, 13, 1, states_buffer, scan) && l.byte_length > 3) {
                            return;
                        } else if (isTokenActive(53, tk_row) && token_production(l, 67111438, 44, 53, 2, states_buffer, scan) && l.byte_length > 3) {
                            return;
                        } else if (isTokenActive(3, tk_row) && l.isUniID() && l.byte_length > 3) {
                            l._type = 3;
                            return;
                        } else if (isTokenActive(70, tk_row)) {
                            l.setToken(70, 3, 3);
                            return;
                        }
                    }
                }
            }
            break;
        case 111:
            {
                if (l.get_byte_at(l.byte_offset) == 111) {
                    if (l.get_byte_at(l.byte_offset + 1) == 110) {
                        if (isTokenActive(13, tk_row) && token_production(l, 67109179, 9, 13, 1, states_buffer, scan) && l.byte_length > 2) {
                            return;
                        } else if (isTokenActive(53, tk_row) && token_production(l, 67111438, 44, 53, 2, states_buffer, scan) && l.byte_length > 2) {
                            return;
                        } else if (isTokenActive(3, tk_row) && l.isUniID() && l.byte_length > 2) {
                            l._type = 3;
                            return;
                        } else if (isTokenActive(55, tk_row)) {
                            l.setToken(55, 2, 2);
                            return;
                        }
                    }
                }
            }
            break;
        case 112:
            {
                if (l.get_byte_at(l.byte_offset) == 112) {
                    if (l.get_byte_at(l.byte_offset + 1) == 114) {
                        if (2 == compare(l, l.byte_offset + 2, 81, 2, token_sequence_lookup)) {
                            if (isTokenActive(13, tk_row) && token_production(l, 67109179, 9, 13, 1, states_buffer, scan) && l.byte_length > 4) {
                                return;
                            } else if (isTokenActive(53, tk_row) && token_production(l, 67111438, 44, 53, 2, states_buffer, scan) && l.byte_length > 4) {
                                return;
                            } else if (isTokenActive(3, tk_row) && l.isUniID() && l.byte_length > 4) {
                                l._type = 3;
                                return;
                            } else if (isTokenActive(56, tk_row)) {
                                l.setToken(56, 4, 4);
                                return;
                            }
                        }
                    } else if (l.get_byte_at(l.byte_offset + 1) == 97) {
                        if (2 == compare(l, l.byte_offset + 2, 162, 2, token_sequence_lookup)) {
                            if (isTokenActive(13, tk_row) && token_production(l, 67109179, 9, 13, 1, states_buffer, scan) && l.byte_length > 4) {
                                return;
                            } else if (isTokenActive(53, tk_row) && token_production(l, 67111438, 44, 53, 2, states_buffer, scan) && l.byte_length > 4) {
                                return;
                            } else if (isTokenActive(3, tk_row) && l.isUniID() && l.byte_length > 4) {
                                l._type = 3;
                                return;
                            } else if (isTokenActive(68, tk_row)) {
                                l.setToken(68, 4, 4);
                                return;
                            }
                        }
                    } else if (l.get_byte_at(l.byte_offset + 1) == 101) {
                        if (2 == compare(l, l.byte_offset + 2, 224, 2, token_sequence_lookup)) {
                            if (isTokenActive(13, tk_row) && token_production(l, 67109179, 9, 13, 1, states_buffer, scan) && l.byte_length > 4) {
                                return;
                            } else if (isTokenActive(53, tk_row) && token_production(l, 67111438, 44, 53, 2, states_buffer, scan) && l.byte_length > 4) {
                                return;
                            } else if (isTokenActive(3, tk_row) && l.isUniID() && l.byte_length > 4) {
                                l._type = 3;
                                return;
                            } else if (isTokenActive(78, tk_row)) {
                                l.setToken(78, 4, 4);
                                return;
                            }
                        }
                    }
                }
            }
            break;
        case 114:
            {
                if (l.get_byte_at(l.byte_offset) == 114) {
                    if (l.get_byte_at(l.byte_offset + 1) == 101) {
                        if (l.get_byte_at(l.byte_offset + 2) == 116) {
                            if (3 == compare(l, l.byte_offset + 3, 74, 3, token_sequence_lookup)) {
                                if (isTokenActive(13, tk_row) && token_production(l, 67109179, 9, 13, 1, states_buffer, scan) && l.byte_length > 6) {
                                    return;
                                } else if (isTokenActive(53, tk_row) && token_production(l, 67111438, 44, 53, 2, states_buffer, scan) && l.byte_length > 6) {
                                    return;
                                } else if (isTokenActive(3, tk_row) && l.isUniID() && l.byte_length > 6) {
                                    l._type = 3;
                                    return;
                                } else if (isTokenActive(50, tk_row)) {
                                    l.setToken(50, 6, 6);
                                    return;
                                }
                            }
                        } else if (l.get_byte_at(l.byte_offset + 2) == 100) {
                            if (3 == compare(l, l.byte_offset + 3, 157, 3, token_sequence_lookup)) {
                                if (isTokenActive(13, tk_row) && token_production(l, 67109179, 9, 13, 1, states_buffer, scan) && l.byte_length > 6) {
                                    return;
                                } else if (isTokenActive(53, tk_row) && token_production(l, 67111438, 44, 53, 2, states_buffer, scan) && l.byte_length > 6) {
                                    return;
                                } else if (isTokenActive(3, tk_row) && l.isUniID() && l.byte_length > 6) {
                                    l._type = 3;
                                    return;
                                } else if (isTokenActive(59, tk_row)) {
                                    l.setToken(59, 6, 6);
                                    return;
                                }
                            }
                        } else if (l.get_byte_at(l.byte_offset + 2) == 112) {
                            if (3 == compare(l, l.byte_offset + 3, 219, 3, token_sequence_lookup)) {
                                if (isTokenActive(13, tk_row) && token_production(l, 67109179, 9, 13, 1, states_buffer, scan) && l.byte_length > 6) {
                                    return;
                                } else if (isTokenActive(53, tk_row) && token_production(l, 67111438, 44, 53, 2, states_buffer, scan) && l.byte_length > 6) {
                                    return;
                                } else if (isTokenActive(3, tk_row) && l.isUniID() && l.byte_length > 6) {
                                    l._type = 3;
                                    return;
                                } else if (isTokenActive(83, tk_row)) {
                                    l.setToken(83, 6, 6);
                                    return;
                                }
                            }
                        }
                    } else if (isTokenActive(13, tk_row) && token_production(l, 67109179, 9, 13, 1, states_buffer, scan) && l.byte_length > 1) {
                        return;
                    } else if (isTokenActive(53, tk_row) && token_production(l, 67111438, 44, 53, 2, states_buffer, scan) && l.byte_length > 1) {
                        return;
                    } else if (isTokenActive(3, tk_row) && l.isUniID() && l.byte_length > 1) {
                        l._type = 3;
                        return;
                    } else if (isTokenActive(45, tk_row)) {
                        l.setToken(45, 1, 1);
                        return;
                    }
                }
            }
            break;
        case 115:
            {
                if (l.get_byte_at(l.byte_offset) == 115) {
                    if (l.get_byte_at(l.byte_offset + 1) == 121) {
                        if (6 == compare(l, l.byte_offset + 2, 56, 6, token_sequence_lookup)) {
                            if (isTokenActive(80, tk_row)) {
                                l.setToken(80, 8, 8);
                                return;
                            }
                        }
                    } else if (l.get_byte_at(l.byte_offset + 1) == 107) {
                        if (5 == compare(l, l.byte_offset + 2, 149, 5, token_sequence_lookup)) {
                            if (isTokenActive(13, tk_row) && token_production(l, 67109179, 9, 13, 1, states_buffer, scan) && l.byte_length > 7) {
                                return;
                            } else if (isTokenActive(53, tk_row) && token_production(l, 67111438, 44, 53, 2, states_buffer, scan) && l.byte_length > 7) {
                                return;
                            } else if (isTokenActive(3, tk_row) && l.isUniID() && l.byte_length > 7) {
                                l._type = 3;
                                return;
                            } else if (isTokenActive(85, tk_row)) {
                                l.setToken(85, 7, 7);
                                return;
                            }
                        }
                    } else if (l.get_byte_at(l.byte_offset + 1) == 99) {
                        if (l.get_byte_at(l.byte_offset + 2) == 111) {
                            if (2 == compare(l, l.byte_offset + 3, 202, 2, token_sequence_lookup)) {
                                if (l.get_byte_at(l.byte_offset + 5) == 115) {
                                    if (isTokenActive(13, tk_row) && token_production(l, 67109179, 9, 13, 1, states_buffer, scan) && l.byte_length > 6) {
                                        return;
                                    } else if (isTokenActive(53, tk_row) && token_production(l, 67111438, 44, 53, 2, states_buffer, scan) && l.byte_length > 6) {
                                        return;
                                    } else if (isTokenActive(3, tk_row) && l.isUniID() && l.byte_length > 6) {
                                        l._type = 3;
                                        return;
                                    } else if (isTokenActive(72, tk_row)) {
                                        l.setToken(72, 6, 6);
                                        return;
                                    }
                                } else if (isTokenActive(13, tk_row) && token_production(l, 67109179, 9, 13, 1, states_buffer, scan) && l.byte_length > 5) {
                                    return;
                                } else if (isTokenActive(53, tk_row) && token_production(l, 67111438, 44, 53, 2, states_buffer, scan) && l.byte_length > 5) {
                                    return;
                                } else if (isTokenActive(3, tk_row) && l.isUniID() && l.byte_length > 5) {
                                    l._type = 3;
                                    return;
                                } else if (isTokenActive(73, tk_row)) {
                                    l.setToken(73, 5, 5);
                                    return;
                                }
                            }
                        } else if (l.get_byte_at(l.byte_offset + 2) == 97) {
                            if (l.get_byte_at(l.byte_offset + 3) == 110) {
                                if (isTokenActive(13, tk_row) && token_production(l, 67109179, 9, 13, 1, states_buffer, scan) && l.byte_length > 4) {
                                    return;
                                } else if (isTokenActive(53, tk_row) && token_production(l, 67111438, 44, 53, 2, states_buffer, scan) && l.byte_length > 4) {
                                    return;
                                } else if (isTokenActive(3, tk_row) && l.isUniID() && l.byte_length > 4) {
                                    l._type = 3;
                                    return;
                                } else if (isTokenActive(63, tk_row)) {
                                    l.setToken(63, 4, 4);
                                    return;
                                }
                            }
                        }
                    } else if (l.get_byte_at(l.byte_offset + 1) == 116) {
                        if (3 == compare(l, l.byte_offset + 2, 206, 3, token_sequence_lookup)) {
                            if (isTokenActive(13, tk_row) && token_production(l, 67109179, 9, 13, 1, states_buffer, scan) && l.byte_length > 5) {
                                return;
                            } else if (isTokenActive(53, tk_row) && token_production(l, 67111438, 44, 53, 2, states_buffer, scan) && l.byte_length > 5) {
                                return;
                            } else if (isTokenActive(3, tk_row) && l.isUniID() && l.byte_length > 5) {
                                l._type = 3;
                                return;
                            } else if (isTokenActive(76, tk_row)) {
                                l.setToken(76, 5, 5);
                                return;
                            }
                        }
                    } else if (l.get_byte_at(l.byte_offset + 1) == 101) {
                        if (l.get_byte_at(l.byte_offset + 2) == 116) {
                            if (isTokenActive(13, tk_row) && token_production(l, 67109179, 9, 13, 1, states_buffer, scan) && l.byte_length > 3) {
                                return;
                            } else if (isTokenActive(53, tk_row) && token_production(l, 67111438, 44, 53, 2, states_buffer, scan) && l.byte_length > 3) {
                                return;
                            } else if (isTokenActive(3, tk_row) && l.isUniID() && l.byte_length > 3) {
                                l._type = 3;
                                return;
                            } else if (isTokenActive(60, tk_row)) {
                                l.setToken(60, 3, 3);
                                return;
                            }
                        }
                    }
                }
            }
            break;
        case 116:
            {
                if (l.get_byte_at(l.byte_offset) == 116) {
                    if (l.get_byte_at(l.byte_offset + 1) == 111) {
                        if (l.get_byte_at(l.byte_offset + 2) == 107) {
                            if (2 == compare(l, l.byte_offset + 3, 18, 2, token_sequence_lookup)) {
                                if (isTokenActive(13, tk_row) && token_production(l, 67109179, 9, 13, 1, states_buffer, scan) && l.byte_length > 5) {
                                    return;
                                } else if (isTokenActive(53, tk_row) && token_production(l, 67111438, 44, 53, 2, states_buffer, scan) && l.byte_length > 5) {
                                    return;
                                } else if (isTokenActive(3, tk_row) && l.isUniID() && l.byte_length > 5) {
                                    l._type = 3;
                                    return;
                                } else if (isTokenActive(66, tk_row)) {
                                    l.setToken(66, 5, 5);
                                    return;
                                }
                            }
                        } else if (isTokenActive(13, tk_row) && token_production(l, 67109179, 9, 13, 1, states_buffer, scan) && l.byte_length > 2) {
                            return;
                        } else if (isTokenActive(53, tk_row) && token_production(l, 67111438, 44, 53, 2, states_buffer, scan) && l.byte_length > 2) {
                            return;
                        } else if (isTokenActive(3, tk_row) && l.isUniID() && l.byte_length > 2) {
                            l._type = 3;
                            return;
                        } else if (isTokenActive(61, tk_row)) {
                            l.setToken(61, 2, 2);
                            return;
                        }
                    } else if (l.get_byte_at(l.byte_offset + 1) == 104) {
                        if (2 == compare(l, l.byte_offset + 2, 132, 2, token_sequence_lookup)) {
                            if (isTokenActive(13, tk_row) && token_production(l, 67109179, 9, 13, 1, states_buffer, scan) && l.byte_length > 4) {
                                return;
                            } else if (isTokenActive(53, tk_row) && token_production(l, 67111438, 44, 53, 2, states_buffer, scan) && l.byte_length > 4) {
                                return;
                            } else if (isTokenActive(3, tk_row) && l.isUniID() && l.byte_length > 4) {
                                l._type = 3;
                                return;
                            } else if (isTokenActive(57, tk_row)) {
                                l.setToken(57, 4, 4);
                                return;
                            }
                        }
                    } else if (l.get_byte_at(l.byte_offset + 1) == 107) {
                        if (l.get_byte_at(l.byte_offset + 2) == 58) {
                            if (isTokenActive(17, tk_row)) {
                                l.setToken(17, 3, 3);
                                return;
                            }
                        }
                    } else if (l.get_byte_at(l.byte_offset + 1) == 58) {
                        if (isTokenActive(15, tk_row)) {
                            l.setToken(15, 2, 2);
                            return;
                        }
                    }
                }
            }
            break;
        case 117:
            {
                if (l.get_byte_at(l.byte_offset) == 117) {
                    if (4 == compare(l, l.byte_offset + 1, 88, 4, token_sequence_lookup)) {
                        if (isTokenActive(13, tk_row) && token_production(l, 67109179, 9, 13, 1, states_buffer, scan) && l.byte_length > 5) {
                            return;
                        } else if (isTokenActive(53, tk_row) && token_production(l, 67111438, 44, 53, 2, states_buffer, scan) && l.byte_length > 5) {
                            return;
                        } else if (isTokenActive(3, tk_row) && l.isUniID() && l.byte_length > 5) {
                            l._type = 3;
                            return;
                        } else if (isTokenActive(65, tk_row)) {
                            l.setToken(65, 5, 5);
                            return;
                        }
                    }
                }
            }
            break;
        case 119:
            {
                if (l.get_byte_at(l.byte_offset) == 119) {
                    if (5 == compare(l, l.byte_offset + 1, 102, 5, token_sequence_lookup)) {
                        if (isTokenActive(13, tk_row) && token_production(l, 67109179, 9, 13, 1, states_buffer, scan) && l.byte_length > 6) {
                            return;
                        } else if (isTokenActive(53, tk_row) && token_production(l, 67111438, 44, 53, 2, states_buffer, scan) && l.byte_length > 6) {
                            return;
                        } else if (isTokenActive(3, tk_row) && l.isUniID() && l.byte_length > 6) {
                            l._type = 3;
                            return;
                        } else if (isTokenActive(71, tk_row)) {
                            l.setToken(71, 6, 6);
                            return;
                        }
                    }
                }
            }
            break;
        case 123:
            {
                if (l.get_byte_at(l.byte_offset) == 123) {
                    if (isTokenActive(46, tk_row)) {
                        l.setToken(46, 1, 1);
                        return;
                    }
                }
            }
            break;
        case 124:
            {
                if (l.get_byte_at(l.byte_offset) == 124) {
                    if (isTokenActive(28, tk_row)) {
                        l.setToken(28, 1, 1);
                        return;
                    }
                }
            }
            break;
        case 125:
            {
                if (l.get_byte_at(l.byte_offset) == 125) {
                    if (isTokenActive(47, tk_row)) {
                        l.setToken(47, 1, 1);
                        return;
                    }
                }
            }
            break;
        default:
            break;
    };
    if (isTokenActive(13, tk_row) && pre_scan(l, 229) && token_production(l, 67109179, 9, 13, 1, states_buffer, scan)) {
        return;
    } else if (isTokenActive(53, tk_row) && pre_scan(l, 230) && token_production(l, 67111438, 44, 53, 2, states_buffer, scan)) {
        return;
    } else if (isTokenActive(86, tk_row) && pre_scan(l, 231) && token_production(l, 67108912, 2, 86, 4, states_buffer, scan)) {
        return;
    } else if (isTokenActive(0, tk_row) && false) {
        l._type = 0;
        return;
    } else if (isTokenActive(8, tk_row) && l.isSP(true)) {
        l._type = 8;
        return;
    } else if (isTokenActive(3, tk_row) && l.isUniID()) {
        l._type = 3;
        return;
    } else if (isTokenActive(2, tk_row) && l.isSym(true)) {
        l._type = 2;
        return;
    } else if (isTokenActive(7, tk_row) && l.isNL()) {
        l._type = 7;
        return;
    } else if (isTokenActive(5, tk_row) && l.isNum()) {
        l._type = 5;
        return;
    }
}

function scan(l, token, skip) {
    if (((l._type) <= 0)) scan_core(l, token);;
    if ((skip > 0 && isTokenActive(l._type, skip))) {
        while ((isTokenActive(l._type, skip))) {
            l.next();
            scan_core(l, token);
        }
    }
}

const js_parser_pack = {

    init_table: () => {
        const table = new Uint8Array(382976);
        init_table(table);
        return table;
    },

    create_iterator: (data) => {
        return new KernelStateIterator(data);
    },

    recognize: (string, entry_index) => {

        const temp_buffer = new Uint8Array(string.length * 4);

        const actual_length = fillByteBufferWithUTF8FromString(string, temp_buffer, temp_buffer.length);

        const input_buffer = new Uint8Array(temp_buffer.buffer, 0, actual_length);

        let entry_pointer = 0;

        switch (entry_index) {

            case 0: default: entry_pointer = 67108868; break;

            case 1: entry_pointer = 67112644; break;
        }

        return run(
            states_buffer,
            input_buffer,
            input_buffer.length,
            entry_pointer,
            scan,
            false
        );
    }
};

const reduce_functions = [(_, s) => s[s.length - 1], (env, sym, pos) => ({ type: "hc-grammar-4", preamble: sym[0] || [], ir_states: sym[1].ir || [], productions: sym[1].productions, functions: sym[1].functions || [], imported_grammars: [], meta: null, ignore: [], all_symbols: [], bodies: [] }) /*0*/,
(env, sym, pos) => ({ type: "hc-grammar-4", preamble: null || [], ir_states: sym[0].ir || [], productions: sym[0].productions, functions: sym[0].functions || [], imported_grammars: [], meta: null, ignore: [], all_symbols: [], bodies: [] }) /*1*/,
(env, sym, pos) => ([sym[0]]) /*2*/,
(env, sym, pos) => ((sym[0].push(sym[1]), sym[0])) /*3*/,
(env, sym, pos) => ({ type: "ignore", symbols: sym[1] }) /*4*/,
(env, sym, pos) => ({ type: "generated", val: sym[1], pos: pos, meta: false }) /*5*/,
(env, sym, pos) => (sym[0] + sym[1]) /*6*/,
(env, sym, pos) => ({ type: "exclusive-literal", val: "" + sym[1], pos: pos, meta: false }) /*7*/,
(env, sym, pos) => ({ type: "literal", val: sym[0], pos: pos, meta: false }) /*8*/,
(env, sym, pos) => ({ type: "literal", val: sym[1], pos: pos, meta: false }) /*9*/,
(env, sym, pos) => ({ type: "production_token", name: sym[1], production: null, val: -1, pos: pos, meta: false }) /*10*/,
(env, sym, pos) => ({ type: "import", uri: sym[1], reference: sym[3] }) /*11*/,
(env, sym, pos) => ({ type: "export", production: sym[1], reference: sym[3] }) /*12*/,
(env, sym, pos) => ({ type: "sym-production-import", module: sym[0], production: sym[2], name: "", pos: pos, meta: false }) /*13*/,
(env, sym, pos) => ({ type: "sym-production", name: sym[0], production: null, val: -1, pos: pos, meta: false }) /*14*/,
(env, sym, pos) => ({ type: "comment", value: sym[1] }) /*15*/,
(env, sym, pos) => ({ type: "production-section", functions: [], productions: [sym[0]], ir: [] }) /*16*/,
(env, sym, pos) => ({ type: "production-section", functions: [sym[0]], productions: [], ir: [] }) /*17*/,
(env, sym, pos) => ({ type: "production-section", functions: [], productions: [], ir: [sym[0]] }) /*18*/,
(env, sym, pos) => (sym[0].productions.push(sym[1]), sym[0]) /*19*/,
(env, sym, pos) => (sym[0].functions.push(sym[1]), sym[0]) /*20*/,
(env, sym, pos) => (sym[0].ir.push(sym[1]), sym[0]) /*21*/,
(env, sym, pos) => (sym[0]) /*22*/,
(env, sym, pos) => ({ type: "production", name: sym[2], bodies: sym[4], id: -1, recovery_handler: sym[5], pos: pos, recursion: 0, ROOT_PRODUCTION: !!sym[1] }) /*23*/,
(env, sym, pos) => ({ type: "production-merged-import", name: sym[1], bodies: sym[3], id: -1, recovery_handler: sym[4], ROOT_PRODUCTION: false }) /*24*/,
(env, sym, pos) => ({ type: "production", name: sym[1], bodies: sym[3], id: -1, recovery_handler: sym[4], pos: pos, recursion: 0, ROOT_PRODUCTION: !!null }) /*25*/,
(env, sym, pos) => ({ type: "production", name: sym[2], bodies: null, id: -1, recovery_handler: sym[4], pos: pos, recursion: 0, ROOT_PRODUCTION: !!sym[1] }) /*26*/,
(env, sym, pos) => ({ type: "production", name: sym[1], bodies: null, id: -1, recovery_handler: sym[3], pos: pos, recursion: 0, ROOT_PRODUCTION: !!null }) /*27*/,
(env, sym, pos) => ((sym[0].push(sym[2]), sym[0])) /*28*/,
(env, sym, pos) => ({ type: "body", sym: sym[0], reduce_function: sym[1], FORCE_FORK: false, id: -1, production: null, pos }) /*29*/,
(env, sym, pos) => ({ type: "body", sym: sym[0], reduce_function: null, FORCE_FORK: false, id: -1, production: null, pos }) /*30*/,
(env, sym, pos) => (sym[0].concat(sym[1])) /*31*/,
(env, sym, pos) => ([]) /*32*/,
(env, sym, pos) => (env.group_id++, sym[1].flat().map(e => (e.IS_OPTIONAL ? e.IS_OPTIONAL |= env.group_id << 8 : 0, e))) /*33*/,
(env, sym, pos) => (sym[0].IS_OPTIONAL = 1, sym[0]) /*34*/,
(env, sym, pos) => ({ type: "look-behind", val: sym[1].val, phased: sym[1] }) /*35*/,
(env, sym, pos) => (sym[1].IS_NON_CAPTURE = true, sym[1]) /*36*/,
(env, sym, pos) => ({ type: "group-production", val: sym[1], pos: pos, meta: false }) /*37*/,
(env, sym, pos) => ({ type: "list-production", terminal_symbol: sym[2], IS_OPTIONAL: +(sym[1] == "(*"), val: sym[0], pos: pos, meta: false }) /*38*/,
(env, sym, pos) => ({ type: "list-production", terminal_symbol: null, IS_OPTIONAL: +(sym[1] == "(*"), val: sym[0], pos: pos, meta: false }) /*39*/,
(env, sym, pos) => ({ type: "eof", val: "END_OF_FILE", pos: pos, meta: false }) /*40*/,
(env, sym, pos) => ({ type: "meta-exclude", sym: sym[1], meta: true, index: -1 }) /*41*/,
(env, sym, pos) => ({ type: "meta-error", sym: sym[1], meta: true, index: -1 }) /*42*/,
(env, sym, pos) => ({ type: "meta-ignore", sym: sym[1], meta: true, index: -1 }) /*43*/,
(env, sym, pos) => ({ type: "meta-reset", sym: sym[1], meta: true, index: -1 }) /*44*/,
(env, sym, pos) => ({ type: "meta-reduce", sym: sym[1], meta: true, index: -1 }) /*45*/,
(env, sym, pos) => ({ type: "empty", val: "", pos: pos, meta: false }) /*46*/,
(env, sym, pos) => ({ type: "RETURNED", txt: sym[3], name: "", env: false, ref: "", IS_CONDITION: true }) /*47*/,
(env, sym, pos) => ({ type: "env-function-reference", ref: sym[3] }) /*48*/,
(env, sym, pos) => ({ type: "local-function-reference", ref: sym[3] }) /*49*/,
(env, sym, pos) => ("FN:F") /*50*/,
(env, sym, pos) => (sym[0] + sym[1] + sym[2]) /*51*/,
(env, sym, pos) => ({ type: "ref-function", id: sym[1], txt: sym[3] }) /*52*/,
(env, sym, pos) => ({ type: "state", id: sym[1], instructions: sym[3], fail: sym[4], symbol_meta: sym[5], pos }) /*53*/,
(env, sym, pos) => ({ type: "state", id: sym[1], instructions: sym[3], symbol_meta: sym[4], pos }) /*54*/,
(env, sym, pos) => ({ type: "state", id: sym[1], instructions: sym[3], fail: sym[4], pos }) /*55*/,
(env, sym, pos) => ({ type: "state", id: sym[1], instructions: sym[3], pos }) /*56*/,
(env, sym, pos) => ({ type: "prod", ids: sym[2], instructions: sym[4], pos }) /*57*/,
(env, sym, pos) => (sym[1]) /*58*/,
(env, sym, pos) => ([...sym[0], ...sym[2], sym[3]]) /*59*/,
(env, sym, pos) => ([...sym[0], sym[1]]) /*60*/,
(env, sym, pos) => ([...sym[0], ...sym[2]]) /*61*/,
(env, sym, pos) => ([...sym[0]]) /*62*/,
(env, sym, pos) => ({ type: "reduce", len: parseInt(sym[1]), reduce_fn: parseInt(sym[2]), pos }) /*63*/,
(env, sym, pos) => ({ type: "reduce", len: -1, reduce_fn: sym[1], pos }) /*64*/,
(env, sym, pos) => ({ type: "set-prod", id: sym[3], pos }) /*65*/,
(env, sym, pos) => ({ type: "fork-to", states: sym[3], pos }) /*66*/,
(env, sym, pos) => ({ type: sym[1] ? "scan-back-until" : "scan-until", ids: sym[3], pos }) /*67*/,
(env, sym, pos) => ({ type: "token-id", id: sym[3], pos }) /*68*/,
(env, sym, pos) => ({ type: "pass", pos }) /*69*/,
(env, sym, pos) => ({ type: "fail", pos }) /*70*/,
(env, sym, pos) => ({ type: "not-in-scopes", ids: sym[4], pos }) /*71*/,
(env, sym, pos) => ({ type: "set-scope", scope: sym[3], pos }) /*72*/,
(env, sym, pos) => ({ type: "consume", EMPTY: !!sym[1], pos }) /*73*/,
(env, sym, pos) => ({ type: null ? "scan-back-until" : "scan-until", ids: sym[2], pos }) /*74*/,
(env, sym, pos) => ({ type: "consume", pos }) /*75*/,
(env, sym, pos) => (sym[2]) /*76*/,
(env, sym, pos) => ({ type: "goto", state: sym[1], pos }) /*77*/,
(env, sym, pos) => ({ type: "peek", ids: sym[1], instructions: sym[3], pos }) /*78*/,
(env, sym, pos) => ({ type: "assert", ids: sym[1], instructions: sym[3], pos }) /*79*/,
(env, sym, pos) => ({ type: "on-fail-state", id: sym[2], instructions: sym[3], symbol_meta: sym[5], fail: sym[4], pos }) /*80*/,
(env, sym, pos) => ({ type: "on-fail-state", id: sym[2], instructions: sym[3], symbol_meta: sym[4], pos }) /*81*/,
(env, sym, pos) => ({ type: "on-fail-state", id: sym[2], instructions: sym[3], fail: sym[4], pos }) /*82*/,
(env, sym, pos) => ({ type: "on-fail-state", id: sym[2], instructions: sym[3], pos }) /*83*/,
(env, sym, pos) => ({ type: "symbols", expected: sym[2], skipped: sym[3] || [], pos }) /*84*/,
(env, sym, pos) => ({ type: "symbols", expected: sym[2], skipped: null || [], pos }) /*85*/,
(env, sym, pos) => ({ type: "state", id: sym[0], instructions: sym[1], fail: sym[2], symbol_meta: sym[3], pos }) /*86*/,
(env, sym, pos) => ({ type: "state", id: sym[0], instructions: sym[1], symbol_meta: sym[2], pos }) /*87*/,
(env, sym, pos) => ({ type: "state", id: sym[0], instructions: sym[1], fail: sym[2], pos }) /*88*/,
(env, sym, pos) => ({ type: "state", id: sym[0], instructions: sym[1], pos }) /*89*/,
(env, sym, pos) => ({ type: "symbol", val: sym[0], pos: pos, meta: false }) /*90*/,
(env, sym, pos) => ({ type: "ERROR_RECOVERY", lexer_text: sym[3], body_text: sym[6] }) /*91*/,
(env, sym, pos) => ({ type: "function-inline", txt: sym[2], name: "", env: false, IS_CONDITION: true }) /*92*/,
(env, sym, pos) => ({ type: "INLINE", txt: "", name: sym[2], env: true, IS_CONDITION: true }) /*93*/,
(env, sym, pos) => (sym[0] + "") /*94*/,
(env, sym, pos) => (env.prod_name = sym[0]) /*95*/,
(env, sym, pos) => (env.prod_name = sym[0].val, sym[0]) /*96*/,
(env, sym, pos) => (sym[0] + "GG") /*97*/,
(env, sym, pos) => ({ type: "repeat-state", pos }) /*98*/,
(env, sym, pos) => (parseInt(sym[0])) /*99*/,
(env, sym, pos) => (sym[0] + "DD") /*100*/];

export default ParserFramework(
    reduce_functions,
    {
        hc: 0,
        ir: 1,
    },
    js_parser_pack,

);