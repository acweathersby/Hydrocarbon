
import {
    ParserFramework,
    KernelParserCore,
    fillByteBufferWithUTF8FromString
} from "@candlelib/hydrocarbon";


const {
    token_production,
    init_table,
    KernelStateIterator,
    run,
    compare
} = KernelParserCore;

const token_sequence_lookup = new Uint8Array([
    47, 42, 47, 64, 73, 71, 78, 79, 82, 69, 103, 111, 116, 111, 95, 116, 111, 107, 101, 110, 92, 58, 58,
    35, 60, 62, 43, 62, 124, 91, 93, 63, 61, 40, 69, 88, 67, 41, 36, 101, 109, 112, 116, 121, 123, 125,
    94, 61, 62, 102, 111, 114, 107, 45, 115, 121, 109, 98, 111, 108, 115, 58, 44, 97, 115, 115, 101,
    114, 116, 65, 83, 114, 101, 116, 117, 114, 110, 111, 110, 112, 114, 111, 100, 98, 97, 99, 107, 117,
    110, 116, 105, 108, 105, 100, 110, 111, 116, 104, 105, 110, 103, 119, 105, 116, 104, 105, 110,
    99, 111, 110, 115, 117, 109, 101, 120, 112, 101, 99, 116, 101, 100, 64, 73, 77, 80, 79, 82, 84, 103,
    58, 116, 104, 101, 110, 60, 61, 40, 69, 82, 82, 36, 101, 111, 102, 97, 105, 108, 115, 107, 105, 112,
    112, 101, 100, 114, 101, 100, 117, 99, 101, 112, 97, 115, 115, 101, 114, 104, 64, 69, 88, 80, 79,
    82, 84, 116, 107, 58, 116, 58, 60, 91, 40, 73, 71, 78, 40, 82, 83, 84, 40, 82, 69, 68, 40, 42, 40, 43,
    102, 58, 115, 99, 111, 112, 101, 115, 116, 97, 116, 101, 115, 99, 97, 110, 115, 101, 116, 114, 101,
    112, 101, 97, 116, 112, 101, 101, 107
]);

const token_lookup = new Uint32Array([
    94636416, 1572864, 0, 384, 0, 0, 386, 0, 0, 94636416, 1572864, 4194304, 384, 0, 4194304, 10750336,
    0, 0, 83886464, 1572864, 0, 896, 0, 0, 1452, 0, 4194304, 0, 0, 4194304, 428, 0, 4194304, 1408,
    0, 4194304, 386, 0, 4194304, 94636418, 1572864, 4194304, 94636418, 1572864, 0, 2432, 0, 0,
    262528, 0, 0, 2097536, 0, 0, 8388992, 0, 0, 233860, 0, 0, 256, 0, 0, 233862, 0, 0, 4480, 0, 0, 33156,
    0, 0, 65920, 0, 0, 131456, 0, 0, 8576, 0, 0, 4119048614, 1576959, 0, 16776, 0, 0, 16768, 0, 0, 16810,
    0, 0, 392, 0, 0, 16426, 0, 0, 33152, 0, 0, 424, 0, 0, 4121409958, 1576959, 4194304, 256, 0, 4194304,
    4119048614, 1576959, 4194304, 388, 0, 0, 128, 0, 0, 428, 0, 0, 4119048582, 1576959, 0, 396,
    0, 0, 1573248, 0, 0, 524672, 0, 0, 1048960, 0, 0, 497289602, 43532296, 65536, 5767552, 0, 0,
    1581440, 0, 0, 4202880, 0, 0, 4194688, 0, 0, 4254839174, 1576959, 0, 4120621446, 1576959,
    0, 363071874, 1572872, 4194304, 430, 0, 0, 416, 0, 0, 363071874, 1572872, 0, 83886464, 1572864,
    4194304, 83886464, 0, 0, 92275074, 1572864, 4194304, 384, 524288, 0, 384, 1048576, 0, 92275074,
    1572864, 0, 16777600, 0, 0, 33563008, 0, 0, 33554816, 0, 0, 134218112, 0, 0, 629387654, 1580999,
    4194304, 545501572, 8135, 0, 67109248, 0, 0, 134218114, 0, 0, 629387654, 1580999, 0, 360710530,
    1572872, 0, 537112964, 8135, 0, 4119048582, 1576959, 4194304, 1971564934, 1576911, 0, 102788,
    72, 0, 102788, 64, 0, 384, 8, 0, 897823110, 1576911, 0, 897823110, 1576911, 4194304, 360710530,
    1572872, 4194304, 537112964, 4039, 0, 384, 4096, 0, 536871296, 0, 0, 1073742208, 0, 0, 242052,
    71, 0, 384, 3968, 0, 4123242886, 1576959, 4194304, 233860, 71, 0, 384, 1, 0, 384, 2, 0, 384, 4,
    0, 384, 64, 0, 102822, 72, 0, 384, 128, 0, 384, 256, 0, 384, 512, 0, 384, 1024, 0, 384, 2048, 0, 102790,
    72, 0, 384, 270336, 0, 384, 8192, 0, 384, 212992, 0, 384, 16384, 0, 430, 16384, 0, 384, 32768,
    0, 494928258, 43515912, 65536, 384, 65536, 0, 384, 131072, 0, 384, 262144, 0, 8578, 352256,
    262144, 430, 49152, 0, 428, 49152, 0, 226492802, 43515912, 4259840, 384, 1048576, 4194304,
    384, 2097152, 4194304, 1073742208, 0, 4194304, 384, 3732930560, 4252784, 134218112, 8388608,
    4259840, 384, 8388608, 4194304, 134218112, 0, 4259840, 384, 0, 4259840, 134218112, 0, 4194304,
    16808, 4194304, 4194304, 392, 0, 4194304, 16810, 4194304, 4194304, 416, 0, 4194304, 16768,
    0, 4194304, 384, 4194304, 4194304, 16426, 4194304, 4194304, 134218114, 8388608, 4259840,
    384, 0, 4243456, 384, 3724541952, 4203632, 384, 16777216, 4194304, 536871296, 0, 4194304,
    384, 4, 4194304, 384, 8, 4194304, 386, 4, 4194304, 384, 67108864, 4194304, 134218114, 8388616,
    4259840, 384, 3623878656, 4195440, 134218114, 41943048, 4259840, 384, 33554432, 4194304,
    384, 33554432, 4726784, 384, 0, 4202496, 384, 33554432, 4718592, 384, 134217728, 4194304,
    416, 524288, 4194304, 134218114, 42467336, 4259840, 384, 268435456, 4194304, 384, 16777216,
    4194820, 384, 536870912, 4194304, 384, 0, 4194308, 384, 0, 4194312, 102820, 64, 0, 102788,
    64, 4194304, 384, 0, 4194816, 384, 1073741824, 4194304, 384, 0, 4198400, 384, 2147483648,
    4194304, 384, 0, 4194307, 384, 0, 4194305, 384, 0, 4194306, 384, 0, 4194320, 384, 0, 4194336,
    384, 0, 4194368, 384, 0, 4194432, 384, 0, 4194560, 384, 0, 4195328, 134218114, 41943048, 4261888,
    384, 0, 4196352, 134218114, 41943048, 5308416, 134218114, 41943052, 6356992, 384, 0, 4210688,
    134218114, 8388608, 4308992, 384, 0, 4227072, 134218114, 0, 4259840, 386, 3732930560, 4252784,
    384, 0, 4325376, 134218114, 0, 6356992, 384, 0, 6291456, 386, 8388608, 4259840, 386, 0, 4259840,
    1454, 0, 0, 1454, 0, 4194304, 4119048622, 1576959, 0, 4119048622, 1576959, 4194304, 1573262,
    0, 0, 1610854790, 4039, 0, 537112966, 4039, 0, 8578, 0, 0, 384, 8388608, 0, 134218114, 25165824,
    4259872, 134218114, 25165824, 65536, 384, 0, 49152, 134218114, 8388608, 114688, 1073742242,
    0, 0, 1073742240, 0, 4194304, 384, 3623878656, 1136, 134218114, 3665821704, 4793456, 134218114,
    41943048, 65536, 384, 0, 8192, 134218114, 41943048, 4792320, 384, 33554432, 0, 384, 0, 524288,
    384, 0, 4096, 1207959970, 41943048, 65536, 386, 8, 1048576, 386, 8, 5242880, 384, 0, 2097152,
    134218114, 0, 65536, 16392, 0, 0, 16424, 4194304, 0, 512, 0, 0
]);

const states_buffer = new Uint32Array([
    0, 4026531840, 2164260864, 4026531841, 2147483648, 603979787, 603979785, 603979788,
    0, 805306368, 0, 0, 2852126728, 196612, 196616, 2147491864, 2147491866, 2143289362, 2160066571,
    2147491892, 2147483669, 2147491891, 2147483671, 2147483649, 603979823, 603979808, 0,
    2147483649, 603979823, 603979817, 0, 4026531840, 603979811, 603979882, 0, 603979814,
    603980874, 0, 1073742096, 805306369, 0, 603979820, 603980874, 0, 1073742344, 805306369,
    0, 0, 2852192261, 458753, 1, 2147483657, 2147483650, 268435456, 603979881, 603979834,
    0, 4026531840, 2852126724, 524297, 131078, 2147483656, 2147483653, 2160066562, 2151677955,
    2147483655, 2147487754, 603979848, 0, 603979862, 0, 4026531840, 603979851, 603984108,
    0, 2852192259, 720900, 1, 2147483658, 268435456, 603979859, 0, 4026531840, 1073741848,
    805306370, 0, 2583756810, 720900, 65538, 4026531840, 0, 603979870, 0, 0, 2852192259, 720900,
    1, 2147483658, 268435456, 603979878, 0, 4026531840, 1073741840, 805306370, 0, 0, 2147483651,
    603979912, 603979887, 603979928, 0, 1073742600, 805306371, 0, 2852126723, 196612, 196616,
    2147487768, 2147487770, 2143289362, 2160066571, 2147487796, 2147483669, 2147487795,
    2147483671, 603979906, 0, 4026531840, 4026531840, 0, 603979909, 603979928, 0, 1073742864,
    805306371, 0, 3087007890, 2499805187, 0, 65539, 4026531840, 0, 0, 603979912, 603979890,
    0, 2499805187, 0, 65537, 4026531840, 0, 0, 2852126736, 327681, 131076, 2147508247, 2147500053,
    2147491858, 2134900747, 2147483652, 603979966, 603979952, 0, 2147483652, 603979966,
    603979957, 0, 2147483652, 603979966, 603979960, 0, 2147483652, 603979966, 603979963,
    0, 4026531840, 603979955, 603979967, 0, 805306372, 0, 603979955, 603980533, 0, 603979955,
    603980608, 0, 603979955, 603980742, 0, 0, 2852192261, 983041, 1, 2147483659, 2147483653,
    268435456, 603979991, 603979977, 0, 4026531840, 603979980, 603979992, 0, 2852192259,
    65556, 1, 2147483655, 268435456, 603979988, 0, 4026531840, 1073743128, 805306373, 0, 0,
    2147483654, 603980020, 603979997, 603980036, 0, 1073742600, 805306374, 0, 2852126723,
    1245204, 131078, 2168455180, 2147483665, 2147483650, 2151682055, 2147483663, 2147483664,
    603980014, 0, 4026531840, 4026531840, 0, 603980017, 603980036, 0, 1073742864, 805306374,
    0, 3087007998, 2499805190, 0, 65539, 4026531840, 0, 0, 603980020, 603980000, 0, 2499805190,
    0, 65537, 4026531840, 0, 0, 2852126736, 1245185, 131077, 2164260876, 2147508241, 2147491842,
    2147491855, 2147500048, 2147483655, 603980076, 603980062, 0, 2147483655, 603980076,
    603980067, 0, 2147483655, 603980076, 603980070, 0, 2147483655, 603980076, 603980073,
    0, 4026531840, 0, 603980065, 603980077, 0, 805306375, 0, 603980065, 603980228, 0, 603980065,
    603980491, 0, 603980065, 603980511, 0, 0, 2852192261, 1441793, 1, 2147483660, 2147483656,
    268435456, 603980098, 603980087, 0, 4026531840, 2852192259, 1703937, 1, 2147483661, 268435456,
    603980095, 0, 4026531840, 1073743376, 805306376, 0, 0, 2852126728, 1835009, 65538, 2147483662,
    2147491843, 2147483657, 603980212, 603980113, 0, 2147483657, 603980212, 603980131, 0,
    4026531840, 2583756814, 1900545, 65538, 4026531840, 0, 603980121, 0, 0, 2852192259, 1900545,
    1, 2147483662, 268435456, 603980129, 0, 4026531840, 805306377, 0, 2583756803, 2031617,
    65538, 4026531840, 0, 603980139, 0, 0, 2852192259, 2031617, 1, 2147483651, 268435456, 603980129,
    0, 4026531840, 2852126726, 2097152, 65539, 2147487758, 2151677955, 2147491845, 603980161,
    0, 603980180, 0, 603980196, 0, 4026531840, 0, 2583756803, 2097152, 65538, 4026531840, 0,
    603980169, 0, 0, 2852192259, 2097152, 1, 2147483651, 268435456, 603980177, 0, 4026531840,
    1073743632, 805306377, 0, 2583756814, 2097152, 65538, 4026531840, 0, 603980188, 0, 0, 2852192259,
    2097152, 1, 2147483662, 268435456, 603980177, 0, 4026531840, 2583756805, 2097152, 65538,
    4026531840, 0, 603980204, 0, 0, 2852192259, 2097152, 1, 2147483653, 268435456, 603980177,
    0, 4026531840, 3087008190, 2499805193, 0, 65539, 4026531840, 0, 0, 603980212, 603980147,
    0, 2499805193, 0, 65537, 4026531840, 0, 0, 2852126728, 1507329, 65538, 2147491842, 2147483663,
    2147483658, 603980431, 603980242, 0, 2147483658, 603980431, 603980412, 0, 4026531840,
    2583756815, 2162689, 65538, 4026531840, 0, 603980250, 0, 0, 2852192259, 2162689, 1, 2147483663,
    268435456, 603980258, 0, 4026531840, 603980261, 603984342, 0, 2852126726, 1769472, 262175,
    2239766544, 2210398209, 2239766530, 2256543779, 2256543780, 2231377925, 2147491878,
    2189430791, 2189434888, 2147491881, 2222989338, 2147491883, 2176851980, 2176851981,
    2147491870, 2172657679, 2176851985, 2185240599, 2185240600, 2147491868, 2147491869,
    2147491871, 2147491872, 2147491873, 2147491874, 2147491877, 2147491879, 2147491880,
    2147491882, 2147491891, 2147491892, 603980303, 0, 603980318, 0, 603980371, 0, 4026531840,
    0, 1610612738, 67109395, 67109401, 0, 603980310, 603980432, 0, 1073743896, 805306378,
    0, 603980315, 0, 1073743888, 805306378, 0, 2583756807, 65556, 65538, 4026531840, 0, 603980326,
    0, 0, 2785017860, 2293796, 327713, 2147483680, 2202009601, 2231369730, 2147483683, 2147483684,
    2231369733, 2147483686, 2231369735, 2147483688, 2147483689, 2147483690, 2235568139,
    2147483660, 2147483661, 2147483681, 2147483663, 2147483664, 2147483665, 2147487762,
    2147483699, 2147483700, 2147487765, 2147483682, 2147483671, 2147483672, 2147483685,
    2147483674, 2147483687, 2147483676, 2147483677, 2147483678, 2147483679, 2147483691,
    603980368, 0, 603980315, 0, 4026531840, 0, 603980310, 603980432, 0, 2852126724, 2424841,
    262173, 2231373840, 2231373841, 2231373826, 2248151075, 2248151076, 2222985221, 2147487782,
    2218790935, 2181038088, 2147487785, 2214596634, 2147487787, 2168459276, 2168459277,
    2147487774, 2164264975, 2185236504, 2147487772, 2147487773, 2147487775, 2147487776,
    2147487777, 2147487778, 2147487781, 2147487783, 2147487784, 2147487786, 2147487795,
    2147487796, 603980409, 0, 603980315, 0, 4026531840, 0, 603980310, 603980432, 0, 2583756802,
    2490369, 65538, 4026531840, 0, 603980420, 0, 0, 2852192259, 2490369, 1, 2147483650, 268435456,
    603980428, 0, 4026531840, 1073744136, 805306378, 0, 0, 2852126732, 131072, 65539, 2147483656,
    2151686145, 2147500039, 2147483659, 603980490, 603980452, 0, 2147483659, 603980490,
    603980470, 0, 2147483659, 603980490, 603980474, 0, 4026531840, 0, 2583756808, 65575, 65538,
    4026531840, 0, 603980460, 0, 0, 2852192259, 65575, 1, 2147483656, 268435456, 603980468,
    0, 4026531840, 805306379, 0, 603980472, 0, 603980468, 0, 2583756807, 65556, 65538, 4026531840,
    0, 603980482, 0, 0, 2852192259, 65556, 1, 2147483655, 268435456, 603980468, 0, 4026531840,
    0, 2852192261, 1572865, 1, 2147483664, 2147483660, 268435456, 603980510, 603980501, 0,
    4026531840, 603980504, 603984570, 0, 603980507, 603980432, 0, 1073744408, 805306380,
    0, 0, 2852192261, 1638401, 1, 2147483665, 2147483661, 268435456, 603980532, 603980521,
    0, 4026531840, 2852192259, 1703937, 1, 2147483661, 268435456, 603980529, 0, 4026531840,
    1073744656, 805306381, 0, 0, 2852192261, 1048577, 1, 2147483666, 2147483662, 268435456,
    603980594, 603980543, 0, 4026531840, 603980546, 603984726, 0, 2583691283, 2818049, 131074,
    4026531840, 0, 603980556, 0, 603980578, 0, 0, 2583756819, 2883585, 65538, 4026531840, 0,
    603980564, 0, 0, 2852192259, 2883585, 1, 2147483667, 268435456, 603980572, 0, 4026531840,
    603980575, 603980595, 0, 1073744928, 805306382, 0, 2583756820, 2949121, 65538, 4026531840,
    0, 603980586, 0, 0, 2852192259, 2949121, 1, 2147483668, 268435456, 603980572, 0, 4026531840,
    0, 2852192261, 1703937, 1, 2147483661, 2147483663, 268435456, 603980607, 603980605, 0,
    4026531840, 805306383, 0, 0, 2852192261, 1114113, 1, 2147483669, 2147483664, 268435456,
    603980697, 603980618, 0, 4026531840, 2583756813, 1703937, 65538, 4026531840, 0, 603980626,
    0, 0, 2785017860, 3080193, 65539, 2155872276, 2147483667, 2147487766, 603980638, 0, 603980694,
    0, 4026531840, 0, 603980641, 603980728, 0, 2583691283, 2818049, 131074, 4026531840, 0,
    603980651, 0, 603980678, 0, 0, 2583756819, 2883585, 65538, 4026531840, 0, 603980659, 0,
    0, 2852192259, 2883585, 1, 2147483667, 268435456, 603980667, 0, 4026531840, 2852192259,
    2031617, 1, 2147483651, 268435456, 603980675, 0, 4026531840, 1073745184, 805306384, 0,
    2583756820, 2949121, 65538, 4026531840, 0, 603980686, 0, 0, 2852192259, 2949121, 1, 2147483668,
    268435456, 603980667, 0, 4026531840, 603980641, 603980698, 0, 0, 2852192261, 1703937,
    1, 2147483661, 2147483665, 268435456, 603980727, 603980708, 0, 4026531840, 2852192259,
    3276801, 1, 2147483670, 268435456, 603980716, 0, 4026531840, 2852192259, 1703937, 1, 2147483661,
    268435456, 603980724, 0, 4026531840, 1073745432, 805306385, 0, 0, 2852192261, 1703937,
    1, 2147483661, 2147483666, 268435456, 603980741, 603980738, 0, 4026531840, 1073745672,
    805306386, 0, 0, 2147483667, 603980749, 603980747, 603980750, 0, 805306387, 0, 0, 2852192261,
    1179649, 1, 2147483671, 2147483668, 268435456, 603980769, 603980760, 0, 4026531840, 603980763,
    603984840, 0, 603980766, 603980861, 0, 1073745944, 805306388, 0, 0, 2852126736, 2621479,
    131076, 2147508232, 2147500037, 2147483650, 2147491843, 2147483669, 603980860, 603980794,
    0, 2147483669, 603980860, 603980812, 0, 2147483669, 603980860, 603980828, 0, 2147483669,
    603980860, 603980844, 0, 4026531840, 2583756802, 2490369, 65538, 4026531840, 0, 603980802,
    0, 0, 2852192259, 2490369, 1, 2147483650, 268435456, 603980810, 0, 4026531840, 805306389,
    0, 2583756803, 2031617, 65538, 4026531840, 0, 603980820, 0, 0, 2852192259, 2031617, 1, 2147483651,
    268435456, 603980810, 0, 4026531840, 2583756805, 3604481, 65538, 4026531840, 0, 603980836,
    0, 0, 2852192259, 3604481, 1, 2147483653, 268435456, 603980810, 0, 4026531840, 2583756808,
    65575, 65538, 4026531840, 0, 603980852, 0, 0, 2852192259, 65575, 1, 2147483656, 268435456,
    603980810, 0, 4026531840, 0, 2852192261, 65556, 1, 2147483655, 2147483670, 268435456,
    603980873, 603980871, 0, 4026531840, 805306390, 0, 0, 2852126732, 3735556, 131076, 2151677976,
    2147500084, 2147483674, 2147491891, 2147483671, 603980956, 603980894, 0, 2147483671,
    603980956, 603980900, 0, 2147483671, 603980956, 603980906, 0, 4026531840, 603980897,
    603980972, 0, 1073746184, 805306391, 0, 603980903, 603982568, 0, 1073746440, 805306391,
    0, 603980909, 603982599, 0, 1073746696, 805306391, 0, 2852126729, 3866628, 131078, 2168455192,
    2147500033, 2147483674, 2151690263, 2147487795, 2147491892, 603980932, 0, 603980938,
    0, 603980944, 0, 603980950, 0, 4026531840, 4026531840, 0, 603980935, 603980972, 0, 1073746960,
    805306391, 0, 603980941, 603982568, 0, 1073747216, 805306391, 0, 603980947, 603982599,
    0, 1073747472, 805306391, 0, 603980953, 603980742, 0, 1073747728, 805306391, 0, 3087008934,
    2499805207, 0, 65539, 4026531840, 0, 0, 603980956, 603980912, 0, 2499805207, 0, 65537, 4026531840,
    0, 0, 2852126728, 3801089, 65538, 2151677976, 2147491866, 2147483672, 603981150, 603980986,
    0, 2147483672, 603981150, 603981122, 0, 4026531840, 2583756824, 4128769, 65538, 4026531840,
    0, 603980994, 0, 0, 2852192259, 4128769, 1, 2147483672, 268435456, 603981002, 0, 4026531840,
    2852126724, 4194305, 65538, 2147483673, 2143293453, 603981012, 0, 603981075, 0, 4026531840,
    2583756825, 4259841, 65538, 4026531840, 0, 603981020, 0, 0, 2852192259, 4259841, 1, 2147483673,
    268435456, 603981028, 0, 4026531840, 603981031, 603984882, 0, 603981034, 603981164, 0,
    2852126724, 4390916, 262167, 2214592528, 2164264961, 2214592514, 2147487795, 2147487796,
    2197815313, 2147483686, 2197815319, 2197819416, 2147483689, 2193625114, 2147483691,
    2189426700, 2151677965, 2147483677, 2147483663, 2147483680, 2147483681, 2147483682,
    2147483687, 2147483688, 2147483690, 2147483692, 603981066, 0, 603981072, 0, 4026531840,
    0, 603981069, 603981177, 0, 1073748008, 805306392, 0, 1073748768, 805306392, 0, 603981078,
    603984882, 0, 603981081, 603981164, 0, 2852126724, 4390916, 262167, 2214592528, 2164264961,
    2214592514, 2147487795, 2147487796, 2197815313, 2147483686, 2197815319, 2197819416,
    2147483689, 2193625114, 2147483691, 2189426700, 2151677965, 2147483677, 2147483663,
    2147483680, 2147483681, 2147483682, 2147483687, 2147483688, 2147483690, 2147483692,
    603981113, 0, 603981119, 0, 4026531840, 0, 603981116, 603981177, 0, 1073748512, 805306392,
    0, 1073749016, 805306392, 0, 2583756826, 4521985, 65538, 4026531840, 0, 603981130, 0, 0,
    2852192259, 4521985, 1, 2147483674, 268435456, 603981138, 0, 4026531840, 603981141, 603984891,
    0, 603981144, 603981164, 0, 603981147, 603981177, 0, 1073748256, 805306392, 0, 0, 2852192261,
    1703937, 1, 2147483661, 2147483673, 268435456, 603981163, 603981161, 0, 4026531840, 805306393,
    0, 0, 2852192261, 4325377, 1, 2147483675, 2147483674, 268435456, 603981176, 603981174,
    0, 4026531840, 805306394, 0, 0, 2852126728, 4456449, 262162, 2164269072, 2164269073, 2197823490,
    2147491869, 2147491872, 2147491873, 2147491878, 2185232407, 2147491880, 2147491881,
    2147491882, 2147491883, 2168463372, 2105548813, 2147491874, 2147491855, 2147491879,
    2147491884, 2147483675, 603981476, 603981207, 0, 2147483675, 603981476, 603981213, 0,
    4026531840, 603981210, 603980742, 0, 1073742600, 805306395, 0, 603981210, 603981504,
    0, 2852126728, 4849668, 262172, 2231369744, 2210398209, 2231369730, 2243952675, 2243960868,
    2147495973, 2147483686, 2214592535, 2214592536, 2147483689, 2210398234, 2147483691,
    2168455180, 2168455181, 2147483678, 2164260879, 2168455185, 2147483676, 2147483677,
    2147487775, 2147483680, 2147483681, 2147483682, 2147483687, 2147483688, 2147483690,
    2147483699, 2147483700, 603981256, 0, 603981259, 0, 603981278, 0, 603981341, 0, 4026531840,
    1073742600, 805306398, 0, 2583756831, 2686977, 65538, 4026531840, 0, 603981267, 0, 0, 2852192259,
    2686977, 1, 2147483679, 268435456, 603981275, 0, 4026531840, 1073750800, 805306399, 0,
    2583756836, 2686977, 65538, 4026531840, 0, 603981286, 0, 0, 2852192259, 2686977, 1, 2147483684,
    268435456, 603981294, 0, 4026531840, 2852126724, 4980737, 131078, 2151677964, 2147483664,
    2160066562, 2151677967, 2147487779, 2147483686, 603981308, 0, 603981322, 0, 4026531840,
    603981311, 603981945, 0, 2852192259, 5111809, 1, 2147483683, 268435456, 603981319, 0,
    4026531840, 1073751840, 805306399, 0, 2583756835, 5111809, 65538, 4026531840, 0, 603981330,
    0, 0, 2852192259, 5111809, 1, 2147483683, 268435456, 603981338, 0, 4026531840, 1073752088,
    805306399, 0, 2583756837, 2686977, 65538, 4026531840, 0, 603981349, 0, 0, 2852192259, 2686977,
    1, 2147483685, 268435456, 603981294, 0, 4026531840, 1073747720, 805306397, 0, 2852126726,
    5242884, 262168, 2218795024, 2164264961, 2218795010, 2231373859, 2147487796, 2202017809,
    2147491878, 2202013719, 2202013720, 2147491881, 2197819418, 2147491883, 2155880460,
    2160074765, 2147487772, 2147491855, 2147491869, 2147491872, 2147491873, 2147491874,
    2147491879, 2147491880, 2147491882, 2147483699, 603981394, 0, 603981400, 0, 603981403,
    0, 4026531840, 603981397, 603982223, 0, 1073749520, 805306396, 0, 1073749768, 805306396,
    0, 603981406, 603981613, 0, 1073750032, 805306397, 0, 2852126724, 5308420, 196616, 2147487768,
    2147487745, 2147487770, 2155878435, 2155872284, 2147487795, 2147487796, 2147487767,
    603981425, 0, 4026531840, 4026531840, 4026531840, 2583756828, 4718593, 65538, 4026531840,
    0, 603981433, 0, 0, 2852192259, 4718593, 1, 2147483676, 268435456, 603981441, 0, 4026531840,
    2852126724, 4456449, 262162, 2164264976, 2164264977, 2197819394, 2147487773, 2147487776,
    2147487777, 2147487782, 2185232407, 2147487784, 2147487785, 2147487786, 2147487787,
    2168459276, 2105544717, 2147487778, 2147487759, 2147487783, 2147487788, 603981467,
    0, 603981473, 0, 4026531840, 603981470, 603980742, 0, 1073749272, 805306395, 0, 603981470,
    603981504, 0, 3087009466, 2499805211, 0, 327683, 4026531840, 0, 0, 603981476, 603981409,
    0, 603981476, 603981210, 0, 603981476, 603981360, 0, 603981476, 603981357, 0, 603981476,
    603981216, 0, 2499805211, 0, 65537, 4026531840, 0, 0, 2147483676, 603981525, 603981509,
    603981526, 0, 2852126724, 5308420, 196616, 2147487768, 2147487745, 2147487770, 2155876387,
    2155876380, 2147483699, 2147487796, 2147487767, 603981394, 0, 603981400, 0, 4026531840,
    0, 2852126728, 4784129, 262161, 2164260880, 2164260881, 2197815298, 2147483677, 2147483680,
    2147483681, 2147483686, 2147483687, 2147483688, 2147483689, 2147483690, 2147483691,
    2164260876, 2105540621, 2147483682, 2147483663, 2147491884, 2147483677, 603981597,
    603981556, 0, 2147483677, 603981597, 603981559, 0, 4026531840, 0, 603981357, 603981613,
    0, 603981562, 603982209, 0, 1073750280, 805306397, 0, 2852126724, 5242884, 262168, 2218786832,
    2164267009, 2218786818, 2231375907, 2147489844, 2202009617, 2147483686, 2202015767,
    2202015768, 2147483689, 2197821466, 2147483691, 2155872268, 2160066573, 2147489820,
    2147483663, 2147483677, 2147483680, 2147483681, 2147483682, 2147483687, 2147483688,
    2147483690, 2147487795, 603981403, 0, 4026531840, 4026531840, 4026531840, 3087009575,
    2499805213, 0, 65539, 4026531840, 0, 0, 603981597, 603981565, 0, 2499805213, 0, 65537, 4026531840,
    0, 0, 2852126732, 5373953, 262160, 2164269072, 2164269073, 2197823490, 2147483677, 2147491872,
    2147491873, 2147491878, 2147500071, 2147500072, 2147500073, 2147500074, 2147500075,
    2147491852, 2105548813, 2147491874, 2147491855, 2147483678, 603981681, 603981645, 0,
    2147483678, 603981681, 603981675, 0, 2147483678, 603981681, 603981678, 0, 4026531840,
    2583756829, 5505025, 65538, 4026531840, 0, 603981653, 0, 0, 2852192259, 5505025, 1, 2147483677,
    268435456, 603981661, 0, 4026531840, 603981664, 603984900, 0, 2852192259, 5570561, 1,
    2147483678, 268435456, 603981672, 0, 4026531840, 1073750552, 805306398, 0, 603981256,
    603981682, 0, 603981256, 603981986, 0, 0, 2852126728, 5636097, 196618, 2160074768, 2176851985,
    2176851970, 2147491872, 2147491852, 2147483661, 2147491878, 2147491855, 2147491873,
    2147491874, 2147483679, 603981915, 603981704, 0, 2147483679, 603981915, 603981758, 0,
    4026531840, 2583756813, 1703937, 65538, 4026531840, 0, 603981712, 0, 0, 2785017860, 5767172,
    262173, 2231369744, 2210398209, 2231369730, 2248146979, 2248146980, 2147483685, 2218790934,
    2218786839, 2218786840, 2147483689, 2214592538, 2147483691, 2168455180, 2168455181,
    2147483678, 2164260879, 2168455185, 2147483676, 2147483677, 2147483679, 2147483680,
    2147483681, 2147483682, 2147483686, 2147483687, 2147483688, 2147483690, 2147483699,
    2147483700, 603981750, 0, 603981755, 0, 4026531840, 0, 603981753, 603980728, 0, 805306399,
    0, 603981753, 603980698, 0, 2852126736, 5832705, 196617, 2160091152, 2164277265, 2172669954,
    2147483680, 2147495948, 2147487777, 2147512358, 2147504143, 2147491874, 603981788,
    0, 603981810, 0, 603981832, 0, 603981862, 0, 603981865, 0, 603981868, 0, 603981871, 0, 603981874,
    0, 4026531840, 0, 2583756832, 5898241, 65538, 4026531840, 0, 603981796, 0, 0, 2852192259,
    5898241, 1, 2147483680, 268435456, 603981804, 0, 4026531840, 603981807, 603981682, 0,
    1073751056, 805306399, 0, 2583756833, 5963777, 65538, 4026531840, 0, 603981818, 0, 0, 2852192259,
    5963777, 1, 2147483681, 268435456, 603981826, 0, 4026531840, 603981829, 603981682, 0,
    1073751312, 805306399, 0, 2583756834, 6029313, 65538, 4026531840, 0, 603981840, 0, 0, 2852192259,
    6029313, 1, 2147483682, 268435456, 603981848, 0, 4026531840, 603981851, 603981177, 0,
    2852192259, 5111809, 1, 2147483683, 268435456, 603981859, 0, 4026531840, 1073751576,
    805306399, 0, 603981753, 603980077, 0, 603981753, 603980511, 0, 603981753, 603980228,
    0, 603981753, 603980491, 0, 603981753, 603981931, 0, 2852126728, 4849668, 262169, 2147495952,
    2210410497, 2147495938, 2231384099, 2231373860, 2147491877, 2147495974, 2202021911,
    2202021912, 2147495977, 2197827610, 2147495979, 2168467468, 2168467469, 2147495966,
    2164273167, 2147495953, 2147495964, 2147495965, 2147483679, 2147495975, 2147495976,
    2147495978, 2147495987, 2147495988, 603981259, 0, 603981278, 0, 603981341, 0, 4026531840,
    4026531840, 4026531840, 0, 3087009893, 2499805215, 0, 65539, 4026531840, 0, 0, 603981915,
    603981877, 0, 2499805215, 0, 65537, 4026531840, 0, 0, 2852192261, 6094849, 1, 2147483686,
    2147483680, 268435456, 603981944, 603981941, 0, 4026531840, 1073752328, 805306400, 0,
    0, 2852126736, 5046273, 131077, 2151677964, 2147500048, 2155880450, 2147491855, 2147508262,
    2147483681, 603981985, 603981971, 0, 2147483681, 603981985, 603981976, 0, 2147483681,
    603981985, 603981979, 0, 2147483681, 603981985, 603981982, 0, 4026531840, 0, 603981974,
    603980077, 0, 805306401, 0, 603981974, 603980228, 0, 603981974, 603980491, 0, 603981974,
    603981931, 0, 0, 2583691303, 5701633, 327684, 4026531840, 0, 0, 0, 2147483682, 603982164,
    603982014, 0, 2147483682, 603982164, 603982044, 0, 2147483682, 603982164, 603982074,
    0, 2147483682, 603982164, 603982104, 0, 2147483682, 603982164, 603982134, 0, 0, 2583756839,
    6225921, 65538, 4026531840, 0, 603982022, 0, 0, 2852192259, 6225921, 1, 2147483687, 268435456,
    603982030, 0, 4026531840, 603982033, 603982165, 0, 2852192259, 5111809, 1, 2147483683,
    268435456, 603982041, 0, 4026531840, 1073752600, 805306402, 0, 2583756840, 6291457, 65538,
    4026531840, 0, 603982052, 0, 0, 2852192259, 6291457, 1, 2147483688, 268435456, 603982060,
    0, 4026531840, 603982063, 603982165, 0, 2852192259, 5111809, 1, 2147483683, 268435456,
    603982071, 0, 4026531840, 1073752856, 805306402, 0, 2583756841, 6356993, 65538, 4026531840,
    0, 603982082, 0, 0, 2852192259, 6356993, 1, 2147483689, 268435456, 603982090, 0, 4026531840,
    603982093, 603982165, 0, 2852192259, 5111809, 1, 2147483683, 268435456, 603982101, 0,
    4026531840, 1073753112, 805306402, 0, 2583756842, 6422529, 65538, 4026531840, 0, 603982112,
    0, 0, 2852192259, 6422529, 1, 2147483690, 268435456, 603982120, 0, 4026531840, 603982123,
    603982165, 0, 2852192259, 5111809, 1, 2147483683, 268435456, 603982131, 0, 4026531840,
    1073753368, 805306402, 0, 2583756843, 6488065, 65538, 4026531840, 0, 603982142, 0, 0, 2852192259,
    6488065, 1, 2147483691, 268435456, 603982150, 0, 4026531840, 603982153, 603981682, 0,
    2852192259, 5111809, 1, 2147483683, 268435456, 603982161, 0, 4026531840, 1073753624,
    805306402, 0, 0, 2147483683, 603982193, 603982170, 603981945, 0, 1073742600, 805306403,
    0, 2852126723, 4980737, 131078, 2151677964, 2147483664, 2160066562, 2151677967, 2147487779,
    2147483686, 603982187, 0, 4026531840, 4026531840, 0, 603982190, 603981945, 0, 1073742864,
    805306403, 0, 3087010171, 2499805219, 0, 65539, 4026531840, 0, 0, 603982193, 603982173,
    0, 2499805219, 0, 65537, 4026531840, 0, 0, 2852192261, 5439489, 1, 2147483692, 2147483684,
    268435456, 603982222, 603982219, 0, 4026531840, 1073753864, 805306404, 0, 0, 2147483685,
    603982358, 603982228, 603982359, 0, 2852126724, 6619137, 65538, 2147487794, 2147483693,
    603982238, 0, 603982342, 0, 4026531840, 2583756845, 6684673, 65538, 4026531840, 0, 603982246,
    0, 0, 2852192259, 6684673, 1, 2147483693, 268435456, 603982254, 0, 4026531840, 2852126726,
    6750209, 65539, 2155872302, 2147491889, 2147487792, 603982268, 0, 603982298, 0, 603982320,
    0, 4026531840, 0, 2583756846, 6815745, 65538, 4026531840, 0, 603982276, 0, 0, 2852192259,
    6815745, 1, 2147483694, 268435456, 603982284, 0, 4026531840, 603982287, 603982373, 0,
    2852192259, 6946817, 1, 2147483695, 268435456, 603982295, 0, 4026531840, 1073754152,
    805306405, 0, 2583756848, 7077889, 65538, 4026531840, 0, 603982306, 0, 0, 2852192259, 7077889,
    1, 2147483696, 268435456, 603982314, 0, 4026531840, 603982317, 603980595, 0, 1073754400,
    805306405, 0, 2583756849, 7143425, 65538, 4026531840, 0, 603982328, 0, 0, 2852192259, 7143425,
    1, 2147483697, 268435456, 603982336, 0, 4026531840, 603982339, 603980595, 0, 1073754656,
    805306405, 0, 2583756850, 7208961, 65538, 4026531840, 0, 603982350, 0, 0, 2852192259, 7208961,
    1, 2147483698, 268435456, 603982254, 0, 4026531840, 0, 2852192261, 3932161, 1, 2147483699,
    2147483686, 268435456, 603982372, 603982369, 0, 4026531840, 1073754888, 805306406, 0,
    0, 2852126732, 6881319, 131078, 2147491848, 2160066561, 2160074754, 2147491843, 2147491845,
    2147500078, 2147483687, 603982432, 603982395, 0, 2147483687, 603982432, 603982401, 0,
    2147483687, 603982432, 603982404, 0, 4026531840, 603982397, 0, 603982399, 0, 805306407,
    0, 603982399, 603982452, 0, 603982399, 603982543, 0, 2852126725, 7405607, 131078, 2147483656,
    2147483653, 2155872258, 2155872259, 2147487790, 2147491887, 603982423, 0, 603982429,
    0, 4026531840, 4026531840, 0, 603982426, 603982452, 0, 1073743632, 805306407, 0, 603982426,
    603982543, 0, 3087010414, 2768240646, 0, 65538, 2147483689, 2143295527, 603982432, 603982399,
    0, 603982432, 603982407, 0, 4026531840, 0, 2499805223, 0, 65537, 4026531840, 0, 0, 2852126736,
    2621479, 131076, 2147500040, 2147491845, 2147508226, 2147483651, 2147483688, 603982542,
    603982476, 0, 2147483688, 603982542, 603982494, 0, 2147483688, 603982542, 603982510,
    0, 2147483688, 603982542, 603982526, 0, 4026531840, 2583756803, 2031617, 65538, 4026531840,
    0, 603982484, 0, 0, 2852192259, 2031617, 1, 2147483651, 268435456, 603982492, 0, 4026531840,
    805306408, 0, 2583756805, 3604481, 65538, 4026531840, 0, 603982502, 0, 0, 2852192259, 3604481,
    1, 2147483653, 268435456, 603982492, 0, 4026531840, 2583756808, 65575, 65538, 4026531840,
    0, 603982518, 0, 0, 2852192259, 65575, 1, 2147483656, 268435456, 603982492, 0, 4026531840,
    2583756802, 2490369, 65538, 4026531840, 0, 603982534, 0, 0, 2852192259, 2490369, 1, 2147483650,
    268435456, 603982492, 0, 4026531840, 0, 2852192261, 6815745, 1, 2147483694, 2147483689,
    268435456, 603982567, 603982553, 0, 4026531840, 603982556, 603982373, 0, 2852192259,
    6946817, 1, 2147483695, 268435456, 603982564, 0, 4026531840, 1073755160, 805306409, 0,
    0, 2147483690, 603982598, 603982573, 603984958, 0, 603982576, 603980595, 0, 2852192259,
    6815745, 1, 2147483694, 268435456, 603982584, 0, 4026531840, 603982587, 603982373, 0,
    2852192259, 6946817, 1, 2147483695, 268435456, 603982595, 0, 4026531840, 1073755432,
    805306410, 0, 0, 2852192261, 7536644, 1, 2147483700, 2147483691, 268435456, 603982721,
    603982609, 0, 4026531840, 2852192259, 7602180, 1, 2147483701, 268435456, 603982617, 0,
    4026531840, 2852192259, 7667716, 1, 2147483678, 268435456, 603982625, 0, 4026531840,
    603982628, 603982911, 0, 2852126726, 7798788, 65539, 2147487824, 2151686171, 2147483703,
    603982642, 0, 603982688, 0, 603982702, 0, 4026531840, 0, 603982645, 603983901, 0, 2852126724,
    7929860, 65538, 2147483728, 2147487771, 603982655, 0, 603982669, 0, 4026531840, 603982658,
    603984011, 0, 2852192259, 8060932, 1, 2147483675, 268435456, 603982666, 0, 4026531840,
    1073755704, 805306411, 0, 2583756827, 8060932, 65538, 4026531840, 0, 603982677, 0, 0, 2852192259,
    8060932, 1, 2147483675, 268435456, 603982685, 0, 4026531840, 1073756208, 805306411, 0,
    603982691, 603984011, 0, 2852192259, 8060932, 1, 2147483675, 268435456, 603982699, 0,
    4026531840, 1073755952, 805306411, 0, 2583756827, 8060932, 65538, 4026531840, 0, 603982710,
    0, 0, 2852192259, 8060932, 1, 2147483675, 268435456, 603982718, 0, 4026531840, 1073756456,
    805306411, 0, 0, 2852126736, 8126468, 131076, 2147508278, 2147491845, 2139111438, 2147483651,
    2147483692, 603982895, 603982746, 0, 2147483692, 603982895, 603982764, 0, 2147483692,
    603982895, 603982780, 0, 2147483692, 603982895, 603982796, 0, 4026531840, 2583756803,
    8192004, 65538, 4026531840, 0, 603982754, 0, 0, 2852192259, 8192004, 1, 2147483651, 268435456,
    603982762, 0, 4026531840, 805306412, 0, 2583756805, 8323076, 65538, 4026531840, 0, 603982772,
    0, 0, 2852192259, 8323076, 1, 2147483653, 268435456, 603982762, 0, 4026531840, 2583756814,
    8388612, 65538, 4026531840, 0, 603982788, 0, 0, 2852192259, 8388612, 1, 2147483662, 268435456,
    603982762, 0, 4026531840, 2583756854, 8454148, 65538, 4026531840, 0, 603982804, 0, 0, 2852192259,
    8454148, 1, 2147483702, 268435456, 603982762, 0, 4026531840, 2852126728, 8519689, 131076,
    2147491894, 2147483653, 2139099150, 2147495939, 603982828, 0, 603982847, 0, 603982863,
    0, 603982879, 0, 4026531840, 2583756805, 8519689, 65538, 4026531840, 0, 603982836, 0, 0,
    2852192259, 8519689, 1, 2147483653, 268435456, 603982844, 0, 4026531840, 1073741840,
    805306412, 0, 2583756814, 8519689, 65538, 4026531840, 0, 603982855, 0, 0, 2852192259, 8519689,
    1, 2147483662, 268435456, 603982844, 0, 4026531840, 2583756854, 8519689, 65538, 4026531840,
    0, 603982871, 0, 0, 2852192259, 8519689, 1, 2147483702, 268435456, 603982844, 0, 4026531840,
    2583756803, 8519689, 65538, 4026531840, 0, 603982887, 0, 0, 2852192259, 8519689, 1, 2147483651,
    268435456, 603982844, 0, 4026531840, 3087010873, 2499805228, 0, 65539, 4026531840, 0,
    0, 603982895, 603982812, 0, 2499805228, 0, 65537, 4026531840, 0, 0, 2852126732, 7733252,
    196622, 2202026047, 2147500089, 2181054522, 2147500091, 2164277308, 2172665925, 2160083006,
    2118123575, 2147500100, 2160083014, 2147500106, 2147500109, 2147491918, 2147491919,
    2147483693, 603982952, 603982941, 0, 2147483693, 603982952, 603982946, 0, 2147483693,
    603982952, 603982949, 0, 4026531840, 603982944, 603984967, 0, 805306413, 0, 603982944,
    603985035, 0, 603982944, 603983022, 0, 0, 2852192261, 7864324, 1, 2147483703, 2147483694,
    268435456, 603982996, 603982963, 0, 4026531840, 2852192259, 8781828, 1, 2147483704, 268435456,
    603982971, 0, 4026531840, 603982974, 603982997, 0, 2852192259, 8912900, 1, 2147483682,
    268435456, 603982982, 0, 4026531840, 603982985, 603983022, 0, 2852192259, 8978436, 1,
    2147483683, 268435456, 603982993, 0, 4026531840, 1073756720, 805306414, 0, 0, 2852192261,
    8847364, 1, 2147483677, 2147483695, 268435456, 603983021, 603983007, 0, 4026531840, 603983010,
    603985079, 0, 2852192259, 7667716, 1, 2147483678, 268435456, 603983018, 0, 4026531840,
    1073756952, 805306415, 0, 0, 2852126736, 8716292, 196619, 2147491908, 2147508281, 2176843834,
    2147491899, 2130714684, 2168463429, 2155880510, 2147491903, 2147491910, 2147491914,
    2147500109, 2147483696, 603983197, 603983054, 0, 2147483696, 603983197, 603983073, 0,
    2147483696, 603983197, 603983171, 0, 2147483696, 603983197, 603983191, 0, 4026531840,
    0, 2583756858, 9109508, 65538, 4026531840, 0, 603983062, 0, 0, 2852192259, 9109508, 1, 2147483706,
    268435456, 603983070, 0, 4026531840, 1073750280, 805306416, 0, 603983076, 603985119,
    0, 2852126724, 9306116, 131078, 2147487824, 2164264961, 2155876387, 2143293467, 2147487799,
    2147483705, 603983090, 0, 603983156, 0, 4026531840, 2583756857, 9371652, 65538, 4026531840,
    0, 603983098, 0, 0, 2785017860, 9437188, 65538, 2147487827, 2143289401, 603983108, 0, 603983150,
    0, 4026531840, 2583756857, 9371652, 65538, 4026531840, 0, 603983116, 0, 0, 2852192259,
    9371652, 1, 2147483705, 268435456, 603983124, 0, 4026531840, 603983127, 603985209, 0,
    2852126724, 9306116, 131078, 2147487824, 2164264961, 2155876387, 2143293467, 2147487799,
    2147483705, 603983141, 0, 603983147, 0, 4026531840, 603983144, 603985287, 0, 1073757216,
    805306416, 0, 1073757720, 805306416, 0, 603983153, 603985287, 0, 1073757456, 805306416,
    0, 2852192258, 9175044, 131077, 2147483728, 2147483649, 2155872291, 2143289371, 2147483703,
    603983168, 0, 4026531840, 0, 1073757960, 805306416, 0, 603983174, 603985209, 0, 2852126724,
    9306116, 131078, 2147487824, 2164264961, 2155876387, 2143293467, 2147487799, 2147483705,
    603983188, 0, 603983168, 0, 4026531840, 603983153, 603985287, 0, 603983194, 603985287,
    0, 1073742600, 805306416, 0, 0, 2852126752, 9240580, 196616, 2147516484, 2147532870, 2147541066,
    2147483707, 2130714684, 2147524677, 2126528574, 2147508287, 2147483697, 603983723,
    603983242, 0, 2147483697, 603983723, 603983308, 0, 2147483697, 603983723, 603983453,
    0, 2147483697, 603983723, 603983499, 0, 2147483697, 603983723, 603983577, 0, 2147483697,
    603983723, 603983596, 0, 2147483697, 603983723, 603983615, 0, 2147483697, 603983723,
    603983669, 0, 4026531840, 2583756859, 9633796, 65538, 4026531840, 0, 603983250, 0, 0, 2852192259,
    9633796, 1, 2147483707, 268435456, 603983258, 0, 4026531840, 2852126724, 9699332, 65538,
    2147483699, 2143293445, 603983268, 0, 603983281, 0, 4026531840, 1610612738, 67112360,
    67112366, 0, 603983275, 603982223, 0, 1073758480, 805306417, 0, 603983275, 603982568,
    0, 2583756805, 8323076, 65538, 4026531840, 0, 603983289, 0, 0, 2852192259, 8323076, 1, 2147483653,
    268435456, 603983297, 0, 4026531840, 2852192259, 8323076, 1, 2147483653, 268435456, 603983305,
    0, 4026531840, 1073758232, 805306417, 0, 2583756860, 9830404, 65538, 4026531840, 0, 603983316,
    0, 0, 2852192259, 9830404, 1, 2147483708, 268435456, 603983324, 0, 4026531840, 2852126726,
    9895940, 65539, 2155872312, 2147491913, 2147487810, 603983338, 0, 603983368, 0, 603983423,
    0, 4026531840, 0, 2583756856, 8781828, 65538, 4026531840, 0, 603983346, 0, 0, 2852192259,
    8781828, 1, 2147483704, 268435456, 603983354, 0, 4026531840, 2852192259, 9961476, 1, 2147483709,
    268435456, 603983362, 0, 4026531840, 603983365, 603985317, 0, 1073758752, 805306417,
    0, 2583756866, 10027012, 65538, 4026531840, 0, 603983376, 0, 0, 2852192259, 10027012, 1,
    2147483714, 268435456, 603983384, 0, 4026531840, 2852192259, 10092548, 1, 2147483715,
    268435456, 603983392, 0, 4026531840, 2852126724, 10158081, 131078, 2164260876, 2147487749,
    2160066562, 2147483663, 2147483664, 2147483686, 603983406, 0, 603983420, 0, 4026531840,
    603983409, 603981945, 0, 2852192259, 8323076, 1, 2147483653, 268435456, 603983417, 0,
    4026531840, 1073759528, 805306417, 0, 603983409, 603985317, 0, 2583756873, 10289156,
    65538, 4026531840, 0, 603983431, 0, 0, 2852192259, 10289156, 1, 2147483721, 268435456,
    603983439, 0, 4026531840, 2852192259, 9961476, 1, 2147483709, 268435456, 603983447, 0,
    4026531840, 603983450, 603985317, 0, 1073760544, 805306417, 0, 2583756862, 10354692,
    65538, 4026531840, 0, 603983461, 0, 0, 2852192259, 10354692, 1, 2147483710, 268435456,
    603983469, 0, 4026531840, 2852192259, 9961476, 1, 2147483709, 268435456, 603983477, 0,
    4026531840, 2852192259, 8912900, 1, 2147483682, 268435456, 603983485, 0, 4026531840,
    603983488, 603985331, 0, 2852192259, 8978436, 1, 2147483683, 268435456, 603983496, 0,
    4026531840, 1073759016, 805306417, 0, 2583756863, 10485764, 65538, 4026531840, 0, 603983507,
    0, 0, 2852192259, 10485764, 1, 2147483711, 268435456, 603983515, 0, 4026531840, 2583691328,
    10551300, 131074, 4026531840, 0, 603983525, 0, 603983555, 0, 0, 2583756864, 10616836, 65538,
    4026531840, 0, 603983533, 0, 0, 2852192259, 10616836, 1, 2147483712, 268435456, 603983541,
    0, 4026531840, 2852192259, 10682372, 1, 2147483713, 268435456, 603983549, 0, 4026531840,
    603983552, 603983762, 0, 1073759264, 805306417, 0, 2583756865, 10682372, 65538, 4026531840,
    0, 603983563, 0, 0, 2852192259, 10682372, 1, 2147483713, 268435456, 603983571, 0, 4026531840,
    603983574, 603983762, 0, 1073761048, 805306417, 0, 2583756868, 10747908, 65538, 4026531840,
    0, 603983585, 0, 0, 2852192259, 10747908, 1, 2147483716, 268435456, 603983593, 0, 4026531840,
    1073759752, 805306417, 0, 2583756869, 10813444, 65538, 4026531840, 0, 603983604, 0, 0,
    2852192259, 10813444, 1, 2147483717, 268435456, 603983612, 0, 4026531840, 1073760008,
    805306417, 0, 2583756870, 10878980, 65538, 4026531840, 0, 603983623, 0, 0, 2852192259,
    10878980, 1, 2147483718, 268435456, 603983631, 0, 4026531840, 2852192259, 10944516, 1,
    2147483719, 268435456, 603983639, 0, 4026531840, 2852192259, 11010052, 1, 2147483720,
    268435456, 603983647, 0, 4026531840, 2852192259, 8847364, 1, 2147483677, 268435456, 603983655,
    0, 4026531840, 603983658, 603985079, 0, 2852192259, 7667716, 1, 2147483678, 268435456,
    603983666, 0, 4026531840, 1073760304, 805306417, 0, 2583756874, 11075588, 65538, 4026531840,
    0, 603983677, 0, 0, 2852192259, 11075588, 1, 2147483722, 268435456, 603983685, 0, 4026531840,
    2852126724, 11141124, 131079, 2147487824, 2164264961, 2155876387, 2143293467, 2155876407,
    2147487801, 2147483723, 603983701, 0, 603983720, 0, 4026531840, 0, 2583756875, 11206660,
    65538, 4026531840, 0, 603983709, 0, 0, 2852192259, 11206660, 1, 2147483723, 268435456,
    603983717, 0, 4026531840, 1073760784, 805306417, 0, 1073761288, 805306417, 0, 0, 2852192261,
    10420228, 1, 2147483724, 2147483698, 268435456, 603983761, 603983734, 0, 4026531840,
    2852192259, 8847364, 1, 2147483677, 268435456, 603983742, 0, 4026531840, 2852192259,
    7602180, 1, 2147483701, 268435456, 603983750, 0, 4026531840, 2852192259, 7667716, 1, 2147483678,
    268435456, 603983758, 0, 4026531840, 1073761568, 805306418, 0, 0, 2852192261, 8847364,
    1, 2147483677, 2147483699, 268435456, 603983786, 603983772, 0, 4026531840, 603983775,
    603985079, 0, 2852192259, 7667716, 1, 2147483678, 268435456, 603983783, 0, 4026531840,
    1073756952, 805306419, 0, 0, 2852192261, 9502724, 1, 2147483725, 2147483700, 268435456,
    603983803, 603983797, 0, 4026531840, 603983800, 603983724, 0, 1073761808, 805306420,
    0, 0, 2852126728, 8650756, 65538, 2147483726, 2147491919, 2147483701, 603983900, 603983818,
    0, 2147483701, 603983900, 603983859, 0, 4026531840, 2583756878, 11403268, 65538, 4026531840,
    0, 603983826, 0, 0, 2852192259, 11403268, 1, 2147483726, 268435456, 603983834, 0, 4026531840,
    603983837, 603983762, 0, 2852192259, 8912900, 1, 2147483682, 268435456, 603983845, 0,
    4026531840, 603983848, 603983022, 0, 2852192259, 8978436, 1, 2147483683, 268435456, 603983856,
    0, 4026531840, 1073762088, 805306421, 0, 2583756879, 11534340, 65538, 4026531840, 0, 603983867,
    0, 0, 2852192259, 11534340, 1, 2147483727, 268435456, 603983875, 0, 4026531840, 603983878,
    603983762, 0, 2852192259, 8912900, 1, 2147483682, 268435456, 603983886, 0, 4026531840,
    603983889, 603983022, 0, 2852192259, 8978436, 1, 2147483683, 268435456, 603983897, 0,
    4026531840, 1073762344, 805306421, 0, 0, 2852192261, 7864324, 1, 2147483703, 2147483702,
    268435456, 603983972, 603983911, 0, 4026531840, 2852192259, 10813444, 1, 2147483717,
    268435456, 603983919, 0, 4026531840, 603983922, 603983973, 0, 603983925, 603982911, 0,
    2852126726, 8585220, 131076, 2147487824, 2147491841, 2147483703, 2143297563, 603983939,
    0, 603983963, 0, 603983969, 0, 4026531840, 603983942, 603983901, 0, 2852126724, 11599876,
    65539, 2147483728, 2151682049, 2147487771, 603983954, 0, 603983960, 0, 4026531840, 0,
    603983957, 603984011, 0, 1073762608, 805306422, 0, 1073763112, 805306422, 0, 603983966,
    603984011, 0, 1073762856, 805306422, 0, 1073763360, 805306422, 0, 0, 2852192261, 10420228,
    1, 2147483724, 2147483703, 268435456, 603984010, 603983983, 0, 4026531840, 2852192259,
    8847364, 1, 2147483677, 268435456, 603983991, 0, 4026531840, 2852192259, 7602180, 1, 2147483701,
    268435456, 603983999, 0, 4026531840, 2852192259, 7667716, 1, 2147483678, 268435456, 603984007,
    0, 4026531840, 1073761568, 805306423, 0, 0, 2852192261, 7995396, 1, 2147483728, 2147483704,
    268435456, 603984053, 603984021, 0, 4026531840, 2852192259, 11730948, 1, 2147483729,
    268435456, 603984029, 0, 4026531840, 603984032, 603983762, 0, 2852126724, 11796484, 131076,
    2147487824, 2151682049, 2147483733, 2147487771, 603984044, 0, 603984050, 0, 4026531840,
    603984047, 603985387, 0, 1073763616, 805306424, 0, 1073763864, 805306424, 0, 0, 2147483705,
    603984107, 603984059, 603983973, 0, 603984062, 603982911, 0, 2852126726, 11927556, 65539,
    2147487824, 2151686145, 2147483703, 603984076, 0, 603984098, 0, 603984104, 0, 4026531840,
    0, 603984079, 603983901, 0, 2852126724, 11993092, 65538, 2147483728, 2147487745, 603984089,
    0, 603984095, 0, 4026531840, 603984092, 603984011, 0, 1073764128, 805306425, 0, 1073764632,
    805306425, 0, 603984101, 603984011, 0, 1073764376, 805306425, 0, 1073764880, 805306425,
    0, 0, 2852126740, 2621440, 131077, 2147491848, 2147516421, 2147483650, 2151702531, 2147500039,
    2147483711, 603984326, 603984138, 0, 2147483711, 603984326, 603984157, 0, 2147483711,
    603984326, 603984173, 0, 2147483711, 603984326, 603984189, 0, 2147483711, 603984326,
    603984205, 0, 4026531840, 0, 2583756802, 2490369, 65538, 4026531840, 0, 603984146, 0, 0,
    2852192259, 2490369, 1, 2147483650, 268435456, 603984154, 0, 4026531840, 1073742600,
    805306431, 0, 2583756808, 65575, 65538, 4026531840, 0, 603984165, 0, 0, 2852192259, 65575,
    1, 2147483656, 268435456, 603984154, 0, 4026531840, 2583756807, 65556, 65538, 4026531840,
    0, 603984181, 0, 0, 2852192259, 65556, 1, 2147483655, 268435456, 603984154, 0, 4026531840,
    2583756803, 2031617, 65538, 4026531840, 0, 603984197, 0, 0, 2852192259, 2031617, 1, 2147483651,
    268435456, 603984154, 0, 4026531840, 2583756805, 3604481, 65538, 4026531840, 0, 603984213,
    0, 0, 2852192259, 3604481, 1, 2147483653, 268435456, 603984154, 0, 4026531840, 2852126731,
    12124169, 131078, 2147487752, 2147500037, 2160066562, 2151690243, 2147491847, 2147504138,
    603984243, 0, 603984262, 0, 603984278, 0, 603984294, 0, 603984310, 0, 4026531840, 4026531840,
    0, 2583756802, 12058624, 65538, 4026531840, 0, 603984251, 0, 0, 2852192259, 12058624, 1,
    2147483650, 268435456, 603984259, 0, 4026531840, 1073742864, 805306431, 0, 2583756808,
    12058624, 65538, 4026531840, 0, 603984270, 0, 0, 2852192259, 12058624, 1, 2147483656, 268435456,
    603984259, 0, 4026531840, 2583756807, 12058624, 65538, 4026531840, 0, 603984286, 0, 0,
    2852192259, 12058624, 1, 2147483655, 268435456, 603984259, 0, 4026531840, 2583756803,
    12058624, 65538, 4026531840, 0, 603984302, 0, 0, 2852192259, 12058624, 1, 2147483651, 268435456,
    603984259, 0, 4026531840, 2583756805, 12058624, 65538, 4026531840, 0, 603984318, 0, 0,
    2852192259, 12058624, 1, 2147483653, 268435456, 603984259, 0, 4026531840, 3087012304,
    2499805247, 0, 65539, 4026531840, 0, 0, 603984326, 603984221, 0, 2499805247, 0, 65537, 4026531840,
    0, 0, 2852126728, 2228225, 65538, 2147483653, 2143297539, 2147483712, 603984554, 603984356,
    0, 2147483712, 603984554, 603984375, 0, 4026531840, 2583756805, 3604481, 65538, 4026531840,
    0, 603984364, 0, 0, 2852192259, 3604481, 1, 2147483653, 268435456, 603984372, 0, 4026531840,
    1073766152, 805306432, 0, 2583756803, 2031617, 65538, 4026531840, 0, 603984383, 0, 0, 2852192259,
    2031617, 1, 2147483651, 268435456, 603984372, 0, 4026531840, 2852126727, 12189696, 327712,
    2147493920, 2202013697, 2214602754, 2222991363, 2147493924, 2218786821, 2147493926,
    2222987271, 2227185672, 2147493929, 2147493930, 2147493931, 2147493900, 2147493901,
    2147493921, 2147493903, 2147493904, 2147493905, 2147493922, 2147493939, 2147493940,
    2147493923, 2147493925, 2147493911, 2147493912, 2147493927, 2147493914, 2147493928,
    2147493916, 2147493917, 2147493918, 2147493919, 603984435, 0, 4026531840, 603984452,
    0, 603984500, 0, 4026531840, 0, 1610612738, 67113527, 67113538, 0, 2852192259, 12189696,
    1, 2147483653, 268435456, 603984447, 0, 4026531840, 1073743632, 805306432, 0, 805306432,
    4026531840, 2583756807, 65556, 65538, 4026531840, 0, 603984460, 0, 0, 2785017858, 2293796,
    327713, 2147483680, 2202009601, 2231369730, 2147483683, 2147483684, 2231369733, 2147483686,
    2231369735, 2147483688, 2147483689, 2147483690, 2235566091, 2147483660, 2147483661,
    2147483681, 2147483663, 2147483664, 2147483665, 2147485714, 2147483699, 2147483700,
    2147485717, 2147483682, 2147483671, 2147483672, 2147483685, 2147483674, 2147483687,
    2147483676, 2147483677, 2147483678, 2147483679, 2147483691, 4026531840, 4026531840,
    4026531840, 0, 2852126724, 12255241, 262173, 2231375888, 2231375889, 2231375874, 2231369731,
    2248153124, 2147489829, 2147489830, 2218792983, 2181042184, 2147489833, 2214598682,
    2147489835, 2168461324, 2168461325, 2147489822, 2164267023, 2185238552, 2147489820,
    2147489821, 2147489823, 2147489824, 2147489825, 2147489826, 2164267043, 2147489831,
    2147489832, 2147489834, 2147489843, 2147489844, 603984538, 0, 4026531840, 4026531840,
    4026531840, 0, 2583756803, 12189696, 65538, 4026531840, 0, 603984546, 0, 0, 2852192259,
    12189696, 1, 2147483651, 268435456, 603984447, 0, 4026531840, 3087012532, 2499805248,
    0, 65539, 4026531840, 0, 0, 603984554, 603984391, 0, 2499805248, 0, 65537, 4026531840, 0,
    0, 2852126732, 2621441, 65539, 2147500034, 2151686147, 2147483653, 2147483713, 603984710,
    603984590, 0, 2147483713, 603984710, 603984609, 0, 2147483713, 603984710, 603984625,
    0, 4026531840, 0, 2583756805, 3604481, 65538, 4026531840, 0, 603984598, 0, 0, 2852192259,
    3604481, 1, 2147483653, 268435456, 603984606, 0, 4026531840, 1073766152, 805306433, 0,
    2583756803, 2031617, 65538, 4026531840, 0, 603984617, 0, 0, 2852192259, 2031617, 1, 2147483651,
    268435456, 603984606, 0, 4026531840, 2583756802, 2490369, 65538, 4026531840, 0, 603984633,
    0, 0, 2852192259, 2490369, 1, 2147483650, 268435456, 603984606, 0, 4026531840, 2852126727,
    3538944, 131078, 2147495944, 2160078849, 2147491842, 2155876355, 2147483653, 2147495943,
    603984659, 0, 603984678, 0, 603984694, 0, 4026531840, 4026531840, 0, 2583756805, 3538944,
    65538, 4026531840, 0, 603984667, 0, 0, 2852192259, 3538944, 1, 2147483653, 268435456, 603984675,
    0, 4026531840, 1073743632, 805306433, 0, 2583756803, 3538944, 65538, 4026531840, 0, 603984686,
    0, 0, 2852192259, 3538944, 1, 2147483651, 268435456, 603984675, 0, 4026531840, 2583756802,
    3538944, 65538, 4026531840, 0, 603984702, 0, 0, 2852192259, 3538944, 1, 2147483650, 268435456,
    603984675, 0, 4026531840, 3087012688, 2499805249, 0, 65539, 4026531840, 0, 0, 603984710,
    603984641, 0, 2499805249, 0, 65537, 4026531840, 0, 0, 2852126728, 2752513, 65538, 2147483650,
    2147491843, 2147483714, 603984824, 603984740, 0, 2147483714, 603984824, 603984759, 0,
    4026531840, 2583756802, 2490369, 65538, 4026531840, 0, 603984748, 0, 0, 2852192259, 2490369,
    1, 2147483650, 268435456, 603984756, 0, 4026531840, 1073766152, 805306434, 0, 2583756803,
    2031617, 65538, 4026531840, 0, 603984767, 0, 0, 2852192259, 2031617, 1, 2147483651, 268435456,
    603984756, 0, 4026531840, 2852126726, 12320769, 131076, 2147493908, 2147491859, 2147483650,
    2139099139, 603984789, 0, 603984808, 0, 4026531840, 4026531840, 4026531840, 2583756802,
    12320769, 65538, 4026531840, 0, 603984797, 0, 0, 2852192259, 12320769, 1, 2147483650, 268435456,
    603984805, 0, 4026531840, 1073743632, 805306434, 0, 2583756803, 12320769, 65538, 4026531840,
    0, 603984816, 0, 0, 2852192259, 12320769, 1, 2147483651, 268435456, 603984805, 0, 4026531840,
    3087012802, 2499805250, 0, 65539, 4026531840, 0, 0, 603984824, 603984775, 0, 2499805250,
    0, 65537, 4026531840, 0, 0, 2147483715, 603984866, 603984845, 603980770, 0, 1073766152,
    805306435, 0, 2852126723, 2621440, 131077, 2147483656, 2147483653, 2147483650, 2151677955,
    2147487751, 603984860, 0, 4026531840, 4026531840, 603984863, 603980770, 0, 1073743632,
    805306435, 0, 3087012844, 2499805251, 0, 65539, 4026531840, 0, 0, 603984866, 603984848,
    0, 2499805251, 0, 65537, 4026531840, 0, 0, 2147483716, 603984890, 603984887, 603981151,
    0, 1073766408, 805306436, 0, 0, 2147483717, 603984899, 603984896, 603980698, 0, 1073766664,
    805306437, 0, 0, 2147483718, 603984938, 603984905, 603981613, 0, 1073742600, 805306438,
    0, 2852126723, 12451841, 262161, 2168455184, 2155876353, 2206203906, 2193621009, 2147483677,
    2147483680, 2147483686, 2147483687, 2147483688, 2147483689, 2147483690, 2147483691,
    2147483660, 2109734925, 2147483681, 2147483663, 2147483682, 603984932, 0, 4026531840,
    4026531840, 603984935, 603981613, 0, 1073742864, 805306438, 0, 3087012920, 2768240646,
    0, 65538, 2151684126, 2147483718, 603984938, 603984908, 0, 603984938, 603984905, 0, 4026531840,
    0, 2499805254, 0, 65537, 4026531840, 0, 0, 2147483719, 603984966, 603984963, 603982359,
    0, 1073766920, 805306439, 0, 0, 2147483720, 603985019, 603984972, 603982953, 0, 1073742600,
    805306440, 0, 2852126724, 8585220, 131076, 2147487824, 2147487745, 2147483703, 2143293467,
    603984987, 0, 603985011, 0, 4026531840, 2583756855, 7864324, 65538, 4026531840, 0, 603984995,
    0, 0, 2785017859, 12648452, 65538, 2147483704, 2147487813, 603985005, 0, 4026531840, 4026531840,
    0, 603985008, 603982953, 0, 1073742864, 805306440, 0, 2852192257, 8585220, 65539, 2147483728,
    2151677953, 2147483675, 4026531840, 4026531840, 3087012997, 2499805256, 0, 65539, 4026531840,
    0, 0, 603985019, 603984975, 0, 2499805256, 0, 65537, 4026531840, 0, 0, 2147483721, 603985063,
    603985040, 603983804, 0, 1073742600, 805306441, 0, 2852126723, 11468804, 131078, 2147487824,
    2147487745, 2147483726, 2151682075, 2151682103, 2147483727, 603985057, 0, 4026531840,
    4026531840, 0, 603985060, 603983804, 0, 1073742864, 805306441, 0, 3087013041, 2499805257,
    0, 65539, 4026531840, 0, 0, 603985063, 603985043, 0, 2499805257, 0, 65537, 4026531840, 0,
    0, 2147483722, 603985103, 603985084, 603985317, 0, 1073742600, 805306442, 0, 2852126723,
    12976132, 65538, 2147487774, 2147483653, 603985097, 0, 4026531840, 4026531840, 0, 603985100,
    603985317, 0, 1073742864, 805306442, 0, 3087013081, 2499805258, 0, 65539, 4026531840,
    0, 0, 603985103, 603985087, 0, 2499805258, 0, 65537, 4026531840, 0, 0, 2147483723, 603985193,
    603985124, 603983198, 0, 1073742600, 805306443, 0, 2852126724, 9306116, 131078, 2147487824,
    2164264961, 2155876387, 2143293467, 2147487799, 2147483705, 603985141, 0, 603985183,
    0, 4026531840, 2583756857, 9306116, 65538, 4026531840, 0, 603985149, 0, 0, 2785017860,
    13107204, 65539, 2155876429, 2143289401, 2147489875, 603985161, 0, 4026531840, 4026531840,
    4026531840, 0, 2583756857, 13172737, 65538, 4026531840, 0, 603985169, 0, 0, 2852192259,
    13172737, 1, 2147483705, 268435456, 603985177, 0, 4026531840, 603985180, 603983198, 0,
    1073749272, 805306443, 0, 2852192257, 9175044, 131077, 2147483728, 2147483649, 2155872291,
    2143289371, 2147483703, 4026531840, 4026531840, 3087013171, 2499805259, 0, 65539, 4026531840,
    0, 0, 603985193, 603985127, 0, 2499805259, 0, 65537, 4026531840, 0, 0, 2147483724, 603985271,
    603985214, 603983787, 0, 1073742600, 805306444, 0, 2852126724, 9306116, 131078, 2147487824,
    2164264961, 2155876387, 2143293467, 2147487799, 2147483705, 603985231, 0, 603985183,
    0, 4026531840, 2583756857, 13172737, 65538, 4026531840, 0, 603985239, 0, 0, 2785017859,
    13303812, 65538, 2147487827, 2143289401, 603985249, 0, 4026531840, 4026531840, 0, 2583756857,
    13172737, 65538, 4026531840, 0, 603985257, 0, 0, 2852192259, 13172737, 1, 2147483705, 268435456,
    603985265, 0, 4026531840, 603985268, 603983787, 0, 1073749272, 805306444, 0, 3087013249,
    2499805260, 0, 65539, 4026531840, 0, 0, 603985271, 603985217, 0, 2499805260, 0, 65537, 4026531840,
    0, 0, 2852192261, 13369345, 1, 2147483705, 2147483725, 268435456, 603985316, 603985297,
    0, 4026531840, 2852192259, 13434881, 1, 2147483731, 268435456, 603985305, 0, 4026531840,
    2852192259, 13500417, 1, 2147483724, 268435456, 603985313, 0, 4026531840, 1073767192,
    805306445, 0, 0, 2852192261, 3604481, 1, 2147483653, 2147483726, 268435456, 603985330,
    603985327, 0, 4026531840, 1073767432, 805306446, 0, 0, 2147483727, 603985371, 603985336,
    603983724, 0, 1073742600, 805306447, 0, 2852126723, 13697028, 65538, 2147483732, 2147487779,
    603985349, 0, 4026531840, 4026531840, 0, 2583756884, 13631489, 65538, 4026531840, 0, 603985357,
    0, 0, 2852192259, 13631489, 1, 2147483732, 268435456, 603985365, 0, 4026531840, 603985368,
    603983724, 0, 1073749272, 805306447, 0, 3087013349, 2499805263, 0, 65539, 4026531840,
    0, 0, 603985371, 603985339, 0, 2499805263, 0, 65537, 4026531840, 0, 0, 2852192261, 13762561,
    1, 2147483733, 2147483728, 268435456, 603985403, 603985397, 0, 4026531840, 603985400,
    603983762, 0, 1073756944, 805306448, 0, 0
]);

function isTokenActive(token_id, row) {
    var index = (row * 3) + (token_id >> 5);;
    var shift = 1 << (31 & (token_id));;
    return (token_lookup[index] & shift) != 0;
}

function pre_scan(l, token) {
    var tk_length = l.token_length;;
    var bt_length = l.byte_length;;
    var type_cache = l._type;;
    scan(l, token, 0);
    var type_out = l._type;;
    l._type = type_cache;
    l.token_length = tk_length;
    l.byte_length = bt_length;
    return type_out > 0;
}

function scan_core(l, tk_row) {
    switch ((l.get_byte_at(l.byte_offset) & 127)) {
        case 35:
            {
                if (l.get_byte_at(l.byte_offset) == 35) {
                    if (isTokenActive(23, tk_row)) {
                        l.setToken(23, 1, 1);
                        return;
                    }
                }
            }
            break;
        case 36:
            {
                if (2 == compare(l, l.byte_offset, 38, 2, token_sequence_lookup)) {
                    if (l.get_byte_at(l.byte_offset + 2) == 109) {
                        if (isTokenActive(44, tk_row) && 3 == compare(l, l.byte_offset + 3, 41, 3, token_sequence_lookup)) {
                            l.setToken(44, 6, 6);
                            return;
                        }
                    } else if (l.get_byte_at(l.byte_offset + 2) == 111) {
                        if (isTokenActive(38, tk_row) && l.get_byte_at(l.byte_offset + 3) == 102) {
                            l.setToken(38, 4, 4);
                            return;
                        }
                    }
                }
            }
            break;
        case 40:
            {
                if (l.get_byte_at(l.byte_offset) == 40) {
                    if (l.get_byte_at(l.byte_offset + 1) == 69) {
                        if (l.get_byte_at(l.byte_offset + 2) == 88) {
                            if (isTokenActive(39, tk_row) && l.get_byte_at(l.byte_offset + 3) == 67) {
                                l.setToken(39, 4, 4);
                                return;
                            }
                        } else if (l.get_byte_at(l.byte_offset + 2) == 82) {
                            if (isTokenActive(40, tk_row) && l.get_byte_at(l.byte_offset + 3) == 82) {
                                l.setToken(40, 4, 4);
                                return;
                            }
                        }
                    } else if (l.get_byte_at(l.byte_offset + 1) == 73) {
                        if (isTokenActive(41, tk_row) && 2 == compare(l, l.byte_offset + 2, 183, 2, token_sequence_lookup)) {
                            l.setToken(41, 4, 4);
                            return;
                        }
                    } else if (l.get_byte_at(l.byte_offset + 1) == 82) {
                        if (l.get_byte_at(l.byte_offset + 2) == 83) {
                            if (isTokenActive(42, tk_row) && l.get_byte_at(l.byte_offset + 3) == 84) {
                                l.setToken(42, 4, 4);
                                return;
                            }
                        } else if (l.get_byte_at(l.byte_offset + 2) == 69) {
                            if (isTokenActive(43, tk_row) && l.get_byte_at(l.byte_offset + 3) == 68) {
                                l.setToken(43, 4, 4);
                                return;
                            }
                        }
                    } else if (l.get_byte_at(l.byte_offset + 1) == 42) {
                        if (isTokenActive(36, tk_row)) {
                            l.setToken(36, 2, 2);
                            return;
                        }
                    } else if (l.get_byte_at(l.byte_offset + 1) == 43) {
                        if (isTokenActive(37, tk_row)) {
                            l.setToken(37, 2, 2);
                            return;
                        }
                    } else if (isTokenActive(34, tk_row)) {
                        l.setToken(34, 1, 1);
                        return;
                    }
                }
            }
            break;
        case 41:
            {
                if (l.get_byte_at(l.byte_offset) == 41) {
                    if (isTokenActive(35, tk_row)) {
                        l.setToken(35, 1, 1);
                        return;
                    }
                }
            }
            break;
        case 42:
            {
                if (l.get_byte_at(l.byte_offset) == 42) {
                    if (l.get_byte_at(l.byte_offset + 1) == 47) {
                        if (isTokenActive(10, tk_row)) {
                            l.setToken(10, 2, 2);
                            return;
                        }
                    } else if (isTokenActive(25, tk_row)) {
                        l.setToken(25, 1, 1);
                        return;
                    }
                }
            }
            break;
        case 43:
            {
                if (l.get_byte_at(l.byte_offset) == 43) {
                    if (isTokenActive(26, tk_row) && l.get_byte_at(l.byte_offset + 1) == 62) {
                        l.setToken(26, 2, 2);
                        return;
                    }
                }
            }
            break;
        case 44:
            {
                if (l.get_byte_at(l.byte_offset) == 44) {
                    if (isTokenActive(84, tk_row)) {
                        l.setToken(84, 1, 1);
                        return;
                    }
                }
            }
            break;
        case 45:
            {
                if (l.get_byte_at(l.byte_offset) == 45) {
                    if (isTokenActive(53, tk_row) && token_production(l, 67111810, 44, 53, 2, states_buffer, scan) && l.byte_length > 1) {
                        return;
                    } else if (isTokenActive(54, tk_row)) {
                        l.setToken(54, 1, 1);
                        return;
                    }
                }
            }
            break;
        case 47:
            {
                if (l.get_byte_at(l.byte_offset) == 47) {
                    if (l.get_byte_at(l.byte_offset + 1) == 42) {
                        if (isTokenActive(86, tk_row) && token_production(l, 67108912, 2, 86, 4, states_buffer, scan) && l.byte_length > 2) {
                            return;
                        } else if (isTokenActive(9, tk_row)) {
                            l.setToken(9, 2, 2);
                            return;
                        }
                    }
                }
            }
            break;
        case 58:
            {
                if (l.get_byte_at(l.byte_offset) == 58) {
                    if (isTokenActive(22, tk_row) && l.get_byte_at(l.byte_offset + 1) == 58) {
                        l.setToken(22, 2, 2);
                        return;
                    }
                }
            }
            break;
        case 60:
            {
                if (l.get_byte_at(l.byte_offset) == 60) {
                    if (l.get_byte_at(l.byte_offset + 1) == 62) {
                        if (isTokenActive(24, tk_row)) {
                            l.setToken(24, 2, 2);
                            return;
                        }
                    } else if (l.get_byte_at(l.byte_offset + 1) == 61) {
                        if (isTokenActive(32, tk_row)) {
                            l.setToken(32, 2, 2);
                            return;
                        }
                    } else if (l.get_byte_at(l.byte_offset + 1) == 91) {
                        if (isTokenActive(52, tk_row)) {
                            l.setToken(52, 2, 2);
                            return;
                        }
                    }
                }
            }
            break;
        case 61:
            {
                if (l.get_byte_at(l.byte_offset) == 61) {
                    if (isTokenActive(49, tk_row) && l.get_byte_at(l.byte_offset + 1) == 62) {
                        l.setToken(49, 2, 2);
                        return;
                    }
                }
            }
            break;
        case 62:
            {
                if (l.get_byte_at(l.byte_offset) == 62) {
                    if (isTokenActive(27, tk_row)) {
                        l.setToken(27, 1, 1);
                        return;
                    }
                }
            }
            break;
        case 63:
            {
                if (l.get_byte_at(l.byte_offset) == 63) {
                    if (l.get_byte_at(l.byte_offset + 1) == 61) {
                        if (isTokenActive(33, tk_row)) {
                            l.setToken(33, 2, 2);
                            return;
                        }
                    } else if (isTokenActive(31, tk_row)) {
                        l.setToken(31, 1, 1);
                        return;
                    }
                }
            }
            break;
        case 64:
            {
                if (l.get_byte_at(l.byte_offset) == 64) {
                    if (l.get_byte_at(l.byte_offset + 1) == 73) {
                        if (l.get_byte_at(l.byte_offset + 2) == 71) {
                            if (isTokenActive(11, tk_row) && 4 == compare(l, l.byte_offset + 3, 6, 4, token_sequence_lookup)) {
                                l.setToken(11, 7, 7);
                                return;
                            }
                        } else if (l.get_byte_at(l.byte_offset + 2) == 77) {
                            if (isTokenActive(18, tk_row) && 4 == compare(l, l.byte_offset + 3, 124, 4, token_sequence_lookup)) {
                                l.setToken(18, 7, 7);
                                return;
                            }
                        }
                    } else if (l.get_byte_at(l.byte_offset + 1) == 69) {
                        if (isTokenActive(21, tk_row) && 5 == compare(l, l.byte_offset + 2, 169, 5, token_sequence_lookup)) {
                            l.setToken(21, 7, 7);
                            return;
                        }
                    }
                }
            }
            break;
        case 65:
            {
                if (l.get_byte_at(l.byte_offset) == 65) {
                    if (l.get_byte_at(l.byte_offset + 1) == 83) {
                        if (isTokenActive(13, tk_row) && token_production(l, 67109187, 9, 13, 1, states_buffer, scan) && l.byte_length > 2) {
                            return;
                        } else if (isTokenActive(53, tk_row) && token_production(l, 67111810, 44, 53, 2, states_buffer, scan) && l.byte_length > 2) {
                            return;
                        } else if (isTokenActive(3, tk_row) && l.isUniID() && l.byte_length > 2) {
                            l._type = 3;
                            return;
                        } else if (isTokenActive(20, tk_row)) {
                            l.setToken(20, 2, 2);
                            return;
                        }
                    }
                }
            }
            break;
        case 91:
            {
                if (l.get_byte_at(l.byte_offset) == 91) {
                    if (isTokenActive(29, tk_row)) {
                        l.setToken(29, 1, 1);
                        return;
                    }
                }
            }
            break;
        case 92:
            {
                if (l.get_byte_at(l.byte_offset) == 92) {
                    if (isTokenActive(16, tk_row)) {
                        l.setToken(16, 1, 1);
                        return;
                    }
                }
            }
            break;
        case 93:
            {
                if (l.get_byte_at(l.byte_offset) == 93) {
                    if (isTokenActive(30, tk_row)) {
                        l.setToken(30, 1, 1);
                        return;
                    }
                }
            }
            break;
        case 94:
            {
                if (l.get_byte_at(l.byte_offset) == 94) {
                    if (isTokenActive(48, tk_row)) {
                        l.setToken(48, 1, 1);
                        return;
                    }
                }
            }
            break;
        case 95:
            {
                if (l.get_byte_at(l.byte_offset) == 95) {
                    if (isTokenActive(13, tk_row) && token_production(l, 67109187, 9, 13, 1, states_buffer, scan) && l.byte_length > 1) {
                        return;
                    } else if (isTokenActive(53, tk_row) && token_production(l, 67111810, 44, 53, 2, states_buffer, scan) && l.byte_length > 1) {
                        return;
                    } else if (isTokenActive(14, tk_row)) {
                        l.setToken(14, 1, 1);
                        return;
                    }
                }
            }
            break;
        case 97:
            {
                if (l.get_byte_at(l.byte_offset) == 97) {
                    if (l.get_byte_at(l.byte_offset + 1) == 115) {
                        if (l.get_byte_at(l.byte_offset + 2) == 115) {
                            if (3 == compare(l, l.byte_offset + 3, 66, 3, token_sequence_lookup)) {
                                if (isTokenActive(13, tk_row) && token_production(l, 67109187, 9, 13, 1, states_buffer, scan) && l.byte_length > 6) {
                                    return;
                                } else if (isTokenActive(53, tk_row) && token_production(l, 67111810, 44, 53, 2, states_buffer, scan) && l.byte_length > 6) {
                                    return;
                                } else if (isTokenActive(3, tk_row) && l.isUniID() && l.byte_length > 6) {
                                    l._type = 3;
                                    return;
                                } else if (isTokenActive(79, tk_row)) {
                                    l.setToken(79, 6, 6);
                                    return;
                                }
                            }
                        } else if (isTokenActive(13, tk_row) && token_production(l, 67109187, 9, 13, 1, states_buffer, scan) && l.byte_length > 2) {
                            return;
                        } else if (isTokenActive(53, tk_row) && token_production(l, 67111810, 44, 53, 2, states_buffer, scan) && l.byte_length > 2) {
                            return;
                        } else if (isTokenActive(3, tk_row) && l.isUniID() && l.byte_length > 2) {
                            l._type = 3;
                            return;
                        } else if (isTokenActive(19, tk_row)) {
                            l.setToken(19, 2, 2);
                            return;
                        }
                    }
                }
            }
            break;
        case 98:
            {
                if (l.get_byte_at(l.byte_offset) == 98) {
                    if (3 == compare(l, l.byte_offset + 1, 84, 3, token_sequence_lookup)) {
                        if (isTokenActive(13, tk_row) && token_production(l, 67109187, 9, 13, 1, states_buffer, scan) && l.byte_length > 4) {
                            return;
                        } else if (isTokenActive(53, tk_row) && token_production(l, 67111810, 44, 53, 2, states_buffer, scan) && l.byte_length > 4) {
                            return;
                        } else if (isTokenActive(3, tk_row) && l.isUniID() && l.byte_length > 4) {
                            l._type = 3;
                            return;
                        } else if (isTokenActive(64, tk_row)) {
                            l.setToken(64, 4, 4);
                            return;
                        }
                    }
                }
            }
            break;
        case 99:
            {
                if (l.get_byte_at(l.byte_offset) == 99) {
                    if (6 == compare(l, l.byte_offset + 1, 108, 6, token_sequence_lookup)) {
                        if (isTokenActive(13, tk_row) && token_production(l, 67109187, 9, 13, 1, states_buffer, scan) && l.byte_length > 7) {
                            return;
                        } else if (isTokenActive(53, tk_row) && token_production(l, 67111810, 44, 53, 2, states_buffer, scan) && l.byte_length > 7) {
                            return;
                        } else if (isTokenActive(3, tk_row) && l.isUniID() && l.byte_length > 7) {
                            l._type = 3;
                            return;
                        } else if (isTokenActive(74, tk_row)) {
                            l.setToken(74, 7, 7);
                            return;
                        }
                    }
                }
            }
            break;
        case 101:
            {
                if (l.get_byte_at(l.byte_offset) == 101) {
                    if (l.get_byte_at(l.byte_offset + 1) == 120) {
                        if (6 == compare(l, l.byte_offset + 2, 115, 6, token_sequence_lookup)) {
                            if (isTokenActive(13, tk_row) && token_production(l, 67109187, 9, 13, 1, states_buffer, scan) && l.byte_length > 8) {
                                return;
                            } else if (isTokenActive(53, tk_row) && token_production(l, 67111810, 44, 53, 2, states_buffer, scan) && l.byte_length > 8) {
                                return;
                            } else if (isTokenActive(3, tk_row) && l.isUniID() && l.byte_length > 8) {
                                l._type = 3;
                                return;
                            } else if (isTokenActive(81, tk_row)) {
                                l.setToken(81, 8, 8);
                                return;
                            }
                        }
                    } else if (l.get_byte_at(l.byte_offset + 1) == 114) {
                        if (l.get_byte_at(l.byte_offset + 2) == 104) {
                            if (isTokenActive(13, tk_row) && token_production(l, 67109187, 9, 13, 1, states_buffer, scan) && l.byte_length > 3) {
                                return;
                            } else if (isTokenActive(53, tk_row) && token_production(l, 67111810, 44, 53, 2, states_buffer, scan) && l.byte_length > 3) {
                                return;
                            } else if (isTokenActive(3, tk_row) && l.isUniID() && l.byte_length > 3) {
                                l._type = 3;
                                return;
                            } else if (isTokenActive(82, tk_row)) {
                                l.setToken(82, 3, 3);
                                return;
                            }
                        }
                    }
                }
            }
            break;
        case 102:
            {
                if (l.get_byte_at(l.byte_offset) == 102) {
                    if (l.get_byte_at(l.byte_offset + 1) == 111) {
                        if (2 == compare(l, l.byte_offset + 2, 51, 2, token_sequence_lookup)) {
                            if (isTokenActive(13, tk_row) && token_production(l, 67109187, 9, 13, 1, states_buffer, scan) && l.byte_length > 4) {
                                return;
                            } else if (isTokenActive(53, tk_row) && token_production(l, 67111810, 44, 53, 2, states_buffer, scan) && l.byte_length > 4) {
                                return;
                            } else if (isTokenActive(3, tk_row) && l.isUniID() && l.byte_length > 4) {
                                l._type = 3;
                                return;
                            } else if (isTokenActive(62, tk_row)) {
                                l.setToken(62, 4, 4);
                                return;
                            }
                        }
                    } else if (l.get_byte_at(l.byte_offset + 1) == 97) {
                        if (2 == compare(l, l.byte_offset + 2, 145, 2, token_sequence_lookup)) {
                            if (isTokenActive(13, tk_row) && token_production(l, 67109187, 9, 13, 1, states_buffer, scan) && l.byte_length > 4) {
                                return;
                            } else if (isTokenActive(53, tk_row) && token_production(l, 67111810, 44, 53, 2, states_buffer, scan) && l.byte_length > 4) {
                                return;
                            } else if (isTokenActive(3, tk_row) && l.isUniID() && l.byte_length > 4) {
                                l._type = 3;
                                return;
                            } else if (isTokenActive(69, tk_row)) {
                                l.setToken(69, 4, 4);
                                return;
                            }
                        }
                    } else if (l.get_byte_at(l.byte_offset + 1) == 58) {
                        if (isTokenActive(51, tk_row)) {
                            l.setToken(51, 2, 2);
                            return;
                        }
                    }
                }
            }
            break;
        case 103:
            {
                if (l.get_byte_at(l.byte_offset) == 103) {
                    if (l.get_byte_at(l.byte_offset + 1) == 111) {
                        if (2 == compare(l, l.byte_offset + 2, 12, 2, token_sequence_lookup)) {
                            if (isTokenActive(13, tk_row) && token_production(l, 67109187, 9, 13, 1, states_buffer, scan) && l.byte_length > 4) {
                                return;
                            } else if (isTokenActive(53, tk_row) && token_production(l, 67111810, 44, 53, 2, states_buffer, scan) && l.byte_length > 4) {
                                return;
                            } else if (isTokenActive(3, tk_row) && l.isUniID() && l.byte_length > 4) {
                                l._type = 3;
                                return;
                            } else if (isTokenActive(77, tk_row)) {
                                l.setToken(77, 4, 4);
                                return;
                            }
                        }
                    } else if (l.get_byte_at(l.byte_offset + 1) == 58) {
                        if (isTokenActive(12, tk_row)) {
                            l.setToken(12, 2, 2);
                            return;
                        }
                    }
                }
            }
            break;
        case 105:
            {
                if (l.get_byte_at(l.byte_offset) == 105) {
                    if (l.get_byte_at(l.byte_offset + 1) == 100) {
                        if (isTokenActive(13, tk_row) && token_production(l, 67109187, 9, 13, 1, states_buffer, scan) && l.byte_length > 2) {
                            return;
                        } else if (isTokenActive(53, tk_row) && token_production(l, 67111810, 44, 53, 2, states_buffer, scan) && l.byte_length > 2) {
                            return;
                        } else if (isTokenActive(3, tk_row) && l.isUniID() && l.byte_length > 2) {
                            l._type = 3;
                            return;
                        } else if (isTokenActive(67, tk_row)) {
                            l.setToken(67, 2, 2);
                            return;
                        }
                    }
                }
            }
            break;
        case 110:
            {
                if (l.get_byte_at(l.byte_offset) == 110) {
                    if (2 == compare(l, l.byte_offset + 1, 95, 2, token_sequence_lookup)) {
                        if (l.get_byte_at(l.byte_offset + 3) == 104) {
                            if (3 == compare(l, l.byte_offset + 4, 98, 3, token_sequence_lookup)) {
                                if (isTokenActive(13, tk_row) && token_production(l, 67109187, 9, 13, 1, states_buffer, scan) && l.byte_length > 7) {
                                    return;
                                } else if (isTokenActive(53, tk_row) && token_production(l, 67111810, 44, 53, 2, states_buffer, scan) && l.byte_length > 7) {
                                    return;
                                } else if (isTokenActive(3, tk_row) && l.isUniID() && l.byte_length > 7) {
                                    l._type = 3;
                                    return;
                                } else if (isTokenActive(75, tk_row)) {
                                    l.setToken(75, 7, 7);
                                    return;
                                }
                            }
                        } else if (isTokenActive(13, tk_row) && token_production(l, 67109187, 9, 13, 1, states_buffer, scan) && l.byte_length > 3) {
                            return;
                        } else if (isTokenActive(53, tk_row) && token_production(l, 67111810, 44, 53, 2, states_buffer, scan) && l.byte_length > 3) {
                            return;
                        } else if (isTokenActive(3, tk_row) && l.isUniID() && l.byte_length > 3) {
                            l._type = 3;
                            return;
                        } else if (isTokenActive(70, tk_row)) {
                            l.setToken(70, 3, 3);
                            return;
                        }
                    }
                }
            }
            break;
        case 111:
            {
                if (l.get_byte_at(l.byte_offset) == 111) {
                    if (l.get_byte_at(l.byte_offset + 1) == 110) {
                        if (isTokenActive(13, tk_row) && token_production(l, 67109187, 9, 13, 1, states_buffer, scan) && l.byte_length > 2) {
                            return;
                        } else if (isTokenActive(53, tk_row) && token_production(l, 67111810, 44, 53, 2, states_buffer, scan) && l.byte_length > 2) {
                            return;
                        } else if (isTokenActive(3, tk_row) && l.isUniID() && l.byte_length > 2) {
                            l._type = 3;
                            return;
                        } else if (isTokenActive(55, tk_row)) {
                            l.setToken(55, 2, 2);
                            return;
                        }
                    }
                }
            }
            break;
        case 112:
            {
                if (l.get_byte_at(l.byte_offset) == 112) {
                    if (l.get_byte_at(l.byte_offset + 1) == 114) {
                        if (2 == compare(l, l.byte_offset + 2, 81, 2, token_sequence_lookup)) {
                            if (isTokenActive(13, tk_row) && token_production(l, 67109187, 9, 13, 1, states_buffer, scan) && l.byte_length > 4) {
                                return;
                            } else if (isTokenActive(53, tk_row) && token_production(l, 67111810, 44, 53, 2, states_buffer, scan) && l.byte_length > 4) {
                                return;
                            } else if (isTokenActive(3, tk_row) && l.isUniID() && l.byte_length > 4) {
                                l._type = 3;
                                return;
                            } else if (isTokenActive(56, tk_row)) {
                                l.setToken(56, 4, 4);
                                return;
                            }
                        }
                    } else if (l.get_byte_at(l.byte_offset + 1) == 97) {
                        if (2 == compare(l, l.byte_offset + 2, 162, 2, token_sequence_lookup)) {
                            if (isTokenActive(13, tk_row) && token_production(l, 67109187, 9, 13, 1, states_buffer, scan) && l.byte_length > 4) {
                                return;
                            } else if (isTokenActive(53, tk_row) && token_production(l, 67111810, 44, 53, 2, states_buffer, scan) && l.byte_length > 4) {
                                return;
                            } else if (isTokenActive(3, tk_row) && l.isUniID() && l.byte_length > 4) {
                                l._type = 3;
                                return;
                            } else if (isTokenActive(68, tk_row)) {
                                l.setToken(68, 4, 4);
                                return;
                            }
                        }
                    } else if (l.get_byte_at(l.byte_offset + 1) == 101) {
                        if (2 == compare(l, l.byte_offset + 2, 224, 2, token_sequence_lookup)) {
                            if (isTokenActive(13, tk_row) && token_production(l, 67109187, 9, 13, 1, states_buffer, scan) && l.byte_length > 4) {
                                return;
                            } else if (isTokenActive(53, tk_row) && token_production(l, 67111810, 44, 53, 2, states_buffer, scan) && l.byte_length > 4) {
                                return;
                            } else if (isTokenActive(3, tk_row) && l.isUniID() && l.byte_length > 4) {
                                l._type = 3;
                                return;
                            } else if (isTokenActive(78, tk_row)) {
                                l.setToken(78, 4, 4);
                                return;
                            }
                        }
                    }
                }
            }
            break;
        case 114:
            {
                if (l.get_byte_at(l.byte_offset) == 114) {
                    if (l.get_byte_at(l.byte_offset + 1) == 101) {
                        if (l.get_byte_at(l.byte_offset + 2) == 116) {
                            if (3 == compare(l, l.byte_offset + 3, 74, 3, token_sequence_lookup)) {
                                if (isTokenActive(13, tk_row) && token_production(l, 67109187, 9, 13, 1, states_buffer, scan) && l.byte_length > 6) {
                                    return;
                                } else if (isTokenActive(53, tk_row) && token_production(l, 67111810, 44, 53, 2, states_buffer, scan) && l.byte_length > 6) {
                                    return;
                                } else if (isTokenActive(3, tk_row) && l.isUniID() && l.byte_length > 6) {
                                    l._type = 3;
                                    return;
                                } else if (isTokenActive(50, tk_row)) {
                                    l.setToken(50, 6, 6);
                                    return;
                                }
                            }
                        } else if (l.get_byte_at(l.byte_offset + 2) == 100) {
                            if (3 == compare(l, l.byte_offset + 3, 157, 3, token_sequence_lookup)) {
                                if (isTokenActive(13, tk_row) && token_production(l, 67109187, 9, 13, 1, states_buffer, scan) && l.byte_length > 6) {
                                    return;
                                } else if (isTokenActive(53, tk_row) && token_production(l, 67111810, 44, 53, 2, states_buffer, scan) && l.byte_length > 6) {
                                    return;
                                } else if (isTokenActive(3, tk_row) && l.isUniID() && l.byte_length > 6) {
                                    l._type = 3;
                                    return;
                                } else if (isTokenActive(59, tk_row)) {
                                    l.setToken(59, 6, 6);
                                    return;
                                }
                            }
                        } else if (l.get_byte_at(l.byte_offset + 2) == 112) {
                            if (3 == compare(l, l.byte_offset + 3, 219, 3, token_sequence_lookup)) {
                                if (isTokenActive(13, tk_row) && token_production(l, 67109187, 9, 13, 1, states_buffer, scan) && l.byte_length > 6) {
                                    return;
                                } else if (isTokenActive(53, tk_row) && token_production(l, 67111810, 44, 53, 2, states_buffer, scan) && l.byte_length > 6) {
                                    return;
                                } else if (isTokenActive(3, tk_row) && l.isUniID() && l.byte_length > 6) {
                                    l._type = 3;
                                    return;
                                } else if (isTokenActive(83, tk_row)) {
                                    l.setToken(83, 6, 6);
                                    return;
                                }
                            }
                        }
                    } else if (isTokenActive(13, tk_row) && token_production(l, 67109187, 9, 13, 1, states_buffer, scan) && l.byte_length > 1) {
                        return;
                    } else if (isTokenActive(53, tk_row) && token_production(l, 67111810, 44, 53, 2, states_buffer, scan) && l.byte_length > 1) {
                        return;
                    } else if (isTokenActive(3, tk_row) && l.isUniID() && l.byte_length > 1) {
                        l._type = 3;
                        return;
                    } else if (isTokenActive(45, tk_row)) {
                        l.setToken(45, 1, 1);
                        return;
                    }
                }
            }
            break;
        case 115:
            {
                if (l.get_byte_at(l.byte_offset) == 115) {
                    if (l.get_byte_at(l.byte_offset + 1) == 121) {
                        if (6 == compare(l, l.byte_offset + 2, 56, 6, token_sequence_lookup)) {
                            if (isTokenActive(80, tk_row)) {
                                l.setToken(80, 8, 8);
                                return;
                            }
                        }
                    } else if (l.get_byte_at(l.byte_offset + 1) == 107) {
                        if (5 == compare(l, l.byte_offset + 2, 149, 5, token_sequence_lookup)) {
                            if (isTokenActive(13, tk_row) && token_production(l, 67109187, 9, 13, 1, states_buffer, scan) && l.byte_length > 7) {
                                return;
                            } else if (isTokenActive(53, tk_row) && token_production(l, 67111810, 44, 53, 2, states_buffer, scan) && l.byte_length > 7) {
                                return;
                            } else if (isTokenActive(3, tk_row) && l.isUniID() && l.byte_length > 7) {
                                l._type = 3;
                                return;
                            } else if (isTokenActive(85, tk_row)) {
                                l.setToken(85, 7, 7);
                                return;
                            }
                        }
                    } else if (l.get_byte_at(l.byte_offset + 1) == 99) {
                        if (l.get_byte_at(l.byte_offset + 2) == 111) {
                            if (2 == compare(l, l.byte_offset + 3, 202, 2, token_sequence_lookup)) {
                                if (l.get_byte_at(l.byte_offset + 5) == 115) {
                                    if (isTokenActive(13, tk_row) && token_production(l, 67109187, 9, 13, 1, states_buffer, scan) && l.byte_length > 6) {
                                        return;
                                    } else if (isTokenActive(53, tk_row) && token_production(l, 67111810, 44, 53, 2, states_buffer, scan) && l.byte_length > 6) {
                                        return;
                                    } else if (isTokenActive(3, tk_row) && l.isUniID() && l.byte_length > 6) {
                                        l._type = 3;
                                        return;
                                    } else if (isTokenActive(72, tk_row)) {
                                        l.setToken(72, 6, 6);
                                        return;
                                    }
                                } else if (isTokenActive(13, tk_row) && token_production(l, 67109187, 9, 13, 1, states_buffer, scan) && l.byte_length > 5) {
                                    return;
                                } else if (isTokenActive(53, tk_row) && token_production(l, 67111810, 44, 53, 2, states_buffer, scan) && l.byte_length > 5) {
                                    return;
                                } else if (isTokenActive(3, tk_row) && l.isUniID() && l.byte_length > 5) {
                                    l._type = 3;
                                    return;
                                } else if (isTokenActive(73, tk_row)) {
                                    l.setToken(73, 5, 5);
                                    return;
                                }
                            }
                        } else if (l.get_byte_at(l.byte_offset + 2) == 97) {
                            if (l.get_byte_at(l.byte_offset + 3) == 110) {
                                if (isTokenActive(13, tk_row) && token_production(l, 67109187, 9, 13, 1, states_buffer, scan) && l.byte_length > 4) {
                                    return;
                                } else if (isTokenActive(53, tk_row) && token_production(l, 67111810, 44, 53, 2, states_buffer, scan) && l.byte_length > 4) {
                                    return;
                                } else if (isTokenActive(3, tk_row) && l.isUniID() && l.byte_length > 4) {
                                    l._type = 3;
                                    return;
                                } else if (isTokenActive(63, tk_row)) {
                                    l.setToken(63, 4, 4);
                                    return;
                                }
                            }
                        }
                    } else if (l.get_byte_at(l.byte_offset + 1) == 116) {
                        if (3 == compare(l, l.byte_offset + 2, 206, 3, token_sequence_lookup)) {
                            if (isTokenActive(13, tk_row) && token_production(l, 67109187, 9, 13, 1, states_buffer, scan) && l.byte_length > 5) {
                                return;
                            } else if (isTokenActive(53, tk_row) && token_production(l, 67111810, 44, 53, 2, states_buffer, scan) && l.byte_length > 5) {
                                return;
                            } else if (isTokenActive(3, tk_row) && l.isUniID() && l.byte_length > 5) {
                                l._type = 3;
                                return;
                            } else if (isTokenActive(76, tk_row)) {
                                l.setToken(76, 5, 5);
                                return;
                            }
                        }
                    } else if (l.get_byte_at(l.byte_offset + 1) == 101) {
                        if (l.get_byte_at(l.byte_offset + 2) == 116) {
                            if (isTokenActive(13, tk_row) && token_production(l, 67109187, 9, 13, 1, states_buffer, scan) && l.byte_length > 3) {
                                return;
                            } else if (isTokenActive(53, tk_row) && token_production(l, 67111810, 44, 53, 2, states_buffer, scan) && l.byte_length > 3) {
                                return;
                            } else if (isTokenActive(3, tk_row) && l.isUniID() && l.byte_length > 3) {
                                l._type = 3;
                                return;
                            } else if (isTokenActive(60, tk_row)) {
                                l.setToken(60, 3, 3);
                                return;
                            }
                        }
                    }
                }
            }
            break;
        case 116:
            {
                if (l.get_byte_at(l.byte_offset) == 116) {
                    if (l.get_byte_at(l.byte_offset + 1) == 111) {
                        if (l.get_byte_at(l.byte_offset + 2) == 107) {
                            if (2 == compare(l, l.byte_offset + 3, 18, 2, token_sequence_lookup)) {
                                if (isTokenActive(13, tk_row) && token_production(l, 67109187, 9, 13, 1, states_buffer, scan) && l.byte_length > 5) {
                                    return;
                                } else if (isTokenActive(53, tk_row) && token_production(l, 67111810, 44, 53, 2, states_buffer, scan) && l.byte_length > 5) {
                                    return;
                                } else if (isTokenActive(3, tk_row) && l.isUniID() && l.byte_length > 5) {
                                    l._type = 3;
                                    return;
                                } else if (isTokenActive(66, tk_row)) {
                                    l.setToken(66, 5, 5);
                                    return;
                                }
                            }
                        } else if (isTokenActive(13, tk_row) && token_production(l, 67109187, 9, 13, 1, states_buffer, scan) && l.byte_length > 2) {
                            return;
                        } else if (isTokenActive(53, tk_row) && token_production(l, 67111810, 44, 53, 2, states_buffer, scan) && l.byte_length > 2) {
                            return;
                        } else if (isTokenActive(3, tk_row) && l.isUniID() && l.byte_length > 2) {
                            l._type = 3;
                            return;
                        } else if (isTokenActive(61, tk_row)) {
                            l.setToken(61, 2, 2);
                            return;
                        }
                    } else if (l.get_byte_at(l.byte_offset + 1) == 104) {
                        if (2 == compare(l, l.byte_offset + 2, 132, 2, token_sequence_lookup)) {
                            if (isTokenActive(13, tk_row) && token_production(l, 67109187, 9, 13, 1, states_buffer, scan) && l.byte_length > 4) {
                                return;
                            } else if (isTokenActive(53, tk_row) && token_production(l, 67111810, 44, 53, 2, states_buffer, scan) && l.byte_length > 4) {
                                return;
                            } else if (isTokenActive(3, tk_row) && l.isUniID() && l.byte_length > 4) {
                                l._type = 3;
                                return;
                            } else if (isTokenActive(57, tk_row)) {
                                l.setToken(57, 4, 4);
                                return;
                            }
                        }
                    } else if (l.get_byte_at(l.byte_offset + 1) == 107) {
                        if (l.get_byte_at(l.byte_offset + 2) == 58) {
                            if (isTokenActive(17, tk_row)) {
                                l.setToken(17, 3, 3);
                                return;
                            }
                        }
                    } else if (l.get_byte_at(l.byte_offset + 1) == 58) {
                        if (isTokenActive(15, tk_row)) {
                            l.setToken(15, 2, 2);
                            return;
                        }
                    }
                }
            }
            break;
        case 117:
            {
                if (l.get_byte_at(l.byte_offset) == 117) {
                    if (4 == compare(l, l.byte_offset + 1, 88, 4, token_sequence_lookup)) {
                        if (isTokenActive(13, tk_row) && token_production(l, 67109187, 9, 13, 1, states_buffer, scan) && l.byte_length > 5) {
                            return;
                        } else if (isTokenActive(53, tk_row) && token_production(l, 67111810, 44, 53, 2, states_buffer, scan) && l.byte_length > 5) {
                            return;
                        } else if (isTokenActive(3, tk_row) && l.isUniID() && l.byte_length > 5) {
                            l._type = 3;
                            return;
                        } else if (isTokenActive(65, tk_row)) {
                            l.setToken(65, 5, 5);
                            return;
                        }
                    }
                }
            }
            break;
        case 119:
            {
                if (l.get_byte_at(l.byte_offset) == 119) {
                    if (5 == compare(l, l.byte_offset + 1, 102, 5, token_sequence_lookup)) {
                        if (isTokenActive(13, tk_row) && token_production(l, 67109187, 9, 13, 1, states_buffer, scan) && l.byte_length > 6) {
                            return;
                        } else if (isTokenActive(53, tk_row) && token_production(l, 67111810, 44, 53, 2, states_buffer, scan) && l.byte_length > 6) {
                            return;
                        } else if (isTokenActive(3, tk_row) && l.isUniID() && l.byte_length > 6) {
                            l._type = 3;
                            return;
                        } else if (isTokenActive(71, tk_row)) {
                            l.setToken(71, 6, 6);
                            return;
                        }
                    }
                }
            }
            break;
        case 123:
            {
                if (l.get_byte_at(l.byte_offset) == 123) {
                    if (isTokenActive(46, tk_row)) {
                        l.setToken(46, 1, 1);
                        return;
                    }
                }
            }
            break;
        case 124:
            {
                if (l.get_byte_at(l.byte_offset) == 124) {
                    if (isTokenActive(28, tk_row)) {
                        l.setToken(28, 1, 1);
                        return;
                    }
                }
            }
            break;
        case 125:
            {
                if (l.get_byte_at(l.byte_offset) == 125) {
                    if (isTokenActive(47, tk_row)) {
                        l.setToken(47, 1, 1);
                        return;
                    }
                }
            }
            break;
        default:
            break;
    };
    if (isTokenActive(13, tk_row) && pre_scan(l, 212) && token_production(l, 67109187, 9, 13, 1, states_buffer, scan)) {
        return;
    } else if (isTokenActive(53, tk_row) && pre_scan(l, 213) && token_production(l, 67111810, 44, 53, 2, states_buffer, scan)) {
        return;
    } else if (isTokenActive(86, tk_row) && pre_scan(l, 214) && token_production(l, 67108912, 2, 86, 4, states_buffer, scan)) {
        return;
    } else if (isTokenActive(0, tk_row) && false) {
        l._type = 0;
        return;
    } else if (isTokenActive(8, tk_row) && l.isSP(true)) {
        l._type = 8;
        return;
    } else if (isTokenActive(3, tk_row) && l.isUniID()) {
        l._type = 3;
        return;
    } else if (isTokenActive(2, tk_row) && l.isSym(true)) {
        l._type = 2;
        return;
    } else if (isTokenActive(7, tk_row) && l.isNL()) {
        l._type = 7;
        return;
    } else if (isTokenActive(5, tk_row) && l.isNum()) {
        l._type = 5;
        return;
    }
}

function scan(l, token, skip) {
    if (((l._type) <= 0)) scan_core(l, token);;
    if ((skip > 0 && isTokenActive(l._type, skip))) {
        while ((isTokenActive(l._type, skip))) {
            l.next();
            scan_core(l, token);
        }
    }
}

const js_parser_pack = {

    init_table: () => {
        const table = new Uint8Array(382976);
        init_table(table);
        return table;
    },

    create_iterator: (data) => {
        return new KernelStateIterator(data);
    },

    recognize: (string, entry_index) => {

        const temp_buffer = new Uint8Array(string.length * 4);

        const actual_length = fillByteBufferWithUTF8FromString(string, temp_buffer, temp_buffer.length);

        const input_buffer = new Uint8Array(temp_buffer.buffer, 0, actual_length);

        let entry_pointer = 0;

        switch (entry_index) {

            case 0: default: entry_pointer = 67108868; break;

            case 1: entry_pointer = 67113142; break;
        }

        return run(
            states_buffer,
            input_buffer,
            input_buffer.length,
            entry_pointer,
            scan,
            false
        );
    }
};

const reduce_functions = [(_, s) => s[s.length - 1], (env, sym, pos) => ({ type: "hc-grammar-4", preamble: sym[0] || [], ir_states: sym[1].ir || [], productions: sym[1].productions, functions: sym[1].functions || [], imported_grammars: [], meta: null, ignore: [], all_symbols: [], bodies: [] }) /*0*/,
(env, sym, pos) => ({ type: "hc-grammar-4", preamble: null || [], ir_states: sym[0].ir || [], productions: sym[0].productions, functions: sym[0].functions || [], imported_grammars: [], meta: null, ignore: [], all_symbols: [], bodies: [] }) /*1*/,
(env, sym, pos) => ([sym[0]]) /*2*/,
(env, sym, pos) => ((sym[0].push(sym[1]), sym[0])) /*3*/,
(env, sym, pos) => ({ type: "ignore", symbols: sym[1] }) /*4*/,
(env, sym, pos) => ({ type: "generated", val: sym[1], pos: pos, meta: false }) /*5*/,
(env, sym, pos) => (sym[0] + sym[1]) /*6*/,
(env, sym, pos) => ({ type: "exclusive-literal", val: "" + sym[1], pos: pos, meta: false }) /*7*/,
(env, sym, pos) => ({ type: "literal", val: sym[0], pos: pos, meta: false }) /*8*/,
(env, sym, pos) => ({ type: "literal", val: sym[1], pos: pos, meta: false }) /*9*/,
(env, sym, pos) => ({ type: "production_token", name: sym[1], production: null, val: -1, pos: pos, meta: false }) /*10*/,
(env, sym, pos) => ({ type: "import", uri: sym[1], reference: sym[3] }) /*11*/,
(env, sym, pos) => ({ type: "export", production: sym[1], reference: sym[3] }) /*12*/,
(env, sym, pos) => ({ type: "sym-production-import", module: sym[0], production: sym[2], name: "", pos: pos, meta: false }) /*13*/,
(env, sym, pos) => ({ type: "sym-production", name: sym[0], production: null, val: -1, pos: pos, meta: false }) /*14*/,
(env, sym, pos) => ({ type: "comment", value: sym[1] }) /*15*/,
(env, sym, pos) => ({ type: "production-section", functions: [], productions: [sym[0]], ir: [] }) /*16*/,
(env, sym, pos) => ({ type: "production-section", functions: [sym[0]], productions: [], ir: [] }) /*17*/,
(env, sym, pos) => ({ type: "production-section", functions: [], productions: [], ir: [sym[0]] }) /*18*/,
(env, sym, pos) => (sym[0].productions.push(sym[1]), sym[0]) /*19*/,
(env, sym, pos) => (sym[0].functions.push(sym[1]), sym[0]) /*20*/,
(env, sym, pos) => (sym[0].ir.push(sym[1]), sym[0]) /*21*/,
(env, sym, pos) => (sym[0]) /*22*/,
(env, sym, pos) => ({ type: "production", name: sym[2], bodies: sym[4], id: -1, recovery_handler: sym[5], pos: pos, recursion: 0, ROOT_PRODUCTION: !!sym[1] }) /*23*/,
(env, sym, pos) => ({ type: "production-merged-import", name: sym[1], bodies: sym[3], id: -1, recovery_handler: sym[4], ROOT_PRODUCTION: false }) /*24*/,
(env, sym, pos) => ({ type: "production", name: sym[1], bodies: sym[3], id: -1, recovery_handler: sym[4], pos: pos, recursion: 0, ROOT_PRODUCTION: !!null }) /*25*/,
(env, sym, pos) => ({ type: "production", name: sym[2], bodies: null, id: -1, recovery_handler: sym[4], pos: pos, recursion: 0, ROOT_PRODUCTION: !!sym[1] }) /*26*/,
(env, sym, pos) => ({ type: "production", name: sym[1], bodies: null, id: -1, recovery_handler: sym[3], pos: pos, recursion: 0, ROOT_PRODUCTION: !!null }) /*27*/,
(env, sym, pos) => ((sym[0].push(sym[2]), sym[0])) /*28*/,
(env, sym, pos) => ({ type: "body", sym: sym[0], reduce_function: sym[1], FORCE_FORK: false, id: -1, production: null, pos }) /*29*/,
(env, sym, pos) => ({ type: "body", sym: sym[0], reduce_function: null, FORCE_FORK: false, id: -1, production: null, pos }) /*30*/,
(env, sym, pos) => (sym[0].concat(sym[1])) /*31*/,
(env, sym, pos) => ([]) /*32*/,
(env, sym, pos) => (env.group_id++, sym[1].flat().map(e => (e.IS_OPTIONAL ? e.IS_OPTIONAL |= env.group_id << 8 : 0, e))) /*33*/,
(env, sym, pos) => (sym[0].IS_OPTIONAL = 1, sym[0]) /*34*/,
(env, sym, pos) => ({ type: "look-behind", val: sym[1].val, phased: sym[1] }) /*35*/,
(env, sym, pos) => (sym[1].IS_NON_CAPTURE = true, sym[1]) /*36*/,
(env, sym, pos) => ({ type: "group-production", val: sym[1], pos: pos, meta: false }) /*37*/,
(env, sym, pos) => ({ type: "list-production", terminal_symbol: sym[2], IS_OPTIONAL: +(sym[1] == "(*"), val: sym[0], pos: pos, meta: false }) /*38*/,
(env, sym, pos) => ({ type: "list-production", terminal_symbol: null, IS_OPTIONAL: +(sym[1] == "(*"), val: sym[0], pos: pos, meta: false }) /*39*/,
(env, sym, pos) => ({ type: "eof", val: "END_OF_FILE", pos: pos, meta: false }) /*40*/,
(env, sym, pos) => ({ type: "meta-exclude", sym: sym[1], meta: true, index: -1 }) /*41*/,
(env, sym, pos) => ({ type: "meta-error", sym: sym[1], meta: true, index: -1 }) /*42*/,
(env, sym, pos) => ({ type: "meta-ignore", sym: sym[1], meta: true, index: -1 }) /*43*/,
(env, sym, pos) => ({ type: "meta-reset", sym: sym[1], meta: true, index: -1 }) /*44*/,
(env, sym, pos) => ({ type: "meta-reduce", sym: sym[1], meta: true, index: -1 }) /*45*/,
(env, sym, pos) => ({ type: "empty", val: "", pos: pos, meta: false }) /*46*/,
(env, sym, pos) => ({ type: "RETURNED", txt: sym[3], name: "", env: false, ref: "", IS_CONDITION: true }) /*47*/,
(env, sym, pos) => ({ type: "env-function-reference", ref: sym[3] }) /*48*/,
(env, sym, pos) => ({ type: "local-function-reference", ref: sym[3] }) /*49*/,
(env, sym, pos) => ("FN:F") /*50*/,
(env, sym, pos) => (sym[0] + sym[1] + sym[2]) /*51*/,
(env, sym, pos) => ({ type: "ref-function", id: sym[1], txt: sym[3] }) /*52*/,
(env, sym, pos) => ({ type: "state", id: sym[1], instructions: sym[3], fail: sym[4], symbol_meta: sym[5], pos }) /*53*/,
(env, sym, pos) => ({ type: "state", id: sym[1], instructions: sym[3], symbol_meta: sym[4], pos }) /*54*/,
(env, sym, pos) => ({ type: "state", id: sym[1], instructions: sym[3], fail: sym[4], pos }) /*55*/,
(env, sym, pos) => ({ type: "state", id: sym[1], instructions: sym[3], pos }) /*56*/,
(env, sym, pos) => ({ type: "prod", ids: sym[2], instructions: sym[4], pos }) /*57*/,
(env, sym, pos) => (sym[1]) /*58*/,
(env, sym, pos) => ([...sym[0], ...sym[2], sym[3]]) /*59*/,
(env, sym, pos) => ([...sym[0], sym[1]]) /*60*/,
(env, sym, pos) => ([...sym[0], ...sym[2]]) /*61*/,
(env, sym, pos) => ([...sym[0]]) /*62*/,
(env, sym, pos) => ({ type: "reduce", len: parseInt(sym[1]), reduce_fn: parseInt(sym[2]), pos }) /*63*/,
(env, sym, pos) => ({ type: "reduce", len: -1, reduce_fn: sym[1], pos }) /*64*/,
(env, sym, pos) => ({ type: "set-prod", id: sym[3], pos }) /*65*/,
(env, sym, pos) => ({ type: "fork-to", states: sym[3], pos }) /*66*/,
(env, sym, pos) => ({ type: sym[1] ? "scan-back-until" : "scan-until", ids: sym[3], pos }) /*67*/,
(env, sym, pos) => ({ type: "token-id", id: sym[3], pos }) /*68*/,
(env, sym, pos) => ({ type: "pass", pos }) /*69*/,
(env, sym, pos) => ({ type: "fail", pos }) /*70*/,
(env, sym, pos) => ({ type: "not-in-scopes", ids: sym[4], pos }) /*71*/,
(env, sym, pos) => ({ type: "set-scope", scope: sym[3], pos }) /*72*/,
(env, sym, pos) => ({ type: "consume", EMPTY: !!sym[1], pos }) /*73*/,
(env, sym, pos) => ({ type: null ? "scan-back-until" : "scan-until", ids: sym[2], pos }) /*74*/,
(env, sym, pos) => ({ type: "consume", pos }) /*75*/,
(env, sym, pos) => (sym[2]) /*76*/,
(env, sym, pos) => ({ type: "goto", state: sym[1], pos }) /*77*/,
(env, sym, pos) => ({ type: "peek", ids: sym[1], instructions: sym[3], pos }) /*78*/,
(env, sym, pos) => ({ type: "assert", ids: sym[1], instructions: sym[3], pos }) /*79*/,
(env, sym, pos) => ({ type: "on-fail-state", id: sym[2], instructions: sym[3], symbol_meta: sym[5], fail: sym[4], pos }) /*80*/,
(env, sym, pos) => ({ type: "on-fail-state", id: sym[2], instructions: sym[3], symbol_meta: sym[4], pos }) /*81*/,
(env, sym, pos) => ({ type: "on-fail-state", id: sym[2], instructions: sym[3], fail: sym[4], pos }) /*82*/,
(env, sym, pos) => ({ type: "on-fail-state", id: sym[2], instructions: sym[3], pos }) /*83*/,
(env, sym, pos) => ({ type: "symbols", expected: sym[2], skipped: sym[3] || [], pos }) /*84*/,
(env, sym, pos) => ({ type: "symbols", expected: sym[2], skipped: null || [], pos }) /*85*/,
(env, sym, pos) => ({ type: "state", id: sym[0], instructions: sym[1], fail: sym[2], symbol_meta: sym[3], pos }) /*86*/,
(env, sym, pos) => ({ type: "state", id: sym[0], instructions: sym[1], symbol_meta: sym[2], pos }) /*87*/,
(env, sym, pos) => ({ type: "state", id: sym[0], instructions: sym[1], fail: sym[2], pos }) /*88*/,
(env, sym, pos) => ({ type: "state", id: sym[0], instructions: sym[1], pos }) /*89*/,
(env, sym, pos) => ({ type: "symbol", val: sym[0], pos: pos, meta: false }) /*90*/,
(env, sym, pos) => ({ type: "ERROR_RECOVERY", lexer_text: sym[3], body_text: sym[6] }) /*91*/,
(env, sym, pos) => ({ type: "function-inline", txt: sym[2], name: "", env: false, IS_CONDITION: true }) /*92*/,
(env, sym, pos) => ({ type: "INLINE", txt: "", name: sym[2], env: true, IS_CONDITION: true }) /*93*/,
(env, sym, pos) => (sym[0] + "") /*94*/,
(env, sym, pos) => (env.prod_name = sym[0]) /*95*/,
(env, sym, pos) => (env.prod_name = sym[0].val, sym[0]) /*96*/,
(env, sym, pos) => (sym[0] + "GG") /*97*/,
(env, sym, pos) => ({ type: "repeat-state", pos }) /*98*/,
(env, sym, pos) => (parseInt(sym[0])) /*99*/,
(env, sym, pos) => (sym[0] + "DD") /*100*/];

export default ParserFramework(
    reduce_functions,
    {
        hc: 0,
        ir: 1,
    },
    js_parser_pack,
);