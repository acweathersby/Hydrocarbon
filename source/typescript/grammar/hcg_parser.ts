
import { fillByteBufferWithUTF8FromString } from "../runtime/utf8.js";

import * as KernelParserCore from "../runtime/kernel.js";

import { ParserFramework } from "../runtime/parser_framework.js";



const {
    token_production,
    init_table,
    KernelStateIterator,
    run,
    compare
} = KernelParserCore;

const token_sequence_lookup = new Uint8Array([
    47, 42, 47, 64, 73, 71, 78, 79, 82, 69, 103, 111, 116, 111, 95, 116, 111, 107, 101, 110, 92, 58, 58,
    35, 60, 62, 43, 62, 124, 91, 93, 63, 61, 40, 69, 88, 67, 41, 36, 101, 109, 112, 116, 121, 123, 125,
    94, 61, 62, 102, 111, 114, 107, 45, 115, 121, 109, 98, 111, 108, 115, 58, 44, 97, 115, 115, 101,
    114, 116, 65, 83, 114, 101, 99, 111, 118, 101, 114, 111, 110, 112, 114, 111, 100, 98, 97, 99, 107,
    117, 110, 116, 105, 108, 105, 100, 110, 111, 116, 104, 105, 110, 103, 119, 105, 116, 104, 105,
    110, 99, 111, 110, 115, 117, 109, 101, 120, 112, 101, 99, 116, 101, 100, 64, 73, 77, 80, 79, 82,
    84, 103, 58, 116, 104, 101, 110, 60, 61, 40, 69, 82, 82, 36, 101, 111, 102, 97, 105, 108, 115, 107,
    105, 112, 112, 101, 100, 114, 101, 116, 117, 114, 110, 112, 97, 115, 115, 101, 114, 104, 64, 69,
    88, 80, 79, 82, 84, 116, 107, 58, 116, 58, 60, 91, 40, 73, 71, 78, 40, 82, 83, 84, 40, 82, 69, 68, 40,
    42, 40, 43, 102, 58, 115, 99, 111, 112, 101, 115, 116, 97, 116, 101, 115, 99, 97, 110, 115, 101,
    116, 114, 101, 100, 117, 99, 101, 114, 101, 112, 101, 97, 116, 112, 101, 101, 107
]);

const token_lookup = new Uint32Array([
    94636416, 1572864, 0, 384, 0, 0, 386, 0, 0, 94636416, 1572864, 8388608, 384, 0, 8388608, 83886464,
    1572864, 0, 896, 0, 0, 1452, 0, 8388608, 0, 0, 8388608, 1408, 0, 8388608, 94636418, 1572864,
    8388608, 10750336, 0, 0, 2432, 0, 0, 256, 0, 0, 233862, 0, 0, 233860, 0, 0, 4480, 0, 0, 8576, 0,
    0, 16776, 0, 0, 16768, 0, 0, 392, 0, 0, 16426, 0, 0, 33156, 0, 0, 33152, 0, 0, 4119048614, 1576959,
    0, 4121409958, 1576959, 8388608, 256, 0, 8388608, 4119048614, 1576959, 8388608, 388, 0,
    0, 128, 0, 0, 65920, 0, 0, 131456, 0, 0, 262528, 0, 0, 1573248, 0, 0, 2097536, 0, 0, 5767552, 0,
    0, 1581440, 0, 0, 4202880, 0, 0, 4194688, 0, 0, 363071874, 1572872, 8388608, 8388992, 0, 0,
    428, 0, 0, 416, 0, 0, 83886464, 1572864, 8388608, 92275074, 1572864, 8388608, 83886464, 0,
    0, 16777600, 0, 0, 33563008, 0, 0, 134218112, 0, 0, 629387654, 1580999, 8388608, 67109248,
    0, 0, 545501572, 8135, 0, 360710530, 1572872, 0, 4119048582, 1576959, 8388608, 1971564934,
    1576911, 0, 102788, 72, 0, 384, 8, 0, 897823110, 1576911, 0, 897823110, 1576911, 8388608,
    360710530, 1572872, 8388608, 537112964, 8135, 0, 537112964, 4039, 0, 536871296, 0, 0, 1073742208,
    0, 0, 242052, 71, 0, 4123242886, 1576959, 8388608, 4119048582, 1576959, 0, 233860, 71, 0,
    384, 64, 0, 102788, 64, 0, 1073844646, 72, 0, 384, 3968, 0, 384, 128, 0, 384, 256, 0, 384, 512,
    0, 384, 1024, 0, 384, 2048, 0, 102790, 72, 0, 384, 4096, 0, 384, 270336, 0, 384, 212992, 0, 384,
    32768, 0, 494928258, 85458952, 131072, 384, 524288, 0, 430, 16384, 0, 430, 49152, 0, 428, 49152,
    0, 384, 16384, 0, 384, 1048576, 8388608, 384, 6291456, 8388608, 1077936512, 0, 8388608, 4202880,
    0, 8388608, 1073742208, 0, 8388608, 134218112, 16777216, 8519680, 134218112, 0, 8519680,
    134218112, 0, 8388608, 1073750400, 0, 8388608, 16808, 8388608, 8388608, 392, 0, 8388608,
    416, 0, 8388608, 16768, 0, 8388608, 384, 8388608, 8388608, 16426, 8388608, 8388608, 384,
    3170893824, 8505569, 134218114, 16777216, 8519680, 384, 16777216, 8388608, 384, 33554432,
    8388608, 384, 4, 8388608, 384, 8, 8388608, 536871296, 0, 8388608, 384, 3154116608, 8407265,
    384, 134217728, 8388608, 134218114, 83886088, 8519680, 384, 0, 9453568, 384, 67108864,
    8388608, 134218114, 16777224, 8519680, 384, 67108864, 9437184, 384, 2952790016, 8390881,
    384, 268435456, 8388608, 416, 524288, 8388608, 384, 536870912, 8388608, 384, 33554432,
    8389640, 384, 1073741824, 8388608, 8608, 0, 8388608, 138412418, 83886088, 8519680, 134226306,
    83886088, 8519680, 384, 0, 8388624, 102820, 64, 0, 384, 2147483648, 8388608, 384, 0, 8388609,
    384, 0, 8388614, 384, 0, 8388612, 384, 0, 8388640, 384, 0, 8388672, 384, 0, 8388736, 384, 0,
    8388864, 384, 0, 8389120, 384, 0, 8390656, 134218114, 83886088, 8523776, 384, 0, 8396800,
    8576, 4194304, 8388608, 384, 0, 8404992, 384, 0, 8486912, 384, 0, 8421376, 384, 0, 8454144,
    134218114, 0, 8519680, 384, 4194304, 8388608, 384, 0, 8650752, 134218114, 0, 12713984, 386,
    16777216, 8519680, 386, 0, 8519680, 386, 0, 8388608, 1454, 0, 8388608, 424, 0, 0, 4119048622,
    1576959, 0, 4253266350, 85463039, 8519680, 4119048622, 1576959, 8388608, 430, 0, 0, 396,
    0, 0, 1573262, 0, 0, 134218114, 0, 0, 1610854790, 4039, 0, 537112966, 4039, 0, 134218114, 50331648,
    8519744, 134218114, 50331648, 8519680, 134218114, 16777216, 8617984, 8608, 0, 0, 1077944736,
    0, 8388608, 1073750434, 0, 0, 1073750432, 0, 0, 1073750434, 0, 8388608, 4259033510, 85463039,
    8519680, 1077944738, 0, 0, 1073742240, 0, 8388608, 134218114, 2969567240, 9586913, 134218114,
    83886088, 131072, 134218114, 16777224, 9584640, 384, 67108864, 0, 384, 0, 1048576, 384,
    0, 8192, 386, 8, 2097152, 386, 8, 10485760, 1073742242, 0, 0, 1073844646, 64, 0, 1073844644,
    64, 8388608, 134218114, 0, 131072, 16392, 0, 0, 16424, 8388608, 0, 512, 0, 0
]);

const states_buffer = new Uint32Array([
    0, 4026531840, 2164260864, 4026531841, 2147483648, 603979784, 603979786, 0, 805306368,
    0, 2852126731, 196612, 196616, 2147498008, 2147498010, 2143289362, 2160066571, 2147498036,
    2147483669, 2147498035, 2147483671, 2147483649, 2147483651, 603979810, 603979875, 603979857,
    603979891, 0, 2147483649, 603979816, 603980521, 0, 4026531840, 0, 603979813, 603980521,
    0, 1073742096, 805306369, 0, 1073742344, 805306369, 0, 2852192260, 393217, 1, 2147483657,
    2147483650, 268435456, 603979829, 0, 4026531840, 0, 2852126727, 458760, 131078, 2147483656,
    2147483653, 2160066562, 2151677955, 2147483655, 2147489802, 603979847, 603983031, 0,
    268435456, 1073741840, 805306370, 0, 4026531840, 0, 2852192260, 589828, 1, 2147483658,
    268435456, 1073741848, 805306370, 0, 4026531840, 0, 1073742600, 805306371, 0, 2852126723,
    196612, 131076, 2147483671, 2147483669, 2147483666, 2134900747, 603979872, 603979891,
    0, 4026531840, 0, 1073742864, 805306371, 0, 3087007853, 2499805187, 0, 65539, 4026531840,
    0, 0, 603979875, 603979860, 0, 2499805187, 0, 65537, 4026531840, 0, 0, 2852126738, 720897,
    131076, 2147508247, 2147500053, 2147491858, 2134900747, 2147483652, 603979917, 603979919,
    0, 2147483652, 603979917, 603980310, 0, 2147483652, 603979917, 603980343, 0, 2147483652,
    2147483667, 603979917, 603980443, 603980445, 0, 4026531840, 805306372, 0, 2852192264,
    786433, 1, 2147483659, 2147483653, 268435456, 2147483654, 603979933, 603979961, 603979943,
    603979977, 0, 4026531840, 0, 2852192260, 65549, 1, 2147483655, 268435456, 1073743128,
    805306373, 0, 4026531840, 0, 1073742600, 805306374, 0, 2852126723, 983053, 131077, 2164260876,
    2147483665, 2147483650, 2147483663, 2147483664, 603979958, 603979977, 0, 4026531840,
    1073742864, 805306374, 0, 3087007939, 2499805190, 0, 65539, 4026531840, 0, 0, 603979961,
    603979946, 0, 2499805190, 0, 65537, 4026531840, 0, 0, 2852126736, 983041, 131077, 2164260876,
    2147508241, 2147491842, 2147491855, 2147500048, 2147483655, 603980003, 603980005, 0,
    2147483655, 603980003, 603980083, 0, 2147483655, 603980003, 603980274, 0, 2147483655,
    603980003, 603980290, 0, 4026531840, 0, 805306375, 0, 2852192260, 1048577, 1, 2147483660,
    2147483656, 268435456, 603980015, 0, 4026531840, 0, 2852192260, 1114113, 1, 2147483661,
    268435456, 1073743376, 805306376, 0, 4026531840, 0, 2852126728, 1179649, 65538, 2147483662,
    2147491843, 2147483657, 603980067, 603980039, 0, 2147483657, 603980067, 603980047, 0,
    4026531840, 2852192259, 1245185, 1, 2147483662, 268435456, 805306377, 0, 4026531840,
    2852192259, 1310721, 1, 2147483651, 268435456, 805306377, 0, 4026531840, 2852126724,
    1376256, 65539, 2147483662, 2151677955, 2147483653, 268435456, 1073743632, 805306377,
    0, 4026531840, 0, 3087008045, 2499805193, 0, 65539, 4026531840, 0, 0, 603980067, 603980055,
    0, 2499805193, 0, 65537, 4026531840, 0, 0, 2852126726, 1441793, 65538, 2147489794, 2147483663,
    2147483658, 603980095, 0, 2147483658, 603980236, 0, 4026531840, 2852192260, 1507329,
    1, 2147483663, 268435456, 603980105, 603983141, 0, 4026531840, 0, 2852126724, 1572864,
    262175, 2239762448, 2210402305, 2239762434, 2256539683, 2256539684, 2231373829, 2147487782,
    2189426695, 2189430792, 2147487785, 2222985242, 2147487787, 2176847884, 2176847885,
    2147487774, 2172653583, 2176847889, 2185236503, 2185236504, 2147487772, 2147487773,
    2147487775, 2147487776, 2147487777, 2147487778, 2147487781, 2147487783, 2147487784,
    2147487786, 2147487795, 2147487796, 603980145, 0, 603980196, 0, 4026531840, 0, 2785017860,
    1638426, 327713, 2147483680, 2202009601, 2231369730, 2147483683, 2147483684, 2231369733,
    2147483686, 2231369735, 2147483688, 2147483689, 2147483690, 2235568139, 2147483660,
    2147483661, 2147483681, 2147483663, 2147483664, 2147483665, 2147487762, 2147483699,
    2147483700, 2147487765, 2147483682, 2147483671, 2147483672, 2147483685, 2147483674,
    2147483687, 2147483676, 2147483677, 2147483678, 2147483679, 2147483691, 603980187,
    0, 603980193, 0, 4026531840, 0, 603980190, 603980246, 0, 1073743896, 805306378, 0, 1073743888,
    805306378, 0, 2852126726, 1769480, 262174, 2235570192, 2210404353, 2235570178, 2252347427,
    2252347428, 2227181573, 2147489830, 2222987287, 2185232392, 2147489833, 2218792986,
    2147489835, 2172655628, 2172655629, 2147489822, 2168461327, 2172655633, 2185238552,
    2147489820, 2147489821, 2147489823, 2147489824, 2147489825, 2147489826, 2147489829,
    2147489831, 2147489832, 2147489834, 2147489843, 2147489844, 603980190, 603980246, 0,
    1073743888, 805306378, 0, 4026531840, 2852192260, 1835009, 1, 2147483650, 268435456,
    1073744136, 805306378, 0, 4026531840, 0, 2583691271, 65536, 131075, 4026531840, 0, 0, 2147483659,
    603980266, 0, 2147483659, 603980258, 0, 2852192259, 65565, 1, 2147483656, 268435456, 805306379,
    0, 4026531840, 2852192259, 65549, 1, 2147483655, 268435456, 805306379, 0, 4026531840,
    2852192261, 1966081, 1, 2147483664, 2147483660, 268435456, 603980284, 603983335, 0, 4026531840,
    603980287, 603980246, 0, 1073744408, 805306380, 0, 2852192260, 2031617, 1, 2147483665,
    2147483661, 268435456, 603980300, 0, 4026531840, 0, 2852192260, 1114113, 1, 2147483661,
    268435456, 1073744656, 805306381, 0, 4026531840, 0, 2852192261, 2097153, 1, 2147483666,
    2147483662, 268435456, 603980320, 603983413, 0, 4026531840, 2852126724, 2162689, 65538,
    2147483668, 2147483667, 268435456, 603980330, 603980333, 0, 4026531840, 1073744928,
    805306382, 0, 2852192260, 1114113, 1, 2147483661, 2147483663, 268435456, 805306383, 0,
    4026531840, 0, 2852192260, 2228225, 1, 2147483669, 2147483664, 268435456, 603980353,
    0, 4026531840, 0, 2583756813, 1114113, 65538, 4026531840, 0, 603980361, 0, 0, 2785017860,
    2293761, 65539, 2155872276, 2147483667, 2147487766, 603980373, 0, 603980405, 0, 4026531840,
    0, 2852192262, 2359297, 1, 2147483661, 2147483666, 268435456, 1073745672, 805306386,
    603980385, 0, 4026531840, 0, 2852126723, 2162689, 65538, 2147483668, 2147483667, 268435456,
    603980395, 0, 4026531840, 0, 2852192260, 1310721, 1, 2147483651, 268435456, 1073745184,
    805306384, 0, 4026531840, 0, 2852192261, 2424833, 1, 2147483661, 2147483665, 268435456,
    603980385, 603980425, 0, 4026531840, 2852192260, 1114113, 1, 2147483661, 2147483665,
    268435456, 603980425, 0, 4026531840, 0, 2852192259, 2490369, 1, 2147483670, 268435456,
    603980433, 0, 4026531840, 2852192260, 1114113, 1, 2147483661, 268435456, 1073745432,
    805306385, 0, 4026531840, 0, 805306387, 0, 2852192264, 2621441, 1, 2147483671, 2147483668,
    268435456, 2147483715, 603980459, 603983491, 603983473, 603980469, 0, 4026531840, 0,
    2852192261, 65549, 1, 2147483655, 2147483670, 268435456, 1073745944, 805306388, 0, 4026531840,
    2852126732, 2687005, 131076, 2147502088, 2147495941, 2147483650, 2147489795, 2147483669,
    603980489, 0, 2147483669, 603980497, 0, 2147483669, 603980505, 0, 2147483669, 603980513,
    0, 4026531840, 2852192259, 1835009, 1, 2147483650, 268435456, 805306389, 0, 4026531840,
    2852192259, 1310721, 1, 2147483651, 268435456, 805306389, 0, 4026531840, 2852192259,
    2752513, 1, 2147483653, 268435456, 805306389, 0, 4026531840, 2852192259, 65565, 1, 2147483656,
    268435456, 805306389, 0, 4026531840, 2852126737, 2818052, 131076, 2151677976, 2147508276,
    2147483674, 2147493939, 2147483671, 603980596, 603980547, 603980612, 0, 2147483671,
    2147483690, 603980596, 603980550, 603981757, 603981608, 0, 2147483671, 603980596, 603980553,
    603981787, 0, 4026531840, 0, 1073746184, 805306391, 0, 1073746440, 805306391, 0, 1073746696,
    805306391, 0, 2852126738, 2883588, 131077, 2164260888, 2147489843, 2147483674, 2139121687,
    2147500084, 603980584, 603980612, 0, 2147483690, 603980587, 603981757, 603981608, 0,
    2147483691, 268435456, 603980590, 603981797, 0, 2147483667, 603980593, 603980443, 603980445,
    0, 4026531840, 0, 1073746960, 805306391, 0, 1073747216, 805306391, 0, 1073747472, 805306391,
    0, 1073747728, 805306391, 0, 3087008574, 2499805207, 0, 65539, 4026531840, 0, 0, 603980596,
    603980556, 0, 2499805207, 0, 65537, 4026531840, 0, 0, 2852126726, 2949121, 65538, 2151677976,
    2147489818, 2147483672, 603980624, 0, 2147483672, 603980744, 0, 4026531840, 2852192259,
    3014657, 1, 2147483672, 268435456, 603980632, 0, 4026531840, 2852126731, 3080193, 65538,
    2147483673, 2143301645, 268435456, 2147483716, 603980650, 603983507, 603980771, 0, 2147483716,
    603980697, 603983507, 603980771, 0, 4026531840, 0, 2852192261, 3145729, 1, 2147483675,
    2147483674, 268435456, 805306394, 603980660, 0, 4026531840, 2852126726, 3211268, 262167,
    2214592528, 2164267009, 2214592514, 2147489843, 2147489844, 2197815313, 2147483686,
    2197815319, 2197821464, 2147483689, 2193627162, 2147483691, 2189426700, 2151677965,
    2147483677, 2147483663, 2147483680, 2147483681, 2147483682, 2147483687, 2147483688,
    2147483690, 2147483692, 603980694, 603980781, 0, 1073748768, 805306392, 0, 4026531840,
    0, 1073748008, 805306392, 0, 2852192261, 3145729, 1, 2147483675, 2147483674, 268435456,
    805306394, 603980707, 0, 4026531840, 2852126726, 3211268, 262167, 2214592528, 2164267009,
    2214592514, 2147489843, 2147489844, 2197815313, 2147483686, 2197815319, 2197821464,
    2147483689, 2193627162, 2147483691, 2189426700, 2151677965, 2147483677, 2147483663,
    2147483680, 2147483681, 2147483682, 2147483687, 2147483688, 2147483690, 2147483692,
    603980741, 603980781, 0, 1073749016, 805306392, 0, 4026531840, 0, 1073748512, 805306392,
    0, 2852192262, 3276801, 1, 2147483674, 268435456, 2147483717, 603980756, 603983510, 603980415,
    0, 4026531840, 0, 2852192262, 3145729, 1, 2147483675, 2147483674, 268435456, 805306394,
    603980768, 603980781, 0, 4026531840, 0, 1073748256, 805306392, 0, 2852192260, 1114113,
    1, 2147483661, 2147483673, 268435456, 805306393, 0, 4026531840, 0, 2852126734, 3342337,
    262162, 2164275216, 2164275217, 2197829634, 2147498013, 2147498016, 2147498017, 2147498022,
    2185232407, 2147498024, 2147498025, 2147498026, 2147498027, 2168469516, 2105554957,
    2147498018, 2147497999, 2147498023, 2147498028, 2147483675, 2147483667, 603980977,
    603980817, 603980443, 603980445, 0, 2147483675, 2147483676, 603980977, 603980817, 603981015,
    603981035, 0, 4026531840, 1073742600, 805306395, 0, 2852126730, 3473412, 262172, 2231369744,
    2210398209, 2231369730, 2243952675, 2243967012, 2147498021, 2147483686, 2214592535,
    2214592536, 2147483689, 2210398234, 2147483691, 2168455180, 2168455181, 2147483678,
    2164260879, 2168455185, 2147483676, 2147483677, 2147489823, 2147483680, 2147483681,
    2147483682, 2147483687, 2147483688, 2147483690, 2147483699, 2147483700, 1073742600,
    805306398, 0, 268435456, 1073750800, 805306399, 0, 268435456, 603980865, 0, 4026531840,
    1073742600, 805306398, 0, 2852126727, 3604481, 131078, 2151677964, 2147483664, 2160066562,
    2151677967, 2147489827, 2147483686, 603980883, 603981360, 0, 268435456, 1073752088,
    805306399, 0, 4026531840, 0, 2852192260, 3670017, 1, 2147483683, 268435456, 1073751840,
    805306399, 0, 4026531840, 0, 1073747720, 805306397, 0, 2852126731, 3801092, 262168, 2218803216,
    2164271105, 2218803202, 2231380003, 2147493940, 2202026001, 2147500070, 2202019863,
    2202019864, 2147500073, 2197825562, 2147500075, 2155888652, 2160082957, 2147493916,
    2147500047, 2147500061, 2147500064, 2147500065, 2147500066, 2147500071, 2147500072,
    2147500074, 2147483699, 2147483685, 603980936, 603981562, 603981608, 0, 1073749768,
    805306396, 0, 603980939, 603981110, 0, 4026531840, 0, 1073749520, 805306396, 0, 1073750032,
    805306397, 0, 2852126730, 3342337, 262162, 2164271120, 2164271121, 2197825538, 2147493917,
    2147493920, 2147493921, 2147493926, 2185232407, 2147493928, 2147493929, 2147493930,
    2147493931, 2168465420, 2105550861, 2147493922, 2147493903, 2147493927, 2147493932,
    2147483667, 603980974, 603980443, 603980445, 0, 2147483676, 603980974, 603981015, 603981035,
    0, 4026531840, 1073749272, 805306395, 0, 3087008977, 2768240662, 0, 131077, 2147504156,
    2147498013, 2147489822, 2151706651, 2147483679, 603980977, 603980820, 0, 1073747720,
    805306397, 3221225472, 0, 603980977, 603980896, 0, 1073742600, 805306395, 3221225472,
    0, 2583691292, 3866628, 65537, 4026531840, 268435456, 603980977, 603980942, 0, 4026531840,
    2499805211, 0, 65537, 4026531840, 0, 0, 2852126728, 3866628, 196616, 2147493912, 2147493889,
    2147493914, 2155882531, 2155882524, 2147483699, 2147493940, 2147493911, 2147483685,
    603980936, 603981562, 603981608, 0, 1073749768, 805306396, 0, 4026531840, 2852126730,
    3932161, 262161, 2164260880, 2164260881, 2197815298, 2147483677, 2147483680, 2147483681,
    2147483686, 2147483687, 2147483688, 2147483689, 2147483690, 2147483691, 2164260876,
    2105540621, 2147483682, 2147483663, 2147493932, 2147483677, 603981094, 603980893, 603981110,
    0, 2147483677, 603981094, 603981067, 603981552, 0, 4026531840, 0, 1073750280, 805306397,
    0, 2852126723, 3801092, 262160, 2164260880, 2164260881, 2197815298, 2147483677, 2147483680,
    2147483681, 2147483686, 2147483687, 2147483688, 2147483689, 2147483690, 2147483691,
    2147483660, 2105540621, 2147483682, 2147483663, 603980939, 603981110, 0, 4026531840,
    0, 3087009072, 2499805213, 0, 65539, 4026531840, 0, 0, 603981094, 603981070, 0, 2499805213,
    0, 65537, 4026531840, 0, 0, 2852126731, 3997697, 262160, 2164267024, 2164267025, 2197821442,
    2147483677, 2147489824, 2147489825, 2147489830, 2147498023, 2147498024, 2147498025,
    2147498026, 2147498027, 2147489804, 2105546765, 2147489826, 2147489807, 2147483678,
    603981142, 0, 2147483678, 603980862, 603981164, 0, 2147483678, 603980862, 603981388,
    0, 4026531840, 0, 2852192263, 4063233, 1, 2147483677, 268435456, 2147483718, 603981154,
    603983543, 603983513, 603981110, 0, 4026531840, 2852192260, 4128769, 1, 2147483678, 268435456,
    1073750552, 805306398, 0, 4026531840, 0, 2852126728, 4194305, 196618, 2160074768, 2176851985,
    2176851970, 2147491872, 2147491852, 2147483661, 2147491878, 2147491855, 2147491873,
    2147491874, 2147483679, 603981334, 603981186, 0, 2147483679, 603981334, 603981254, 0,
    4026531840, 2583756813, 1114113, 65538, 4026531840, 0, 603981194, 0, 0, 2785017860, 4259844,
    262173, 2231369744, 2210398209, 2231369730, 2248146979, 2248146980, 2147483685, 2218790934,
    2218786839, 2218786840, 2147483689, 2214592538, 2147483691, 2168455180, 2168455181,
    2147483678, 2164260879, 2168455185, 2147483676, 2147483677, 2147483679, 2147483680,
    2147483681, 2147483682, 2147483686, 2147483687, 2147483688, 2147483690, 2147483699,
    2147483700, 603981232, 0, 603981244, 0, 4026531840, 0, 2852192261, 4325377, 1, 2147483661,
    2147483666, 268435456, 1073745672, 805306399, 0, 4026531840, 805306399, 0, 2852192261,
    2424833, 1, 2147483661, 2147483665, 268435456, 603981242, 603980425, 0, 4026531840, 2852126756,
    4390913, 196617, 2160117776, 2164295697, 2172694530, 2147483680, 2147508236, 2147491873,
    2147547174, 2147528719, 2147500066, 268435456, 603981304, 603981164, 0, 268435456, 603981307,
    603981164, 0, 268435456, 603981310, 603980781, 0, 2147483656, 268435456, 603981242, 603980015,
    0, 2147483661, 268435456, 603981242, 603980300, 0, 603981242, 603980083, 0, 2147483660,
    268435456, 603981242, 603980284, 603983335, 0, 2147483680, 268435456, 1073752328, 805306399,
    0, 4026531840, 0, 1073751056, 805306399, 0, 1073751312, 805306399, 0, 2852192260, 3670017,
    1, 2147483683, 268435456, 1073751576, 805306399, 0, 4026531840, 0, 2852126727, 3473412,
    65539, 2147491876, 2151677983, 2147491877, 268435456, 1073750800, 805306399, 0, 268435456,
    603980865, 0, 4026531840, 3087009312, 2499805215, 0, 65539, 4026531840, 0, 0, 603981334,
    603981320, 0, 2499805215, 0, 65537, 4026531840, 0, 0, 2852192261, 4456449, 1, 2147483686,
    2147483680, 268435456, 1073752328, 805306400, 0, 4026531840, 2852126736, 4521985, 131077,
    2151677964, 2147500048, 2155880450, 2147491855, 2147508262, 2147483681, 603981386,
    603980005, 0, 2147483681, 603981386, 603980083, 0, 2147483681, 603981386, 603980274,
    0, 2147483681, 603981386, 603981350, 0, 4026531840, 0, 805306401, 0, 2583691303, 4653057,
    327683, 4026531840, 0, 0, 2147483682, 603981410, 0, 2147483682, 603981432, 0, 2147483682,
    603981454, 0, 2147483682, 603981476, 0, 2147483682, 603981498, 0, 0, 2852192263, 4718593,
    1, 2147483687, 268435456, 2147483683, 603981422, 603981536, 603981518, 603981360, 0,
    4026531840, 2852192260, 3670017, 1, 2147483683, 268435456, 1073752600, 805306402, 0,
    4026531840, 0, 2852192263, 4784129, 1, 2147483688, 268435456, 2147483683, 603981444,
    603981536, 603981518, 603981360, 0, 4026531840, 2852192260, 3670017, 1, 2147483683, 268435456,
    1073752856, 805306402, 0, 4026531840, 0, 2852192263, 4849665, 1, 2147483689, 268435456,
    2147483683, 603981466, 603981536, 603981518, 603981360, 0, 4026531840, 2852192260, 3670017,
    1, 2147483683, 268435456, 1073753112, 805306402, 0, 4026531840, 0, 2852192263, 4915201,
    1, 2147483690, 268435456, 2147483683, 603981488, 603981536, 603981518, 603981360, 0,
    4026531840, 2852192260, 3670017, 1, 2147483683, 268435456, 1073753368, 805306402, 0,
    4026531840, 0, 2852192260, 4980737, 1, 2147483691, 268435456, 603981508, 603981164, 0,
    4026531840, 0, 2852192260, 3670017, 1, 2147483683, 268435456, 1073753624, 805306402,
    0, 4026531840, 0, 1073742600, 805306403, 0, 2852126723, 3604481, 131077, 2151677964, 2147483664,
    2155872258, 2147483663, 2147483686, 603981533, 603981360, 0, 4026531840, 1073742864,
    805306403, 0, 3087009514, 2499805219, 0, 65539, 4026531840, 0, 0, 603981536, 603981521,
    0, 2499805219, 0, 65537, 4026531840, 0, 0, 2852192261, 5111809, 1, 2147483692, 2147483684,
    268435456, 1073753864, 805306404, 0, 4026531840, 2852126723, 5177345, 65538, 2147483698,
    2147483693, 268435456, 603981572, 0, 4026531840, 0, 2852126732, 5242881, 65539, 2155872302,
    2147500081, 2147491888, 268435456, 603981592, 603981618, 0, 268435456, 603981602, 603980333,
    0, 268435456, 603981605, 603980333, 0, 4026531840, 0, 2852192260, 5308417, 1, 2147483695,
    268435456, 1073754152, 805306405, 0, 4026531840, 0, 1073754400, 805306405, 0, 1073754656,
    805306405, 0, 2852192261, 5439489, 1, 2147483699, 2147483686, 268435456, 1073754888,
    805306406, 0, 4026531840, 2852126734, 5505053, 131078, 2147491848, 2160066561, 2160074754,
    2147491843, 2147491845, 2147502126, 2147483687, 805306407, 603981665, 0, 2147483687,
    603981665, 603981642, 603981685, 0, 2147483687, 603981665, 603981642, 603981737, 0, 4026531840,
    805306407, 0, 2852126729, 5636125, 131077, 2147483656, 2147483653, 2155872258, 2147483651,
    2147489838, 603981662, 603981685, 0, 2147483689, 268435456, 603981662, 603981747, 603981618,
    0, 4026531840, 1073743632, 805306407, 0, 3087009647, 2768240646, 0, 65538, 2147483689,
    2143295527, 805306407, 3221225472, 0, 603981665, 603981644, 0, 4026531840, 0, 2499805223,
    0, 65537, 4026531840, 0, 0, 2852126732, 2687005, 131076, 2147495944, 2147489797, 2147502082,
    2147483651, 2147483688, 603981705, 0, 2147483688, 603981713, 0, 2147483688, 603981721,
    0, 2147483688, 603981729, 0, 4026531840, 2852192259, 1310721, 1, 2147483651, 268435456,
    805306408, 0, 4026531840, 2852192259, 2752513, 1, 2147483653, 268435456, 805306408, 0,
    4026531840, 2852192259, 65565, 1, 2147483656, 268435456, 805306408, 0, 4026531840, 2852192259,
    1835009, 1, 2147483650, 268435456, 805306408, 0, 4026531840, 2852192261, 5701633, 1, 2147483694,
    2147483689, 268435456, 603981747, 603981618, 0, 4026531840, 2852192260, 5308417, 1, 2147483695,
    268435456, 1073755160, 805306409, 0, 4026531840, 0, 2852192261, 1114113, 1, 2147483661,
    2147483663, 268435456, 805306383, 603981767, 0, 4026531840, 2852192260, 5701633, 1, 2147483694,
    268435456, 603981777, 603981618, 0, 4026531840, 0, 2852192260, 5308417, 1, 2147483695,
    268435456, 1073755432, 805306410, 0, 4026531840, 0, 2852192260, 5767172, 1, 2147483700,
    2147483691, 268435456, 603981797, 0, 4026531840, 0, 2583691317, 5832708, 131075, 4026531840,
    0, 0, 268435456, 603981809, 0, 268435456, 603981917, 0, 2583756813, 1114113, 65538, 4026531840,
    0, 603981817, 0, 0, 2785017860, 5898244, 65538, 2151677974, 2147487774, 603981827, 0, 603981905,
    0, 4026531840, 2852192261, 5963780, 1, 2147483661, 2147483665, 268435456, 603981837,
    603980425, 0, 4026531840, 2852192260, 6029316, 1, 2147483678, 268435456, 603981847, 603982069,
    0, 4026531840, 0, 2852126734, 6094852, 65539, 2147483704, 2151698459, 2147493969, 2147483702,
    268435456, 603981869, 603982860, 0, 2147483704, 268435456, 603981895, 603982953, 0, 268435456,
    1073757232, 805306411, 0, 4026531840, 0, 2852126729, 6160388, 65538, 2147483729, 2143299611,
    2147483704, 268435456, 603981885, 603982953, 0, 268435456, 1073756472, 805306411, 0,
    4026531840, 0, 2852192260, 6225924, 1, 2147483675, 268435456, 1073755712, 805306411,
    0, 4026531840, 0, 2852192260, 6225924, 1, 2147483675, 268435456, 1073756216, 805306411,
    0, 4026531840, 0, 2852192262, 6291460, 1, 2147483661, 2147483666, 268435456, 1073745672,
    805306386, 603981837, 0, 4026531840, 0, 2852192260, 6029316, 1, 2147483678, 268435456,
    603981927, 603982069, 0, 4026531840, 0, 2852126734, 6094852, 65539, 2147483704, 2151698459,
    2147493969, 2147483702, 268435456, 603981949, 603982860, 0, 2147483704, 268435456, 603981975,
    603982953, 0, 268435456, 1073757480, 805306411, 0, 4026531840, 0, 2852126729, 6160388,
    65538, 2147483729, 2143299611, 2147483704, 268435456, 603981965, 603982953, 0, 268435456,
    1073756976, 805306411, 0, 4026531840, 0, 2852192260, 6225924, 1, 2147483675, 268435456,
    1073755960, 805306411, 0, 4026531840, 0, 2852192260, 6225924, 1, 2147483675, 268435456,
    1073756720, 805306411, 0, 4026531840, 0, 2852126736, 6356996, 131076, 2147508279, 2147491845,
    2147500046, 2134900739, 2147483692, 603982053, 603982009, 0, 2147483692, 603982053,
    603982017, 0, 2147483692, 603982053, 603982025, 0, 2147483692, 603982053, 603982033,
    0, 4026531840, 2852192259, 6422532, 1, 2147483651, 268435456, 805306412, 0, 4026531840,
    2852192259, 6488068, 1, 2147483653, 268435456, 805306412, 0, 4026531840, 2852192259,
    6553604, 1, 2147483662, 268435456, 805306412, 0, 4026531840, 2852192259, 6619140, 1, 2147483703,
    268435456, 805306412, 0, 4026531840, 2852126724, 6684680, 131076, 2147483703, 2147483653,
    2147483662, 2134900739, 268435456, 1073741840, 805306412, 0, 4026531840, 3087010031,
    2499805228, 0, 65539, 4026531840, 0, 0, 603982053, 603982041, 0, 2499805228, 0, 65537, 4026531840,
    0, 0, 2852126738, 6750212, 196622, 2151678008, 2197844032, 2147512378, 2176872507, 2147512380,
    2160095293, 2168483910, 2155900991, 2147512389, 2160095303, 2147512395, 2147512398,
    2147498063, 2147498064, 2147483693, 2147483719, 603982105, 603983589, 603983563, 603982107,
    0, 2147483693, 2147483720, 603982105, 603983625, 603983609, 603982788, 0, 2147483693,
    603982105, 603982167, 0, 4026531840, 805306413, 0, 2852192260, 6881284, 1, 2147483704,
    2147483694, 268435456, 603982117, 0, 4026531840, 0, 2852192260, 6946820, 1, 2147483705,
    268435456, 603982127, 603982147, 0, 4026531840, 0, 2852192260, 7012356, 1, 2147483682,
    268435456, 603982137, 603982167, 0, 4026531840, 0, 2852192260, 7077892, 1, 2147483683,
    268435456, 1073757744, 805306414, 0, 4026531840, 0, 2852192261, 7143428, 1, 2147483677,
    2147483695, 268435456, 603982157, 603983641, 0, 4026531840, 2852192260, 6029316, 1, 2147483678,
    268435456, 1073757976, 805306415, 0, 4026531840, 0, 2852126741, 7208964, 196619, 2147489856,
    2147489861, 2147518522, 2172649531, 2147489852, 2130712637, 2164267078, 2151684159,
    2147489863, 2147489867, 2147504206, 2147483696, 603982203, 0, 2147483696, 2147483722,
    603982213, 603983813, 603983779, 603982306, 0, 2147483696, 2147483723, 603982285, 603983859,
    603983833, 603982775, 0, 2147483696, 603982303, 603983879, 0, 4026531840, 2852192260,
    7274500, 1, 2147483707, 268435456, 1073750280, 805306416, 0, 4026531840, 0, 2852126725,
    7340036, 131078, 2147487800, 2164264961, 2147483706, 2151682075, 2147487779, 2147487825,
    603982229, 0, 1073758984, 805306416, 0, 4026531840, 0, 2785017860, 7405572, 65538, 2151678030,
    2147487828, 603982239, 0, 603982272, 0, 4026531840, 2852192263, 7471108, 1, 2147483706,
    268435456, 2147483723, 603982251, 603983859, 603983833, 603982775, 0, 4026531840, 2852126728,
    7340036, 131078, 2147493944, 2164271105, 2147483706, 2151688219, 2147493923, 2147493969,
    2147483724, 268435456, 603982269, 603983889, 0, 1073758744, 805306416, 0, 4026531840,
    1073758240, 805306416, 0, 2852192261, 7602180, 1, 2147483706, 2147483724, 268435456,
    603982282, 603983889, 0, 4026531840, 1073758480, 805306416, 0, 2852126728, 7340036, 131078,
    2147493944, 2164271105, 2147483706, 2151688219, 2147493923, 2147493969, 2147483724,
    268435456, 603982282, 603983889, 0, 1073758984, 805306416, 0, 4026531840, 1073742600,
    805306416, 0, 2852126744, 7667716, 196616, 2147502144, 2147508293, 2147520583, 2147526731,
    2147483708, 2130712637, 2147514438, 2126524479, 2147483697, 603982342, 0, 2147483697,
    603982377, 0, 2147483697, 603982515, 0, 2147483697, 603982553, 0, 2147483697, 603982591,
    0, 2147483697, 603982601, 0, 2147483697, 603982611, 0, 2147483697, 603982657, 0, 4026531840,
    2852192259, 7733252, 1, 2147483708, 268435456, 603982350, 0, 4026531840, 2852126728,
    7798788, 65538, 2147489843, 2143289349, 268435456, 603982364, 0, 2147483685, 603982374,
    603981562, 603981608, 0, 4026531840, 2852192260, 6488068, 1, 2147483653, 268435456, 1073759256,
    805306417, 0, 4026531840, 0, 1073759504, 805306417, 0, 2852192259, 7864324, 1, 2147483709,
    268435456, 603982385, 0, 4026531840, 2852126729, 7929860, 65539, 2147496010, 2151678009,
    2147489859, 268435456, 603982401, 0, 268435456, 603982464, 0, 268435456, 603982502, 0,
    4026531840, 2852192259, 7995396, 1, 2147483710, 268435456, 603982409, 0, 4026531840,
    2852126728, 8060932, 65538, 2147483661, 2143293445, 603982423, 0, 2147483725, 268435456,
    1073768200, 1073759776, 805306417, 0, 4026531840, 2785017860, 8126468, 131079, 2147487800,
    2168459265, 2160066582, 2151682075, 2147487779, 2147487802, 2147487825, 603982439,
    0, 603982452, 0, 4026531840, 0, 2852192261, 5963780, 1, 2147483661, 2147483665, 268435456,
    603982449, 603980425, 0, 4026531840, 1073759776, 805306417, 0, 2852192262, 8192004, 1,
    2147483661, 2147483666, 268435456, 1073745672, 1073759776, 805306417, 0, 4026531840,
    0, 2852192259, 8257540, 1, 2147483716, 268435456, 603982472, 0, 4026531840, 2852126729,
    8323073, 131078, 2164260876, 2147489797, 2160066562, 2147483663, 2147483664, 2147483686,
    603982492, 603981360, 0, 2147483725, 268435456, 1073768200, 805306445, 603982492, 0,
    4026531840, 0, 2852192260, 6488068, 1, 2147483653, 268435456, 1073760552, 805306417,
    0, 4026531840, 0, 2852192260, 7995396, 1, 2147483710, 268435456, 603982512, 603983907,
    0, 4026531840, 0, 1073761568, 805306417, 0, 2852192259, 8388612, 1, 2147483711, 268435456,
    603982523, 0, 4026531840, 2852192259, 7995396, 1, 2147483710, 268435456, 603982531, 0,
    4026531840, 2852192263, 7012356, 1, 2147483682, 268435456, 2147483726, 603982543, 603983923,
    603983917, 603982683, 0, 4026531840, 2852192260, 7077892, 1, 2147483683, 268435456, 1073760040,
    805306417, 0, 4026531840, 0, 2852192259, 8454148, 1, 2147483712, 268435456, 603982561,
    0, 4026531840, 2852126727, 8519684, 65538, 2147489858, 2147483713, 268435456, 603982575,
    0, 268435456, 603982588, 603982755, 0, 4026531840, 0, 2852192260, 8585220, 1, 2147483714,
    268435456, 603982585, 603982755, 0, 4026531840, 0, 1073760288, 805306417, 0, 1073762072,
    805306417, 0, 2852192260, 8650756, 1, 2147483717, 268435456, 1073760776, 805306417, 0,
    4026531840, 0, 2852192260, 8716292, 1, 2147483718, 268435456, 1073761032, 805306417,
    0, 4026531840, 0, 2852192259, 8781828, 1, 2147483719, 268435456, 603982619, 0, 4026531840,
    2852192259, 8847364, 1, 2147483720, 268435456, 603982627, 0, 4026531840, 2852192259,
    8912900, 1, 2147483721, 268435456, 603982635, 0, 4026531840, 2852192263, 7143428, 1, 2147483677,
    268435456, 2147483727, 603982647, 603983958, 603983955, 603983907, 0, 4026531840, 2852192260,
    6029316, 1, 2147483678, 268435456, 1073761328, 805306417, 0, 4026531840, 0, 2852192259,
    8978436, 1, 2147483723, 268435456, 603982665, 0, 4026531840, 2852126727, 9043972, 131079,
    2168463416, 2168463361, 2147491898, 2151686171, 2147491875, 2147483724, 2147491921,
    268435456, 1073761808, 805306417, 0, 1073762312, 805306417, 0, 4026531840, 2852192260,
    9109508, 1, 2147483725, 2147483698, 268435456, 603982693, 0, 4026531840, 0, 2852192259,
    7143428, 1, 2147483677, 268435456, 603982701, 0, 4026531840, 2852126725, 9175044, 65538,
    2147487798, 2147483661, 603982713, 0, 268435456, 603982733, 0, 4026531840, 0, 2785017860,
    5898244, 65538, 2151677974, 2147487774, 603982723, 0, 603982743, 0, 4026531840, 2852192261,
    5963780, 1, 2147483661, 2147483665, 268435456, 603982733, 603980425, 0, 4026531840, 2852192260,
    6029316, 1, 2147483678, 268435456, 1073762592, 805306418, 0, 4026531840, 0, 2852192262,
    6291460, 1, 2147483661, 2147483666, 268435456, 1073745672, 805306386, 603982733, 0, 4026531840,
    0, 2852192261, 7143428, 1, 2147483677, 2147483699, 268435456, 603982765, 603983980, 0,
    4026531840, 2852192260, 6029316, 1, 2147483678, 268435456, 1073757976, 805306419, 0,
    4026531840, 0, 2852192261, 9240580, 1, 2147483726, 2147483700, 268435456, 603982785,
    603982683, 0, 4026531840, 1073762832, 805306420, 0, 2583691343, 9306116, 131075, 4026531840,
    0, 0, 2147483701, 603982800, 0, 2147483701, 603982830, 0, 2852192260, 9371652, 1, 2147483727,
    268435456, 603982810, 603982755, 0, 4026531840, 0, 2852192260, 7012356, 1, 2147483682,
    268435456, 603982820, 603982167, 0, 4026531840, 0, 2852192260, 7077892, 1, 2147483683,
    268435456, 1073763112, 805306421, 0, 4026531840, 0, 2852192260, 9437188, 1, 2147483728,
    268435456, 603982840, 603982755, 0, 4026531840, 0, 2852192260, 7012356, 1, 2147483682,
    268435456, 603982850, 603982167, 0, 4026531840, 0, 2852192260, 7077892, 1, 2147483683,
    268435456, 1073763368, 805306421, 0, 4026531840, 0, 2852192260, 8716292, 1, 2147483718,
    268435456, 603982870, 603982917, 0, 4026531840, 0, 603982873, 603982069, 0, 2852126733,
    6815748, 131076, 2147483704, 2151698433, 2147493969, 2147504155, 2147483702, 268435456,
    603982895, 603982860, 0, 2147483704, 268435456, 603982914, 603982953, 0, 1073764384,
    805306422, 0, 4026531840, 0, 2852126728, 9502724, 65539, 2155882523, 2143299585, 2147483729,
    2147483704, 268435456, 603982911, 603982953, 0, 1073764136, 805306422, 0, 4026531840,
    0, 1073763632, 805306422, 0, 1073763880, 805306422, 0, 2852192260, 9109508, 1, 2147483725,
    2147483703, 268435456, 603982927, 0, 4026531840, 0, 2852192259, 7143428, 1, 2147483677,
    268435456, 603982935, 0, 4026531840, 2852192259, 9568260, 1, 2147483702, 268435456, 603982943,
    0, 4026531840, 2852192260, 6029316, 1, 2147483678, 268435456, 1073762592, 805306423,
    0, 4026531840, 0, 2852192260, 9633796, 1, 2147483730, 268435456, 603982963, 603982755,
    0, 4026531840, 0, 2852126729, 9699332, 131076, 2147496017, 2143301633, 2147483734, 2147495963,
    2147483729, 268435456, 603982981, 603984042, 603982755, 0, 1073764888, 805306424, 0,
    4026531840, 0, 1073764640, 805306424, 0, 2147483705, 603982988, 603982917, 0, 603982991,
    603982069, 0, 2852126733, 9764868, 65539, 2147483704, 2151698433, 2147493969, 2147483702,
    268435456, 603983011, 603982860, 0, 2147483704, 268435456, 603983028, 603982953, 0, 1073765904,
    805306425, 0, 4026531840, 2852126728, 9830404, 65538, 2147483729, 2143299585, 2147483704,
    268435456, 603983025, 603982953, 0, 1073765656, 805306425, 0, 4026531840, 1073765152,
    805306425, 0, 1073765400, 805306425, 0, 2852126740, 2686976, 131077, 2147491848, 2147516421,
    2147483650, 2151702531, 2147500039, 2147483711, 603983125, 603983061, 0, 2147483711,
    603983125, 603983071, 0, 2147483711, 603983125, 603983081, 0, 2147483711, 603983125,
    603983091, 0, 2147483711, 603983125, 603983101, 0, 4026531840, 0, 2852192260, 1835009,
    1, 2147483650, 268435456, 1073742600, 805306431, 0, 4026531840, 0, 2852192260, 65565,
    1, 2147483656, 268435456, 1073742600, 805306431, 0, 4026531840, 0, 2852192260, 65549,
    1, 2147483655, 268435456, 1073742600, 805306431, 0, 4026531840, 0, 2852192260, 1310721,
    1, 2147483651, 268435456, 1073742600, 805306431, 0, 4026531840, 0, 2852192260, 2752513,
    1, 2147483653, 268435456, 1073742600, 805306431, 0, 4026531840, 0, 2852126724, 9961480,
    131077, 2147483656, 2147483653, 2147483650, 2151677955, 2147483655, 268435456, 1073742864,
    805306431, 0, 4026531840, 0, 3087011103, 2499805247, 0, 65539, 4026531840, 0, 0, 603983125,
    603983111, 0, 2499805247, 0, 65537, 4026531840, 0, 0, 2852126728, 10027009, 65538, 2147483653,
    2143297539, 2147483712, 603983319, 603983155, 0, 2147483712, 603983319, 603983165, 0,
    4026531840, 2852192260, 2752513, 1, 2147483653, 268435456, 1073767176, 805306432, 0,
    4026531840, 0, 2852192260, 1310721, 1, 2147483651, 268435456, 1073767176, 805306432,
    0, 4026531840, 0, 2852126726, 10092544, 327712, 2147491872, 2202017793, 2214600706, 2222989315,
    2147491876, 2218786821, 2147491878, 2222985223, 2227183624, 2147491881, 2147491882,
    2147491883, 2147491852, 2147491853, 2147491873, 2147491855, 2147491856, 2147491857,
    2147491874, 2147491891, 2147491892, 2147491875, 2147491877, 2147491863, 2147491864,
    2147491879, 2147491866, 2147491880, 2147491868, 2147491869, 2147491870, 2147491871,
    603983217, 0, 603983271, 0, 603983309, 0, 4026531840, 2785017859, 10158088, 327716, 2147483680,
    2202009601, 2214592514, 2222981123, 2147483684, 2218786821, 2147483686, 2222981127,
    2248146952, 2147483689, 2147483690, 2147483691, 2147483660, 2147483661, 2147483681,
    2147483663, 2147483664, 2222981137, 2147483682, 2147483699, 2147483700, 2147483683,
    2147483685, 2147483671, 2185232408, 2147483687, 2181038106, 2147487771, 2147483676,
    2147483677, 2147483678, 2147483679, 2147483688, 2147487800, 2147487802, 2147487825,
    603983261, 0, 4026531840, 4026531840, 0, 2852192260, 10092544, 1, 2147483653, 268435456,
    1073743632, 805306432, 0, 4026531840, 0, 2785017857, 1638426, 327713, 2147483680, 2202009601,
    2231369730, 2147483683, 2147483684, 2231369733, 2147483686, 2231369735, 2147483688,
    2147483689, 2147483690, 2235564043, 2147483660, 2147483661, 2147483681, 2147483663,
    2147483664, 2147483665, 2147483666, 2147483699, 2147483700, 2147483669, 2147483682,
    2147483671, 2147483672, 2147483685, 2147483674, 2147483687, 2147483676, 2147483677,
    2147483678, 2147483679, 2147483691, 4026531840, 4026531840, 2852126724, 10223624, 1,
    2147483651, 268435456, 1073743632, 805306432, 0, 4026531840, 0, 3087011297, 2499805248,
    0, 65539, 4026531840, 0, 0, 603983319, 603983175, 0, 2499805248, 0, 65537, 4026531840, 0,
    0, 2852126732, 2686977, 65539, 2147500034, 2151686147, 2147483653, 2147483713, 603983397,
    603983355, 0, 2147483713, 603983397, 603983365, 0, 2147483713, 603983397, 603983375,
    0, 4026531840, 0, 2852192260, 2752513, 1, 2147483653, 268435456, 1073767176, 805306433,
    0, 4026531840, 0, 2852192260, 1310721, 1, 2147483651, 268435456, 1073767176, 805306433,
    0, 4026531840, 0, 2852192260, 1835009, 1, 2147483650, 268435456, 1073767176, 805306433,
    0, 4026531840, 0, 2852126724, 10289152, 65539, 2147483650, 2151677955, 2147483653, 268435456,
    1073743632, 805306433, 0, 4026531840, 0, 3087011375, 2499805249, 0, 65539, 4026531840,
    0, 0, 603983397, 603983385, 0, 2499805249, 0, 65537, 4026531840, 0, 0, 2852126728, 10354689,
    65538, 2147483650, 2147491843, 2147483714, 603983457, 603983427, 0, 2147483714, 603983457,
    603983437, 0, 4026531840, 2852192260, 1835009, 1, 2147483650, 268435456, 1073767176,
    805306434, 0, 4026531840, 0, 2852192260, 1310721, 1, 2147483651, 268435456, 1073767176,
    805306434, 0, 4026531840, 0, 2852126724, 10420225, 65538, 2147483650, 2147483651, 268435456,
    1073743632, 805306434, 0, 4026531840, 3087011435, 2499805250, 0, 65539, 4026531840, 0,
    0, 603983457, 603983447, 0, 2499805250, 0, 65537, 4026531840, 0, 0, 1073767176, 805306435,
    0, 2852126723, 2686976, 131076, 2147483656, 2147483653, 2147483650, 2147483651, 603983488,
    603980469, 0, 4026531840, 0, 1073743632, 805306435, 0, 3087011469, 2499805251, 0, 65539,
    4026531840, 0, 0, 603983491, 603983476, 0, 2499805251, 0, 65537, 4026531840, 0, 0, 1073767432,
    805306436, 0, 1073767688, 805306437, 0, 1073742600, 805306438, 0, 2852126723, 10616833,
    262160, 2164260880, 2164260881, 2197815298, 2147483677, 2147483680, 2147483681, 2147483686,
    2147483687, 2147483688, 2147483689, 2147483690, 2147483691, 2147483660, 2105540621,
    2147483682, 2147483663, 603983540, 603981110, 0, 4026531840, 0, 1073742864, 805306438,
    0, 3087011525, 2768240647, 0, 65538, 2151684126, 2147483718, 603983543, 603983516, 0,
    1073742600, 805306438, 3221225472, 0, 4026531840, 2499805254, 0, 65537, 4026531840, 0,
    0, 1073742600, 805306439, 0, 2785017859, 10682372, 65538, 2147487814, 2147483705, 603983576,
    0, 4026531840, 4026531840, 0, 2852192261, 10747908, 1, 2147483704, 2147483694, 268435456,
    603983586, 603982117, 0, 4026531840, 1073742864, 805306439, 0, 3087011571, 2768240647,
    0, 1, 2147483719, 2583691320, 6815748, 65537, 4026531840, 603983589, 603983566, 0, 4026531840,
    0, 2499805255, 0, 65537, 4026531840, 0, 0, 1073742600, 805306440, 0, 2852126723, 10813444,
    65538, 2147483728, 2147483727, 603983622, 603982788, 0, 4026531840, 0, 1073742864, 805306440,
    0, 3087011603, 2499805256, 0, 65539, 4026531840, 0, 0, 603983625, 603983612, 0, 2499805256,
    0, 65537, 4026531840, 0, 0, 2852126729, 10878977, 65538, 2147483661, 2143297541, 2147483721,
    603983763, 603983657, 0, 2147483721, 603983763, 603983687, 603983907, 0, 4026531840,
    0, 2583756813, 1114113, 65538, 4026531840, 0, 603983665, 0, 0, 2785017860, 10944516, 131076,
    2147487757, 2143293445, 2151677974, 2147487774, 603983677, 0, 603983690, 0, 4026531840,
    2852192261, 2424833, 1, 2147483661, 2147483665, 268435456, 603983687, 603980425, 0, 4026531840,
    1073742600, 805306441, 0, 2852192262, 11075585, 1, 2147483661, 2147483666, 268435456,
    1073745672, 1073742600, 805306441, 0, 4026531840, 0, 2852126724, 11141124, 65539, 2147487774,
    2151682053, 2147483661, 603983714, 0, 603983751, 0, 4026531840, 0, 2785017860, 11206660,
    131076, 2147487757, 2143293445, 2151677974, 2147487774, 603983726, 0, 603983739, 0, 4026531840,
    2852192261, 11272193, 1, 2147483661, 2147483665, 268435456, 603983736, 603980425, 0,
    4026531840, 1073742864, 805306441, 0, 2852192262, 11010049, 1, 2147483661, 2147483666,
    268435456, 1073745672, 1073742864, 805306441, 0, 4026531840, 0, 2852126726, 11337732,
    1, 2147483653, 2147483725, 268435456, 1073768200, 1073742864, 805306441, 0, 4026531840,
    0, 3087011741, 2499805257, 0, 65539, 4026531840, 0, 0, 603983763, 603983702, 0, 2499805257,
    0, 65537, 4026531840, 0, 0, 1073742600, 805306442, 0, 2785017859, 11403268, 196618, 2147483712,
    2147483717, 2147483719, 2147483723, 2168455228, 2130706493, 2155872326, 2126512191,
    2147487822, 2147487828, 603983800, 0, 4026531840, 4026531840, 0, 2852192260, 11468801,
    1, 2147483706, 268435456, 603983810, 603982306, 0, 4026531840, 0, 1073749272, 805306442,
    0, 3087011795, 2768240647, 0, 1, 2147483722, 2583691322, 7340036, 65537, 4026531840, 603983813,
    603983782, 0, 4026531840, 0, 2499805258, 0, 65537, 4026531840, 0, 0, 1073742600, 805306443,
    0, 2785017859, 11534340, 65538, 2151678030, 2147487828, 603983846, 0, 4026531840, 4026531840,
    0, 2852192260, 11468801, 1, 2147483706, 268435456, 603983856, 603982775, 0, 4026531840,
    0, 1073749272, 805306443, 0, 3087011841, 2768240647, 0, 1, 2147483723, 2583691322, 7340036,
    65537, 4026531840, 603983859, 603983836, 0, 4026531840, 0, 2499805259, 0, 65537, 4026531840,
    0, 0, 2852192260, 11599873, 1, 2147483706, 2147483724, 268435456, 603983889, 0, 4026531840,
    0, 2852192259, 11665409, 1, 2147483732, 268435456, 603983897, 0, 4026531840, 2852192260,
    11730945, 1, 2147483725, 268435456, 1073767960, 805306444, 0, 4026531840, 0, 2852192261,
    2752513, 1, 2147483653, 2147483725, 268435456, 1073768200, 805306445, 0, 4026531840,
    1073742600, 805306446, 0, 1073749272, 805306446, 0, 3087011917, 2768240660, 0, 1, 2147483726,
    2583691349, 11862020, 65537, 4026531840, 268435456, 2583691341, 9109508, 65537, 4026531840,
    2147483698, 268435456, 2583691293, 7143428, 65537, 4026531840, 268435456, 603983923,
    603983920, 603982701, 0, 4026531840, 2499805262, 0, 65537, 4026531840, 0, 0, 1073742600,
    805306447, 0, 3087011942, 2768240650, 0, 1, 2147483727, 2583691269, 11337732, 65537, 4026531840,
    2147483725, 268435456, 1073768200, 1073742864, 3221225472, 0, 4026531840, 2499805263,
    0, 65537, 4026531840, 0, 0, 2852126730, 8323073, 131078, 2164260876, 2147493893, 2160066562,
    2147483663, 2147483664, 2147483686, 2147483728, 603984026, 603984000, 603981360, 0,
    2147483728, 603984026, 603984000, 603983907, 0, 4026531840, 1073742600, 805306448, 0,
    2852126729, 12058628, 131078, 2164260876, 2147489797, 2160066562, 2147483663, 2147483664,
    2147483686, 603984023, 603981360, 0, 2147483725, 268435456, 1073768200, 1073742864,
    805306448, 0, 4026531840, 0, 1073742864, 805306448, 0, 3087012004, 2499805264, 0, 65539,
    4026531840, 0, 0, 603984026, 603984003, 0, 2499805264, 0, 65537, 4026531840, 0, 0, 1073757968,
    805306449, 0
]);

function isTokenActive(token_id, row) {
    var index = (row * 3) + (token_id >> 5);;
    var shift = 1 << (31 & (token_id));;
    return (token_lookup[index] & shift) != 0;
}

function pre_scan(l, token) {
    var tk_length = l.token_length;;
    var bt_length = l.byte_length;;
    var type_cache = l._type;;
    scan(l, token, 0);
    var type_out = l._type;;
    l._type = type_cache;
    l.token_length = tk_length;
    l.byte_length = bt_length;
    return type_out > 0;
}

function scan_core(l, tk_row) {
    switch ((l.get_byte_at(l.byte_offset) & 127)) {
        case 35:
            {
                if (l.get_byte_at(l.byte_offset) == 35) {
                    if (isTokenActive(23, tk_row)) {
                        l.setToken(23, 1, 1);
                        return;
                    }
                }
            }
            break;
        case 36:
            {
                if (2 == compare(l, l.byte_offset, 38, 2, token_sequence_lookup)) {
                    if (l.get_byte_at(l.byte_offset + 2) == 109) {
                        if (isTokenActive(44, tk_row) && 3 == compare(l, l.byte_offset + 3, 41, 3, token_sequence_lookup)) {
                            l.setToken(44, 6, 6);
                            return;
                        }
                    } else if (l.get_byte_at(l.byte_offset + 2) == 111) {
                        if (isTokenActive(38, tk_row) && l.get_byte_at(l.byte_offset + 3) == 102) {
                            l.setToken(38, 4, 4);
                            return;
                        }
                    }
                }
            }
            break;
        case 40:
            {
                if (l.get_byte_at(l.byte_offset) == 40) {
                    if (l.get_byte_at(l.byte_offset + 1) == 69) {
                        if (l.get_byte_at(l.byte_offset + 2) == 88) {
                            if (isTokenActive(39, tk_row) && l.get_byte_at(l.byte_offset + 3) == 67) {
                                l.setToken(39, 4, 4);
                                return;
                            }
                        } else if (l.get_byte_at(l.byte_offset + 2) == 82) {
                            if (isTokenActive(40, tk_row) && l.get_byte_at(l.byte_offset + 3) == 82) {
                                l.setToken(40, 4, 4);
                                return;
                            }
                        }
                    } else if (l.get_byte_at(l.byte_offset + 1) == 73) {
                        if (isTokenActive(41, tk_row) && 2 == compare(l, l.byte_offset + 2, 184, 2, token_sequence_lookup)) {
                            l.setToken(41, 4, 4);
                            return;
                        }
                    } else if (l.get_byte_at(l.byte_offset + 1) == 82) {
                        if (l.get_byte_at(l.byte_offset + 2) == 83) {
                            if (isTokenActive(42, tk_row) && l.get_byte_at(l.byte_offset + 3) == 84) {
                                l.setToken(42, 4, 4);
                                return;
                            }
                        } else if (l.get_byte_at(l.byte_offset + 2) == 69) {
                            if (isTokenActive(43, tk_row) && l.get_byte_at(l.byte_offset + 3) == 68) {
                                l.setToken(43, 4, 4);
                                return;
                            }
                        }
                    } else if (l.get_byte_at(l.byte_offset + 1) == 42) {
                        if (isTokenActive(36, tk_row)) {
                            l.setToken(36, 2, 2);
                            return;
                        }
                    } else if (l.get_byte_at(l.byte_offset + 1) == 43) {
                        if (isTokenActive(37, tk_row)) {
                            l.setToken(37, 2, 2);
                            return;
                        }
                    } else if (isTokenActive(34, tk_row)) {
                        l.setToken(34, 1, 1);
                        return;
                    }
                }
            }
            break;
        case 41:
            {
                if (l.get_byte_at(l.byte_offset) == 41) {
                    if (isTokenActive(35, tk_row)) {
                        l.setToken(35, 1, 1);
                        return;
                    }
                }
            }
            break;
        case 42:
            {
                if (l.get_byte_at(l.byte_offset) == 42) {
                    if (l.get_byte_at(l.byte_offset + 1) == 47) {
                        if (isTokenActive(10, tk_row)) {
                            l.setToken(10, 2, 2);
                            return;
                        }
                    } else if (isTokenActive(25, tk_row)) {
                        l.setToken(25, 1, 1);
                        return;
                    }
                }
            }
            break;
        case 43:
            {
                if (l.get_byte_at(l.byte_offset) == 43) {
                    if (isTokenActive(26, tk_row) && l.get_byte_at(l.byte_offset + 1) == 62) {
                        l.setToken(26, 2, 2);
                        return;
                    }
                }
            }
            break;
        case 44:
            {
                if (l.get_byte_at(l.byte_offset) == 44) {
                    if (isTokenActive(85, tk_row)) {
                        l.setToken(85, 1, 1);
                        return;
                    }
                }
            }
            break;
        case 45:
            {
                if (l.get_byte_at(l.byte_offset) == 45) {
                    if (isTokenActive(54, tk_row) && token_production(l, 67111073, 44, 54, 2, states_buffer, scan) && l.byte_length > 1) {
                        return;
                    } else if (isTokenActive(55, tk_row)) {
                        l.setToken(55, 1, 1);
                        return;
                    }
                }
            }
            break;
        case 47:
            {
                if (l.get_byte_at(l.byte_offset) == 47) {
                    if (l.get_byte_at(l.byte_offset + 1) == 42) {
                        if (isTokenActive(87, tk_row) && token_production(l, 67108907, 2, 87, 4, states_buffer, scan) && l.byte_length > 2) {
                            return;
                        } else if (isTokenActive(9, tk_row)) {
                            l.setToken(9, 2, 2);
                            return;
                        }
                    }
                }
            }
            break;
        case 58:
            {
                if (l.get_byte_at(l.byte_offset) == 58) {
                    if (isTokenActive(22, tk_row) && l.get_byte_at(l.byte_offset + 1) == 58) {
                        l.setToken(22, 2, 2);
                        return;
                    }
                }
            }
            break;
        case 60:
            {
                if (l.get_byte_at(l.byte_offset) == 60) {
                    if (l.get_byte_at(l.byte_offset + 1) == 62) {
                        if (isTokenActive(24, tk_row)) {
                            l.setToken(24, 2, 2);
                            return;
                        }
                    } else if (l.get_byte_at(l.byte_offset + 1) == 61) {
                        if (isTokenActive(32, tk_row)) {
                            l.setToken(32, 2, 2);
                            return;
                        }
                    } else if (l.get_byte_at(l.byte_offset + 1) == 91) {
                        if (isTokenActive(52, tk_row)) {
                            l.setToken(52, 2, 2);
                            return;
                        }
                    }
                }
            }
            break;
        case 61:
            {
                if (l.get_byte_at(l.byte_offset) == 61) {
                    if (isTokenActive(49, tk_row) && l.get_byte_at(l.byte_offset + 1) == 62) {
                        l.setToken(49, 2, 2);
                        return;
                    }
                }
            }
            break;
        case 62:
            {
                if (l.get_byte_at(l.byte_offset) == 62) {
                    if (isTokenActive(27, tk_row)) {
                        l.setToken(27, 1, 1);
                        return;
                    }
                }
            }
            break;
        case 63:
            {
                if (l.get_byte_at(l.byte_offset) == 63) {
                    if (l.get_byte_at(l.byte_offset + 1) == 61) {
                        if (isTokenActive(33, tk_row)) {
                            l.setToken(33, 2, 2);
                            return;
                        }
                    } else if (isTokenActive(31, tk_row)) {
                        l.setToken(31, 1, 1);
                        return;
                    }
                }
            }
            break;
        case 64:
            {
                if (l.get_byte_at(l.byte_offset) == 64) {
                    if (l.get_byte_at(l.byte_offset + 1) == 73) {
                        if (l.get_byte_at(l.byte_offset + 2) == 71) {
                            if (isTokenActive(11, tk_row) && 4 == compare(l, l.byte_offset + 3, 6, 4, token_sequence_lookup)) {
                                l.setToken(11, 7, 7);
                                return;
                            }
                        } else if (l.get_byte_at(l.byte_offset + 2) == 77) {
                            if (isTokenActive(18, tk_row) && 4 == compare(l, l.byte_offset + 3, 125, 4, token_sequence_lookup)) {
                                l.setToken(18, 7, 7);
                                return;
                            }
                        }
                    } else if (l.get_byte_at(l.byte_offset + 1) == 69) {
                        if (isTokenActive(21, tk_row) && 5 == compare(l, l.byte_offset + 2, 170, 5, token_sequence_lookup)) {
                            l.setToken(21, 7, 7);
                            return;
                        }
                    }
                }
            }
            break;
        case 65:
            {
                if (l.get_byte_at(l.byte_offset) == 65) {
                    if (l.get_byte_at(l.byte_offset + 1) == 83) {
                        if (isTokenActive(13, tk_row) && token_production(l, 67109113, 9, 13, 1, states_buffer, scan) && l.byte_length > 2) {
                            return;
                        } else if (isTokenActive(54, tk_row) && token_production(l, 67111073, 44, 54, 2, states_buffer, scan) && l.byte_length > 2) {
                            return;
                        } else if (isTokenActive(3, tk_row) && l.isUniID() && l.byte_length > 2) {
                            l._type = 3;
                            return;
                        } else if (isTokenActive(20, tk_row)) {
                            l.setToken(20, 2, 2);
                            return;
                        }
                    }
                }
            }
            break;
        case 91:
            {
                if (l.get_byte_at(l.byte_offset) == 91) {
                    if (isTokenActive(29, tk_row)) {
                        l.setToken(29, 1, 1);
                        return;
                    }
                }
            }
            break;
        case 92:
            {
                if (l.get_byte_at(l.byte_offset) == 92) {
                    if (isTokenActive(16, tk_row)) {
                        l.setToken(16, 1, 1);
                        return;
                    }
                }
            }
            break;
        case 93:
            {
                if (l.get_byte_at(l.byte_offset) == 93) {
                    if (isTokenActive(30, tk_row)) {
                        l.setToken(30, 1, 1);
                        return;
                    }
                }
            }
            break;
        case 94:
            {
                if (l.get_byte_at(l.byte_offset) == 94) {
                    if (isTokenActive(48, tk_row)) {
                        l.setToken(48, 1, 1);
                        return;
                    }
                }
            }
            break;
        case 95:
            {
                if (l.get_byte_at(l.byte_offset) == 95) {
                    if (isTokenActive(13, tk_row) && token_production(l, 67109113, 9, 13, 1, states_buffer, scan) && l.byte_length > 1) {
                        return;
                    } else if (isTokenActive(54, tk_row) && token_production(l, 67111073, 44, 54, 2, states_buffer, scan) && l.byte_length > 1) {
                        return;
                    } else if (isTokenActive(14, tk_row)) {
                        l.setToken(14, 1, 1);
                        return;
                    }
                }
            }
            break;
        case 97:
            {
                if (l.get_byte_at(l.byte_offset) == 97) {
                    if (l.get_byte_at(l.byte_offset + 1) == 115) {
                        if (l.get_byte_at(l.byte_offset + 2) == 115) {
                            if (3 == compare(l, l.byte_offset + 3, 66, 3, token_sequence_lookup)) {
                                if (isTokenActive(13, tk_row) && token_production(l, 67109113, 9, 13, 1, states_buffer, scan) && l.byte_length > 6) {
                                    return;
                                } else if (isTokenActive(54, tk_row) && token_production(l, 67111073, 44, 54, 2, states_buffer, scan) && l.byte_length > 6) {
                                    return;
                                } else if (isTokenActive(3, tk_row) && l.isUniID() && l.byte_length > 6) {
                                    l._type = 3;
                                    return;
                                } else if (isTokenActive(80, tk_row)) {
                                    l.setToken(80, 6, 6);
                                    return;
                                }
                            }
                        } else if (isTokenActive(13, tk_row) && token_production(l, 67109113, 9, 13, 1, states_buffer, scan) && l.byte_length > 2) {
                            return;
                        } else if (isTokenActive(54, tk_row) && token_production(l, 67111073, 44, 54, 2, states_buffer, scan) && l.byte_length > 2) {
                            return;
                        } else if (isTokenActive(3, tk_row) && l.isUniID() && l.byte_length > 2) {
                            l._type = 3;
                            return;
                        } else if (isTokenActive(19, tk_row)) {
                            l.setToken(19, 2, 2);
                            return;
                        }
                    }
                }
            }
            break;
        case 98:
            {
                if (l.get_byte_at(l.byte_offset) == 98) {
                    if (3 == compare(l, l.byte_offset + 1, 85, 3, token_sequence_lookup)) {
                        if (isTokenActive(13, tk_row) && token_production(l, 67109113, 9, 13, 1, states_buffer, scan) && l.byte_length > 4) {
                            return;
                        } else if (isTokenActive(54, tk_row) && token_production(l, 67111073, 44, 54, 2, states_buffer, scan) && l.byte_length > 4) {
                            return;
                        } else if (isTokenActive(3, tk_row) && l.isUniID() && l.byte_length > 4) {
                            l._type = 3;
                            return;
                        } else if (isTokenActive(65, tk_row)) {
                            l.setToken(65, 4, 4);
                            return;
                        }
                    }
                }
            }
            break;
        case 99:
            {
                if (l.get_byte_at(l.byte_offset) == 99) {
                    if (6 == compare(l, l.byte_offset + 1, 109, 6, token_sequence_lookup)) {
                        if (isTokenActive(13, tk_row) && token_production(l, 67109113, 9, 13, 1, states_buffer, scan) && l.byte_length > 7) {
                            return;
                        } else if (isTokenActive(54, tk_row) && token_production(l, 67111073, 44, 54, 2, states_buffer, scan) && l.byte_length > 7) {
                            return;
                        } else if (isTokenActive(3, tk_row) && l.isUniID() && l.byte_length > 7) {
                            l._type = 3;
                            return;
                        } else if (isTokenActive(75, tk_row)) {
                            l.setToken(75, 7, 7);
                            return;
                        }
                    }
                }
            }
            break;
        case 101:
            {
                if (l.get_byte_at(l.byte_offset) == 101) {
                    if (l.get_byte_at(l.byte_offset + 1) == 120) {
                        if (6 == compare(l, l.byte_offset + 2, 116, 6, token_sequence_lookup)) {
                            if (isTokenActive(13, tk_row) && token_production(l, 67109113, 9, 13, 1, states_buffer, scan) && l.byte_length > 8) {
                                return;
                            } else if (isTokenActive(54, tk_row) && token_production(l, 67111073, 44, 54, 2, states_buffer, scan) && l.byte_length > 8) {
                                return;
                            } else if (isTokenActive(3, tk_row) && l.isUniID() && l.byte_length > 8) {
                                l._type = 3;
                                return;
                            } else if (isTokenActive(82, tk_row)) {
                                l.setToken(82, 8, 8);
                                return;
                            }
                        }
                    } else if (l.get_byte_at(l.byte_offset + 1) == 114) {
                        if (l.get_byte_at(l.byte_offset + 2) == 104) {
                            if (isTokenActive(13, tk_row) && token_production(l, 67109113, 9, 13, 1, states_buffer, scan) && l.byte_length > 3) {
                                return;
                            } else if (isTokenActive(54, tk_row) && token_production(l, 67111073, 44, 54, 2, states_buffer, scan) && l.byte_length > 3) {
                                return;
                            } else if (isTokenActive(3, tk_row) && l.isUniID() && l.byte_length > 3) {
                                l._type = 3;
                                return;
                            } else if (isTokenActive(83, tk_row)) {
                                l.setToken(83, 3, 3);
                                return;
                            }
                        }
                    }
                }
            }
            break;
        case 102:
            {
                if (l.get_byte_at(l.byte_offset) == 102) {
                    if (l.get_byte_at(l.byte_offset + 1) == 111) {
                        if (2 == compare(l, l.byte_offset + 2, 51, 2, token_sequence_lookup)) {
                            if (isTokenActive(13, tk_row) && token_production(l, 67109113, 9, 13, 1, states_buffer, scan) && l.byte_length > 4) {
                                return;
                            } else if (isTokenActive(54, tk_row) && token_production(l, 67111073, 44, 54, 2, states_buffer, scan) && l.byte_length > 4) {
                                return;
                            } else if (isTokenActive(3, tk_row) && l.isUniID() && l.byte_length > 4) {
                                l._type = 3;
                                return;
                            } else if (isTokenActive(63, tk_row)) {
                                l.setToken(63, 4, 4);
                                return;
                            }
                        }
                    } else if (l.get_byte_at(l.byte_offset + 1) == 97) {
                        if (2 == compare(l, l.byte_offset + 2, 146, 2, token_sequence_lookup)) {
                            if (isTokenActive(13, tk_row) && token_production(l, 67109113, 9, 13, 1, states_buffer, scan) && l.byte_length > 4) {
                                return;
                            } else if (isTokenActive(54, tk_row) && token_production(l, 67111073, 44, 54, 2, states_buffer, scan) && l.byte_length > 4) {
                                return;
                            } else if (isTokenActive(3, tk_row) && l.isUniID() && l.byte_length > 4) {
                                l._type = 3;
                                return;
                            } else if (isTokenActive(70, tk_row)) {
                                l.setToken(70, 4, 4);
                                return;
                            }
                        }
                    } else if (l.get_byte_at(l.byte_offset + 1) == 58) {
                        if (isTokenActive(51, tk_row)) {
                            l.setToken(51, 2, 2);
                            return;
                        }
                    }
                }
            }
            break;
        case 103:
            {
                if (l.get_byte_at(l.byte_offset) == 103) {
                    if (l.get_byte_at(l.byte_offset + 1) == 111) {
                        if (2 == compare(l, l.byte_offset + 2, 12, 2, token_sequence_lookup)) {
                            if (isTokenActive(13, tk_row) && token_production(l, 67109113, 9, 13, 1, states_buffer, scan) && l.byte_length > 4) {
                                return;
                            } else if (isTokenActive(54, tk_row) && token_production(l, 67111073, 44, 54, 2, states_buffer, scan) && l.byte_length > 4) {
                                return;
                            } else if (isTokenActive(3, tk_row) && l.isUniID() && l.byte_length > 4) {
                                l._type = 3;
                                return;
                            } else if (isTokenActive(78, tk_row)) {
                                l.setToken(78, 4, 4);
                                return;
                            }
                        }
                    } else if (l.get_byte_at(l.byte_offset + 1) == 58) {
                        if (isTokenActive(12, tk_row)) {
                            l.setToken(12, 2, 2);
                            return;
                        }
                    }
                }
            }
            break;
        case 105:
            {
                if (l.get_byte_at(l.byte_offset) == 105) {
                    if (l.get_byte_at(l.byte_offset + 1) == 100) {
                        if (isTokenActive(13, tk_row) && token_production(l, 67109113, 9, 13, 1, states_buffer, scan) && l.byte_length > 2) {
                            return;
                        } else if (isTokenActive(54, tk_row) && token_production(l, 67111073, 44, 54, 2, states_buffer, scan) && l.byte_length > 2) {
                            return;
                        } else if (isTokenActive(3, tk_row) && l.isUniID() && l.byte_length > 2) {
                            l._type = 3;
                            return;
                        } else if (isTokenActive(68, tk_row)) {
                            l.setToken(68, 2, 2);
                            return;
                        }
                    }
                }
            }
            break;
        case 110:
            {
                if (l.get_byte_at(l.byte_offset) == 110) {
                    if (2 == compare(l, l.byte_offset + 1, 96, 2, token_sequence_lookup)) {
                        if (l.get_byte_at(l.byte_offset + 3) == 104) {
                            if (3 == compare(l, l.byte_offset + 4, 99, 3, token_sequence_lookup)) {
                                if (isTokenActive(13, tk_row) && token_production(l, 67109113, 9, 13, 1, states_buffer, scan) && l.byte_length > 7) {
                                    return;
                                } else if (isTokenActive(54, tk_row) && token_production(l, 67111073, 44, 54, 2, states_buffer, scan) && l.byte_length > 7) {
                                    return;
                                } else if (isTokenActive(3, tk_row) && l.isUniID() && l.byte_length > 7) {
                                    l._type = 3;
                                    return;
                                } else if (isTokenActive(76, tk_row)) {
                                    l.setToken(76, 7, 7);
                                    return;
                                }
                            }
                        } else if (isTokenActive(13, tk_row) && token_production(l, 67109113, 9, 13, 1, states_buffer, scan) && l.byte_length > 3) {
                            return;
                        } else if (isTokenActive(54, tk_row) && token_production(l, 67111073, 44, 54, 2, states_buffer, scan) && l.byte_length > 3) {
                            return;
                        } else if (isTokenActive(3, tk_row) && l.isUniID() && l.byte_length > 3) {
                            l._type = 3;
                            return;
                        } else if (isTokenActive(71, tk_row)) {
                            l.setToken(71, 3, 3);
                            return;
                        }
                    }
                }
            }
            break;
        case 111:
            {
                if (l.get_byte_at(l.byte_offset) == 111) {
                    if (l.get_byte_at(l.byte_offset + 1) == 110) {
                        if (isTokenActive(13, tk_row) && token_production(l, 67109113, 9, 13, 1, states_buffer, scan) && l.byte_length > 2) {
                            return;
                        } else if (isTokenActive(54, tk_row) && token_production(l, 67111073, 44, 54, 2, states_buffer, scan) && l.byte_length > 2) {
                            return;
                        } else if (isTokenActive(3, tk_row) && l.isUniID() && l.byte_length > 2) {
                            l._type = 3;
                            return;
                        } else if (isTokenActive(56, tk_row)) {
                            l.setToken(56, 2, 2);
                            return;
                        }
                    }
                }
            }
            break;
        case 112:
            {
                if (l.get_byte_at(l.byte_offset) == 112) {
                    if (l.get_byte_at(l.byte_offset + 1) == 114) {
                        if (2 == compare(l, l.byte_offset + 2, 82, 2, token_sequence_lookup)) {
                            if (isTokenActive(13, tk_row) && token_production(l, 67109113, 9, 13, 1, states_buffer, scan) && l.byte_length > 4) {
                                return;
                            } else if (isTokenActive(54, tk_row) && token_production(l, 67111073, 44, 54, 2, states_buffer, scan) && l.byte_length > 4) {
                                return;
                            } else if (isTokenActive(3, tk_row) && l.isUniID() && l.byte_length > 4) {
                                l._type = 3;
                                return;
                            } else if (isTokenActive(57, tk_row)) {
                                l.setToken(57, 4, 4);
                                return;
                            }
                        }
                    } else if (l.get_byte_at(l.byte_offset + 1) == 97) {
                        if (2 == compare(l, l.byte_offset + 2, 163, 2, token_sequence_lookup)) {
                            if (isTokenActive(13, tk_row) && token_production(l, 67109113, 9, 13, 1, states_buffer, scan) && l.byte_length > 4) {
                                return;
                            } else if (isTokenActive(54, tk_row) && token_production(l, 67111073, 44, 54, 2, states_buffer, scan) && l.byte_length > 4) {
                                return;
                            } else if (isTokenActive(3, tk_row) && l.isUniID() && l.byte_length > 4) {
                                l._type = 3;
                                return;
                            } else if (isTokenActive(69, tk_row)) {
                                l.setToken(69, 4, 4);
                                return;
                            }
                        }
                    } else if (l.get_byte_at(l.byte_offset + 1) == 101) {
                        if (2 == compare(l, l.byte_offset + 2, 231, 2, token_sequence_lookup)) {
                            if (isTokenActive(13, tk_row) && token_production(l, 67109113, 9, 13, 1, states_buffer, scan) && l.byte_length > 4) {
                                return;
                            } else if (isTokenActive(54, tk_row) && token_production(l, 67111073, 44, 54, 2, states_buffer, scan) && l.byte_length > 4) {
                                return;
                            } else if (isTokenActive(3, tk_row) && l.isUniID() && l.byte_length > 4) {
                                l._type = 3;
                                return;
                            } else if (isTokenActive(79, tk_row)) {
                                l.setToken(79, 4, 4);
                                return;
                            }
                        }
                    }
                }
            }
            break;
        case 114:
            {
                if (l.get_byte_at(l.byte_offset) == 114) {
                    if (l.get_byte_at(l.byte_offset + 1) == 101) {
                        if (l.get_byte_at(l.byte_offset + 2) == 99) {
                            if (4 == compare(l, l.byte_offset + 3, 74, 4, token_sequence_lookup)) {
                                if (isTokenActive(13, tk_row) && token_production(l, 67109113, 9, 13, 1, states_buffer, scan) && l.byte_length > 7) {
                                    return;
                                } else if (isTokenActive(54, tk_row) && token_production(l, 67111073, 44, 54, 2, states_buffer, scan) && l.byte_length > 7) {
                                    return;
                                } else if (isTokenActive(3, tk_row) && l.isUniID() && l.byte_length > 7) {
                                    l._type = 3;
                                    return;
                                } else if (isTokenActive(53, tk_row)) {
                                    l.setToken(53, 7, 7);
                                    return;
                                }
                            }
                        } else if (l.get_byte_at(l.byte_offset + 2) == 116) {
                            if (3 == compare(l, l.byte_offset + 3, 158, 3, token_sequence_lookup)) {
                                if (isTokenActive(13, tk_row) && token_production(l, 67109113, 9, 13, 1, states_buffer, scan) && l.byte_length > 6) {
                                    return;
                                } else if (isTokenActive(54, tk_row) && token_production(l, 67111073, 44, 54, 2, states_buffer, scan) && l.byte_length > 6) {
                                    return;
                                } else if (isTokenActive(3, tk_row) && l.isUniID() && l.byte_length > 6) {
                                    l._type = 3;
                                    return;
                                } else if (isTokenActive(50, tk_row)) {
                                    l.setToken(50, 6, 6);
                                    return;
                                }
                            }
                        } else if (l.get_byte_at(l.byte_offset + 2) == 100) {
                            if (3 == compare(l, l.byte_offset + 3, 220, 3, token_sequence_lookup)) {
                                if (isTokenActive(13, tk_row) && token_production(l, 67109113, 9, 13, 1, states_buffer, scan) && l.byte_length > 6) {
                                    return;
                                } else if (isTokenActive(54, tk_row) && token_production(l, 67111073, 44, 54, 2, states_buffer, scan) && l.byte_length > 6) {
                                    return;
                                } else if (isTokenActive(3, tk_row) && l.isUniID() && l.byte_length > 6) {
                                    l._type = 3;
                                    return;
                                } else if (isTokenActive(60, tk_row)) {
                                    l.setToken(60, 6, 6);
                                    return;
                                }
                            }
                        } else if (l.get_byte_at(l.byte_offset + 2) == 112) {
                            if (3 == compare(l, l.byte_offset + 3, 226, 3, token_sequence_lookup)) {
                                if (isTokenActive(13, tk_row) && token_production(l, 67109113, 9, 13, 1, states_buffer, scan) && l.byte_length > 6) {
                                    return;
                                } else if (isTokenActive(54, tk_row) && token_production(l, 67111073, 44, 54, 2, states_buffer, scan) && l.byte_length > 6) {
                                    return;
                                } else if (isTokenActive(3, tk_row) && l.isUniID() && l.byte_length > 6) {
                                    l._type = 3;
                                    return;
                                } else if (isTokenActive(84, tk_row)) {
                                    l.setToken(84, 6, 6);
                                    return;
                                }
                            }
                        }
                    } else if (isTokenActive(13, tk_row) && token_production(l, 67109113, 9, 13, 1, states_buffer, scan) && l.byte_length > 1) {
                        return;
                    } else if (isTokenActive(54, tk_row) && token_production(l, 67111073, 44, 54, 2, states_buffer, scan) && l.byte_length > 1) {
                        return;
                    } else if (isTokenActive(3, tk_row) && l.isUniID() && l.byte_length > 1) {
                        l._type = 3;
                        return;
                    } else if (isTokenActive(45, tk_row)) {
                        l.setToken(45, 1, 1);
                        return;
                    }
                }
            }
            break;
        case 115:
            {
                if (l.get_byte_at(l.byte_offset) == 115) {
                    if (l.get_byte_at(l.byte_offset + 1) == 121) {
                        if (6 == compare(l, l.byte_offset + 2, 56, 6, token_sequence_lookup)) {
                            if (isTokenActive(81, tk_row)) {
                                l.setToken(81, 8, 8);
                                return;
                            }
                        }
                    } else if (l.get_byte_at(l.byte_offset + 1) == 107) {
                        if (5 == compare(l, l.byte_offset + 2, 150, 5, token_sequence_lookup)) {
                            if (isTokenActive(13, tk_row) && token_production(l, 67109113, 9, 13, 1, states_buffer, scan) && l.byte_length > 7) {
                                return;
                            } else if (isTokenActive(54, tk_row) && token_production(l, 67111073, 44, 54, 2, states_buffer, scan) && l.byte_length > 7) {
                                return;
                            } else if (isTokenActive(3, tk_row) && l.isUniID() && l.byte_length > 7) {
                                l._type = 3;
                                return;
                            } else if (isTokenActive(86, tk_row)) {
                                l.setToken(86, 7, 7);
                                return;
                            }
                        }
                    } else if (l.get_byte_at(l.byte_offset + 1) == 99) {
                        if (l.get_byte_at(l.byte_offset + 2) == 111) {
                            if (2 == compare(l, l.byte_offset + 3, 203, 2, token_sequence_lookup)) {
                                if (l.get_byte_at(l.byte_offset + 5) == 115) {
                                    if (isTokenActive(13, tk_row) && token_production(l, 67109113, 9, 13, 1, states_buffer, scan) && l.byte_length > 6) {
                                        return;
                                    } else if (isTokenActive(54, tk_row) && token_production(l, 67111073, 44, 54, 2, states_buffer, scan) && l.byte_length > 6) {
                                        return;
                                    } else if (isTokenActive(3, tk_row) && l.isUniID() && l.byte_length > 6) {
                                        l._type = 3;
                                        return;
                                    } else if (isTokenActive(73, tk_row)) {
                                        l.setToken(73, 6, 6);
                                        return;
                                    }
                                } else if (isTokenActive(13, tk_row) && token_production(l, 67109113, 9, 13, 1, states_buffer, scan) && l.byte_length > 5) {
                                    return;
                                } else if (isTokenActive(54, tk_row) && token_production(l, 67111073, 44, 54, 2, states_buffer, scan) && l.byte_length > 5) {
                                    return;
                                } else if (isTokenActive(3, tk_row) && l.isUniID() && l.byte_length > 5) {
                                    l._type = 3;
                                    return;
                                } else if (isTokenActive(74, tk_row)) {
                                    l.setToken(74, 5, 5);
                                    return;
                                }
                            }
                        } else if (l.get_byte_at(l.byte_offset + 2) == 97) {
                            if (l.get_byte_at(l.byte_offset + 3) == 110) {
                                if (isTokenActive(13, tk_row) && token_production(l, 67109113, 9, 13, 1, states_buffer, scan) && l.byte_length > 4) {
                                    return;
                                } else if (isTokenActive(54, tk_row) && token_production(l, 67111073, 44, 54, 2, states_buffer, scan) && l.byte_length > 4) {
                                    return;
                                } else if (isTokenActive(3, tk_row) && l.isUniID() && l.byte_length > 4) {
                                    l._type = 3;
                                    return;
                                } else if (isTokenActive(64, tk_row)) {
                                    l.setToken(64, 4, 4);
                                    return;
                                }
                            }
                        }
                    } else if (l.get_byte_at(l.byte_offset + 1) == 116) {
                        if (3 == compare(l, l.byte_offset + 2, 207, 3, token_sequence_lookup)) {
                            if (isTokenActive(13, tk_row) && token_production(l, 67109113, 9, 13, 1, states_buffer, scan) && l.byte_length > 5) {
                                return;
                            } else if (isTokenActive(54, tk_row) && token_production(l, 67111073, 44, 54, 2, states_buffer, scan) && l.byte_length > 5) {
                                return;
                            } else if (isTokenActive(3, tk_row) && l.isUniID() && l.byte_length > 5) {
                                l._type = 3;
                                return;
                            } else if (isTokenActive(77, tk_row)) {
                                l.setToken(77, 5, 5);
                                return;
                            }
                        }
                    } else if (l.get_byte_at(l.byte_offset + 1) == 101) {
                        if (l.get_byte_at(l.byte_offset + 2) == 116) {
                            if (isTokenActive(13, tk_row) && token_production(l, 67109113, 9, 13, 1, states_buffer, scan) && l.byte_length > 3) {
                                return;
                            } else if (isTokenActive(54, tk_row) && token_production(l, 67111073, 44, 54, 2, states_buffer, scan) && l.byte_length > 3) {
                                return;
                            } else if (isTokenActive(3, tk_row) && l.isUniID() && l.byte_length > 3) {
                                l._type = 3;
                                return;
                            } else if (isTokenActive(61, tk_row)) {
                                l.setToken(61, 3, 3);
                                return;
                            }
                        }
                    }
                }
            }
            break;
        case 116:
            {
                if (l.get_byte_at(l.byte_offset) == 116) {
                    if (l.get_byte_at(l.byte_offset + 1) == 111) {
                        if (l.get_byte_at(l.byte_offset + 2) == 107) {
                            if (2 == compare(l, l.byte_offset + 3, 18, 2, token_sequence_lookup)) {
                                if (isTokenActive(13, tk_row) && token_production(l, 67109113, 9, 13, 1, states_buffer, scan) && l.byte_length > 5) {
                                    return;
                                } else if (isTokenActive(54, tk_row) && token_production(l, 67111073, 44, 54, 2, states_buffer, scan) && l.byte_length > 5) {
                                    return;
                                } else if (isTokenActive(3, tk_row) && l.isUniID() && l.byte_length > 5) {
                                    l._type = 3;
                                    return;
                                } else if (isTokenActive(67, tk_row)) {
                                    l.setToken(67, 5, 5);
                                    return;
                                }
                            }
                        } else if (isTokenActive(13, tk_row) && token_production(l, 67109113, 9, 13, 1, states_buffer, scan) && l.byte_length > 2) {
                            return;
                        } else if (isTokenActive(54, tk_row) && token_production(l, 67111073, 44, 54, 2, states_buffer, scan) && l.byte_length > 2) {
                            return;
                        } else if (isTokenActive(3, tk_row) && l.isUniID() && l.byte_length > 2) {
                            l._type = 3;
                            return;
                        } else if (isTokenActive(62, tk_row)) {
                            l.setToken(62, 2, 2);
                            return;
                        }
                    } else if (l.get_byte_at(l.byte_offset + 1) == 104) {
                        if (2 == compare(l, l.byte_offset + 2, 133, 2, token_sequence_lookup)) {
                            if (isTokenActive(13, tk_row) && token_production(l, 67109113, 9, 13, 1, states_buffer, scan) && l.byte_length > 4) {
                                return;
                            } else if (isTokenActive(54, tk_row) && token_production(l, 67111073, 44, 54, 2, states_buffer, scan) && l.byte_length > 4) {
                                return;
                            } else if (isTokenActive(3, tk_row) && l.isUniID() && l.byte_length > 4) {
                                l._type = 3;
                                return;
                            } else if (isTokenActive(58, tk_row)) {
                                l.setToken(58, 4, 4);
                                return;
                            }
                        }
                    } else if (l.get_byte_at(l.byte_offset + 1) == 107) {
                        if (l.get_byte_at(l.byte_offset + 2) == 58) {
                            if (isTokenActive(17, tk_row)) {
                                l.setToken(17, 3, 3);
                                return;
                            }
                        }
                    } else if (l.get_byte_at(l.byte_offset + 1) == 58) {
                        if (isTokenActive(15, tk_row)) {
                            l.setToken(15, 2, 2);
                            return;
                        }
                    }
                }
            }
            break;
        case 117:
            {
                if (l.get_byte_at(l.byte_offset) == 117) {
                    if (4 == compare(l, l.byte_offset + 1, 89, 4, token_sequence_lookup)) {
                        if (isTokenActive(13, tk_row) && token_production(l, 67109113, 9, 13, 1, states_buffer, scan) && l.byte_length > 5) {
                            return;
                        } else if (isTokenActive(54, tk_row) && token_production(l, 67111073, 44, 54, 2, states_buffer, scan) && l.byte_length > 5) {
                            return;
                        } else if (isTokenActive(3, tk_row) && l.isUniID() && l.byte_length > 5) {
                            l._type = 3;
                            return;
                        } else if (isTokenActive(66, tk_row)) {
                            l.setToken(66, 5, 5);
                            return;
                        }
                    }
                }
            }
            break;
        case 119:
            {
                if (l.get_byte_at(l.byte_offset) == 119) {
                    if (5 == compare(l, l.byte_offset + 1, 103, 5, token_sequence_lookup)) {
                        if (isTokenActive(13, tk_row) && token_production(l, 67109113, 9, 13, 1, states_buffer, scan) && l.byte_length > 6) {
                            return;
                        } else if (isTokenActive(54, tk_row) && token_production(l, 67111073, 44, 54, 2, states_buffer, scan) && l.byte_length > 6) {
                            return;
                        } else if (isTokenActive(3, tk_row) && l.isUniID() && l.byte_length > 6) {
                            l._type = 3;
                            return;
                        } else if (isTokenActive(72, tk_row)) {
                            l.setToken(72, 6, 6);
                            return;
                        }
                    }
                }
            }
            break;
        case 123:
            {
                if (l.get_byte_at(l.byte_offset) == 123) {
                    if (isTokenActive(46, tk_row)) {
                        l.setToken(46, 1, 1);
                        return;
                    }
                }
            }
            break;
        case 124:
            {
                if (l.get_byte_at(l.byte_offset) == 124) {
                    if (isTokenActive(28, tk_row)) {
                        l.setToken(28, 1, 1);
                        return;
                    }
                }
            }
            break;
        case 125:
            {
                if (l.get_byte_at(l.byte_offset) == 125) {
                    if (isTokenActive(47, tk_row)) {
                        l.setToken(47, 1, 1);
                        return;
                    }
                }
            }
            break;
        default:
            break;
    };
    if (isTokenActive(13, tk_row) && pre_scan(l, 186) && token_production(l, 67109113, 9, 13, 1, states_buffer, scan)) {
        return;
    } else if (isTokenActive(54, tk_row) && pre_scan(l, 187) && token_production(l, 67111073, 44, 54, 2, states_buffer, scan)) {
        return;
    } else if (isTokenActive(87, tk_row) && pre_scan(l, 188) && token_production(l, 67108907, 2, 87, 4, states_buffer, scan)) {
        return;
    } else if (isTokenActive(0, tk_row) && false) {
        l._type = 0;
        return;
    } else if (isTokenActive(8, tk_row) && l.isSP(true)) {
        l._type = 8;
        return;
    } else if (isTokenActive(3, tk_row) && l.isUniID()) {
        l._type = 3;
        return;
    } else if (isTokenActive(2, tk_row) && l.isSym(true)) {
        l._type = 2;
        return;
    } else if (isTokenActive(7, tk_row) && l.isNL()) {
        l._type = 7;
        return;
    } else if (isTokenActive(5, tk_row) && l.isNum()) {
        l._type = 5;
        return;
    }
}

function scan(l, token, skip) {
    if (((l._type) <= 0)) scan_core(l, token);;
    if ((skip > 0 && isTokenActive(l._type, skip))) {
        while ((isTokenActive(l._type, skip))) {
            l.next();
            scan_core(l, token);
        }
    }
}

const js_parser_pack = {

    init_table: () => {
        const table = new Uint8Array(382976);
        init_table(table);
        return table;
    },

    create_iterator: (data) => {
        return new KernelStateIterator(data);
    },

    recognize: (string, entry_index) => {

        const temp_buffer = new Uint8Array(string.length * 4);

        const actual_length = fillByteBufferWithUTF8FromString(string, temp_buffer, temp_buffer.length);

        const input_buffer = new Uint8Array(temp_buffer.buffer, 0, actual_length);

        let entry_pointer = 0;

        switch (entry_index) {

            case 0: default: entry_pointer = 67108868; break;

            case 1: entry_pointer = 67112072; break;
        }

        return run(
            states_buffer,
            input_buffer,
            input_buffer.length,
            entry_pointer,
            scan,
            false
        );
    }
};

const reduce_functions = [(_, s) => s[s.length - 1], (env, sym, pos) => ({ type: "hc-grammar-4", preamble: sym[0] || [], ir_states: sym[1].ir || [], productions: sym[1].productions, functions: sym[1].functions || [], imported_grammars: [], meta: null, ignore: [], all_symbols: [], bodies: [] }) /*0*/,
(env, sym, pos) => ({ type: "hc-grammar-4", preamble: null || [], ir_states: sym[0].ir || [], productions: sym[0].productions, functions: sym[0].functions || [], imported_grammars: [], meta: null, ignore: [], all_symbols: [], bodies: [] }) /*1*/,
(env, sym, pos) => ([sym[0]]) /*2*/,
(env, sym, pos) => ((sym[0].push(sym[1]), sym[0])) /*3*/,
(env, sym, pos) => ({ type: "ignore", symbols: sym[1] }) /*4*/,
(env, sym, pos) => ({ type: "generated", val: sym[1], pos: pos, meta: false }) /*5*/,
(env, sym, pos) => (sym[0] + sym[1]) /*6*/,
(env, sym, pos) => ({ type: "exclusive-literal", val: "" + sym[1], pos: pos, meta: false }) /*7*/,
(env, sym, pos) => ({ type: "literal", val: sym[0], pos: pos, meta: false }) /*8*/,
(env, sym, pos) => ({ type: "literal", val: sym[1], pos: pos, meta: false }) /*9*/,
(env, sym, pos) => ({ type: "production_token", name: sym[1], production: null, val: -1, pos: pos, meta: false }) /*10*/,
(env, sym, pos) => ({ type: "import", uri: sym[1], reference: sym[3] }) /*11*/,
(env, sym, pos) => ({ type: "export", production: sym[1], reference: sym[3] }) /*12*/,
(env, sym, pos) => ({ type: "sym-production-import", module: sym[0], production: sym[2], name: "", pos: pos, meta: false }) /*13*/,
(env, sym, pos) => ({ type: "sym-production", name: sym[0], production: null, val: -1, pos: pos, meta: false }) /*14*/,
(env, sym, pos) => ({ type: "comment", value: sym[1] }) /*15*/,
(env, sym, pos) => ({ type: "production-section", functions: [], productions: [sym[0]], ir: [] }) /*16*/,
(env, sym, pos) => ({ type: "production-section", functions: [sym[0]], productions: [], ir: [] }) /*17*/,
(env, sym, pos) => ({ type: "production-section", functions: [], productions: [], ir: [sym[0]] }) /*18*/,
(env, sym, pos) => (sym[0].productions.push(sym[1]), sym[0]) /*19*/,
(env, sym, pos) => (sym[0].functions.push(sym[1]), sym[0]) /*20*/,
(env, sym, pos) => (sym[0].ir.push(sym[1]), sym[0]) /*21*/,
(env, sym, pos) => (sym[0]) /*22*/,
(env, sym, pos) => ({ type: "production", name: sym[2], bodies: sym[4], id: -1, recovery_handler: sym[5], pos: pos, recursion: 0, ROOT_PRODUCTION: !!sym[1] }) /*23*/,
(env, sym, pos) => ({ type: "production-merged-import", name: sym[1], bodies: sym[3], id: -1, recovery_handler: sym[4], ROOT_PRODUCTION: false }) /*24*/,
(env, sym, pos) => ({ type: "production", name: sym[1], bodies: sym[3], id: -1, recovery_handler: sym[4], pos: pos, recursion: 0, ROOT_PRODUCTION: !!null }) /*25*/,
(env, sym, pos) => ({ type: "production", name: sym[2], bodies: null, id: -1, recovery_handler: sym[4], pos: pos, recursion: 0, ROOT_PRODUCTION: !!sym[1] }) /*26*/,
(env, sym, pos) => ({ type: "production", name: sym[1], bodies: null, id: -1, recovery_handler: sym[3], pos: pos, recursion: 0, ROOT_PRODUCTION: !!null }) /*27*/,
(env, sym, pos) => ((sym[0].push(sym[2]), sym[0])) /*28*/,
(env, sym, pos) => ({ type: "body", sym: sym[0], reduce_function: sym[1], FORCE_FORK: false, id: -1, production: null, pos }) /*29*/,
(env, sym, pos) => ({ type: "body", sym: sym[0], reduce_function: null, FORCE_FORK: false, id: -1, production: null, pos }) /*30*/,
(env, sym, pos) => (sym[0].concat(sym[1])) /*31*/,
(env, sym, pos) => ([]) /*32*/,
(env, sym, pos) => (env.group_id++, sym[1].flat().map(e => (e.IS_OPTIONAL ? e.IS_OPTIONAL |= env.group_id << 8 : 0, e))) /*33*/,
(env, sym, pos) => (sym[0].IS_OPTIONAL = 1, sym[0]) /*34*/,
(env, sym, pos) => ({ type: "look-behind", val: sym[1].val, phased: sym[1] }) /*35*/,
(env, sym, pos) => (sym[1].IS_NON_CAPTURE = true, sym[1]) /*36*/,
(env, sym, pos) => ({ type: "group-production", val: sym[1], pos: pos, meta: false }) /*37*/,
(env, sym, pos) => ({ type: "list-production", terminal_symbol: sym[2], IS_OPTIONAL: +(sym[1] == "(*"), val: sym[0], pos: pos, meta: false }) /*38*/,
(env, sym, pos) => ({ type: "list-production", terminal_symbol: null, IS_OPTIONAL: +(sym[1] == "(*"), val: sym[0], pos: pos, meta: false }) /*39*/,
(env, sym, pos) => ({ type: "eof", val: "END_OF_FILE", pos: pos, meta: false }) /*40*/,
(env, sym, pos) => ({ type: "meta-exclude", sym: sym[1], meta: true, index: -1 }) /*41*/,
(env, sym, pos) => ({ type: "meta-error", sym: sym[1], meta: true, index: -1 }) /*42*/,
(env, sym, pos) => ({ type: "meta-ignore", sym: sym[1], meta: true, index: -1 }) /*43*/,
(env, sym, pos) => ({ type: "meta-reset", sym: sym[1], meta: true, index: -1 }) /*44*/,
(env, sym, pos) => ({ type: "meta-reduce", sym: sym[1], meta: true, index: -1 }) /*45*/,
(env, sym, pos) => ({ type: "empty", val: "", pos: pos, meta: false }) /*46*/,
(env, sym, pos) => ({ type: "RETURNED", txt: sym[3], name: "", env: false, ref: "", IS_CONDITION: true }) /*47*/,
(env, sym, pos) => ({ type: "env-function-reference", ref: sym[3] }) /*48*/,
(env, sym, pos) => ({ type: "local-function-reference", ref: sym[3] }) /*49*/,
(env, sym, pos) => ("FN:F") /*50*/,
(env, sym, pos) => (sym[0] + sym[1] + sym[2]) /*51*/,
(env, sym, pos) => ({ type: "ref-function", id: sym[1], txt: sym[3] }) /*52*/,
(env, sym, pos) => ({ type: "state", id: sym[2], instructions: sym[4], fail: sym[5], symbol_meta: sym[6], pos }) /*53*/,
(env, sym, pos) => ({ type: "state", id: sym[1], instructions: sym[3], fail: sym[4], symbol_meta: sym[5], pos }) /*54*/,
(env, sym, pos) => ({ type: "state", id: sym[2], instructions: sym[4], symbol_meta: sym[5], pos }) /*55*/,
(env, sym, pos) => ({ type: "state", id: sym[2], instructions: sym[4], fail: sym[5], pos }) /*56*/,
(env, sym, pos) => ({ type: "state", id: sym[1], instructions: sym[3], symbol_meta: sym[4], pos }) /*57*/,
(env, sym, pos) => ({ type: "state", id: sym[1], instructions: sym[3], fail: sym[4], pos }) /*58*/,
(env, sym, pos) => ({ type: "state", id: sym[2], instructions: sym[4], pos }) /*59*/,
(env, sym, pos) => ({ type: "state", id: sym[1], instructions: sym[3], pos }) /*60*/,
(env, sym, pos) => ({ type: "prod", ids: sym[2], instructions: sym[4], pos }) /*61*/,
(env, sym, pos) => (sym[1]) /*62*/,
(env, sym, pos) => ([...sym[0], ...sym[2], sym[3]]) /*63*/,
(env, sym, pos) => ([...sym[0], sym[1]]) /*64*/,
(env, sym, pos) => ([...sym[0], ...sym[2]]) /*65*/,
(env, sym, pos) => ([...sym[0]]) /*66*/,
(env, sym, pos) => ({ type: "reduce", len: parseInt(sym[1]), reduce_fn: parseInt(sym[2]), pos }) /*67*/,
(env, sym, pos) => ({ type: "reduce", len: -1, reduce_fn: sym[1], pos }) /*68*/,
(env, sym, pos) => ({ type: "set-prod", id: sym[3], pos }) /*69*/,
(env, sym, pos) => ({ type: "fork-to", states: sym[3], pos }) /*70*/,
(env, sym, pos) => ({ type: sym[1] ? "scan-back-until" : "scan-until", ids: sym[3], pos }) /*71*/,
(env, sym, pos) => ({ type: "token-id", id: sym[3], pos }) /*72*/,
(env, sym, pos) => ({ type: "pass", pos }) /*73*/,
(env, sym, pos) => ({ type: "fail", pos }) /*74*/,
(env, sym, pos) => ({ type: "not-in-scopes", ids: sym[4], pos }) /*75*/,
(env, sym, pos) => ({ type: "set-scope", scope: sym[3], pos }) /*76*/,
(env, sym, pos) => ({ type: "consume", EMPTY: !!sym[1], pos }) /*77*/,
(env, sym, pos) => ({ type: null ? "scan-back-until" : "scan-until", ids: sym[2], pos }) /*78*/,
(env, sym, pos) => ({ type: "consume", pos }) /*79*/,
(env, sym, pos) => (sym[2]) /*80*/,
(env, sym, pos) => ({ type: "goto", state: sym[1], pos }) /*81*/,
(env, sym, pos) => ({ type: "peek", ids: sym[1], instructions: sym[3], pos }) /*82*/,
(env, sym, pos) => ({ type: "assert", ids: sym[1], instructions: sym[3], pos }) /*83*/,
(env, sym, pos) => ({ type: "on-fail-state", id: sym[2], instructions: sym[3], symbol_meta: sym[5], fail: sym[4], pos }) /*84*/,
(env, sym, pos) => ({ type: "on-fail-state", id: sym[2], instructions: sym[3], symbol_meta: sym[4], pos }) /*85*/,
(env, sym, pos) => ({ type: "on-fail-state", id: sym[2], instructions: sym[3], fail: sym[4], pos }) /*86*/,
(env, sym, pos) => ({ type: "on-fail-state", id: sym[2], instructions: sym[3], pos }) /*87*/,
(env, sym, pos) => ({ type: "symbols", expected: sym[2], skipped: sym[3] || [], pos }) /*88*/,
(env, sym, pos) => ({ type: "symbols", expected: sym[2], skipped: null || [], pos }) /*89*/,
(env, sym, pos) => ({ type: "state", id: sym[0], instructions: sym[1], fail: sym[2], symbol_meta: sym[3], pos }) /*90*/,
(env, sym, pos) => ({ type: "state", id: sym[0], instructions: sym[1], symbol_meta: sym[2], pos }) /*91*/,
(env, sym, pos) => ({ type: "state", id: sym[0], instructions: sym[1], fail: sym[2], pos }) /*92*/,
(env, sym, pos) => ({ type: "state", id: sym[0], instructions: sym[1], pos }) /*93*/,
(env, sym, pos) => ({ type: "symbol", val: sym[0], pos: pos, meta: false }) /*94*/,
(env, sym, pos) => ({ type: "ERROR_RECOVERY", lexer_text: sym[3], body_text: sym[6] }) /*95*/,
(env, sym, pos) => ({ type: "function-inline", txt: sym[2], name: "", env: false, IS_CONDITION: true }) /*96*/,
(env, sym, pos) => ({ type: "INLINE", txt: "", name: sym[2], env: true, IS_CONDITION: true }) /*97*/,
(env, sym, pos) => (sym[0] + "") /*98*/,
(env, sym, pos) => (env.prod_name = sym[0]) /*99*/,
(env, sym, pos) => (env.prod_name = sym[0].val, sym[0]) /*100*/,
(env, sym, pos) => ({ type: "repeat-state", pos }) /*101*/,
(env, sym, pos) => (parseInt(sym[0])) /*102*/,
(env, sym, pos) => (sym[0] + "DD") /*103*/];

export default ParserFramework(
    reduce_functions,
    {
        hc: 0,
        ir: 1,
    },
    js_parser_pack,

);