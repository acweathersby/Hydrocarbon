# Copyright (C) 2021 Anthony Weathersby - The Hydrocarbon Parser Compiler
# see /source/typescript/hydrocarbon.ts for full copyright and warranty 
# disclaimer notice.

# version 5.0

@IMPORT ./symbols.hcg as sym

@IMPORT ./comments.hcg as cm

@IGNORE g:sp g:nl tk:cm::comment

########################################################################################################################
######################################  FUNCTIONS
########################################################################################################################

<> hcg_functions > 
        out_of_band_function
    |   error_function
    |   reduce_function
    |   function_clause

<> out_of_band_function > 

        js_function_start_symbol sym::reference_symbol { js_data } 
                 
                                                                    f:r {  { 
                                                                            type:"out_of_band",  
                                                                            reference:$2,     
                                                                            txt:$4,
                                                                            tok
                                                                        }  }

    |   js_function_start_symbol sym::production function_body_index? { js_data } 

                                                                    f:r {  { 
                                                                            type:"out_of_band",  
                                                                            production:$2,
                                                                            index:$3 || [0],
                                                                            txt:$5,
                                                                            tok
                                                                        }  }
    |    js_function_start_symbol sym::production function_body_index? \^ sym::production

                                                                    f:r {  { 
                                                                            type:"out_of_band",  
                                                                            production:$2,
                                                                            index:$3 || 0,
                                                                            reference:$5,
                                                                            tok
                                                                        }  }      
<> function_body_index > ( \. ( g:num | \* ) f:r{ $1.toString() == "*" ? Infinity : parseInt($1.toString()) } )(+)

                                                                                              

<> error_function > js_function_start_symbol t:erh { js_data } { js_data }                    f:r { 
                                                                       { 
                                                                           type:"ERROR_RECOVERY",     
                                                                        
                                                                            lexer_text:$4, 
                                                                            body_text:$7,
                                                                            tok
                                                                        }
                                                                    }
<> reduce_function > js_function_start_symbol ( t:return | t:r ) { js_data }                                 
                                                                    f:r { {
                                                                        type:"RETURNED",        
                                                                        txt:$4, 
                                                                        name:"", 
                                                                        env:false,
                                                                        ref:"",     
                                                                        IS_CONDITION:true,
                                                                            tok
                                                                        }
                                                                    }

     | js_function_start_symbol ( t:return | t:r ) sym::reference_symbol     
                                                                     f:r { {
                                                                            type:"env-function-reference",             
                                                                            ref:$3,
                                                                            tok
                                                                        }
                                                                    }

<> function_clause > 
    
    js_function_start_symbol { js_data }                                 
                                                                    f:r { { 
                                                                            type:"function-inline",     
                                                                            txt:$3, 
                                                                            name:"",     
                                                                            env:false,
                                                                            IS_CONDITION:true,
                                                                            tok
                                                                        }
                                                                    }

    | js_function_start_symbol  sym::reference_symbol                            
                                                                    f:r {
                                                                        {type:"INLINE",     
                                                                        txt:"", 
                                                                        name:$2,     
                                                                        env:true,
                                                                        IS_CONDITION:true,
                                                                        tok
                                                                        }
                                                                    }

<> js_data > js_primitive
    | js_data_block
    | js_data js_primitive                                            f:r { $1 + $2 }
    | js_data js_data_block                                            f:r { $1 + $2 }
    | $eof

<> js_primitive > g:id 
    | g:num 
    | g:sp 
    | g:sym 

<> js_data_block > \{ js_data \}                                    f:r { $1 + $2 + $3 }

<> js_function_start_symbol > \f:                                  
    
