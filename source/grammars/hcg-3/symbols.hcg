# Copyright (C) 2021 Anthony Weathersby - The Hydrocarbon Parser Compiler
# see /source/typescript/hydrocarbon.ts for full copyright and warranty 
# disclaimer notice.

# version 3.0

@IMPORT ./production_bodies.hcg as pb

@IMPORT ../misc/default-productions.hcg as def

@IGNORE g:ws g:nl

#######################################################################################################################
######################################  SYMBOLS
########################################################################################################################

<> hcg_symbols > symbol(+)

<> condition_symbol_list > terminal_symbol(+)

<> lexer_symbols > lexer_symbol(+)                                     

<> ignore_symbols > ignore_symbol(+)                                      

<> lexer_symbol > generated_symbol
    | literal_symbol
    | escaped_symbol
    | grouped_symbol grouped_delimiter                          f:r { { type:"symbol", val:$1, pos:pos, meta:false } }    

<> grouped_delimiter >  g:nl | g:ws                                    

<> grouped_symbol >  ( g:sym | g:id )(+\" )  sym_delimiter?     f:r { { type:"symbol", val:$1, pos:pos, meta:false }}                                                    

<> ignore_symbol > generated_symbol
    | literal_symbol
    | escaped_symbol
    | production_token_symbol

<>  terminal_symbol > generated_symbol
    | literal_symbol
    | escaped_symbol
    

<> symbol > symbol \?                                            f:r { $1.IS_OPTIONAL = 1, $1 }
    
    | \<= symbol                                                 f:r { { type:"look-behind", val:$2.val, phased: $2 } }

    | \?= symbol                                                 f:r { $2.IS_NON_CAPTURE = true, $2 }
    
    | generated_symbol 
    
    | production_symbol
    
    | production_token_symbol
    
    | imported_production_symbol
    
    | literal_symbol
    
    | escaped_symbol

    | EOF_symbol

    | \( pb::production_bodies \)                        
                                                                f:r { { type:"group-production", val:$2, pos:pos, meta:false } }       

    | symbol ( \(+ | \(* )  terminal_symbol?  \)                f:r { { type:"list-production", terminal_symbol:$$3, IS_OPTIONAL:+($2 == "(*"), val:$1, pos:pos, meta:false } }

    | g:sym                                                     f:r { { type:"literal", val:$1, pos:pos, meta:false } }

<> EOF_symbol > 
    \$eof                                                       f:r { { type:"eof", val:"END_OF_FILE", pos:pos, meta:false } }

<> empty_symbol > 
    \$empty                                                     f:r { { type:"empty", val:"", pos:pos, meta:false } }

<> generated_symbol > 
    \g: identifier                                              f:r { { type:"generated", val:$2, pos:pos, meta:false } }

<> literal_symbol > 
    \t: ( identifier | g:num ) sym_delimiter? 
                                                                f:r { { type:"exclusive-literal", val:""+$2, pos:pos, meta:false } }

<> escaped_symbol > 
    \\ ( g:id | g:sym | g:num )(+\" ) sym_delimiter             f:r { { type:"literal", val:$2, pos:pos, meta:false } }

<> production_token_symbol > \tk: identifier                    f:r { { type:"production_token", name:$2, production:null, val:-1, pos:pos, meta:false } }

<> production_symbol > 
    identifier                                                  f:r { { type:"sym-production", name:$1, production:null, val:-1, pos:pos, meta:false } }

<> imported_production_symbol > 
    identifier \:: identifier                                   f:r { { type:"sym-production-import", module:$1, production:$3, name:"", pos:pos, meta:false } } 

<> production_id > identifier

<> identifier >  def::js_identifier 

<> js_identifier >  def::js_identifier

<> sym_delimiter >  g:ws | $eof  | g:nl 

<> meta_symbol >   \(EXC condition_symbol_list \)                     
                                                                f:r { { type:"meta-exclude", sym : $2, meta:true, index:-1} }
       | \(ERR condition_symbol_list \)                     
                                                                f:r { { type:"meta-error",   sym : $2, meta:true, index:-1} }
       | \(IGN condition_symbol_list \)                    
                                                                f:r { { type:"meta-ignore",  sym : $2, meta:true, index:-1} }
       | \(RST condition_symbol_list \)                     
                                                                f:r { { type:"meta-reset",   sym : $2, meta:true, index:-1} }
       | \(RED symbol \)                                    
                                                                f:r { { type:"meta-reduce",  sym : $2, meta:true, index:-1} }
